/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __intptr_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type ssize_t = __ssize_t;
pub type wchar_t = ::std::os::raw::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type Py_uintptr_t = usize;
pub type Py_intptr_t = isize;
pub type Py_ssize_t = ssize_t;
pub type Py_hash_t = Py_ssize_t;
pub type Py_uhash_t = size_t;
pub type Py_ssize_clean_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub type PyTypeObject = _typeobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut PyTypeObject,
}
#[test]
fn bindgen_test_layout__object() {
    assert_eq!(
        ::std::mem::size_of::<_object>(),
        16usize,
        concat!("Size of: ", stringify!(_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_object>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_object),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_object>())).ob_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_object),
            "::",
            stringify!(ob_type)
        )
    );
}
pub type PyObject = _object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyVarObject {
    pub ob_base: PyObject,
    pub ob_size: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyVarObject() {
    assert_eq!(
        ::std::mem::size_of::<PyVarObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyVarObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyVarObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyVarObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_size)
        )
    );
}
pub type unaryfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type binaryfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type ternaryfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type inquiry =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int>;
pub type lenfunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t>;
pub type ssizeargfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
>;
pub type ssizeobjargproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type objobjargproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type objobjproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
>;
pub type visitproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type traverseproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: visitproc,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type freefunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type destructor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>;
pub type getattrfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_char) -> *mut PyObject,
>;
pub type getattrofunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type setattrfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type setattrofunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type reprfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type hashfunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_hash_t>;
pub type richcmpfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject,
>;
pub type getiterfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type iternextfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type descrgetfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type descrsetfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type initproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type newfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyTypeObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type allocfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: Py_ssize_t) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyType_Slot {
    pub slot: ::std::os::raw::c_int,
    pub pfunc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyType_Slot() {
    assert_eq!(
        ::std::mem::size_of::<PyType_Slot>(),
        16usize,
        concat!("Size of: ", stringify!(PyType_Slot))
    );
    assert_eq!(
        ::std::mem::align_of::<PyType_Slot>(),
        8usize,
        concat!("Alignment of ", stringify!(PyType_Slot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Slot>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Slot),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Slot>())).pfunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Slot),
            "::",
            stringify!(pfunc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyType_Spec {
    pub name: *const ::std::os::raw::c_char,
    pub basicsize: ::std::os::raw::c_int,
    pub itemsize: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub slots: *mut PyType_Slot,
}
#[test]
fn bindgen_test_layout_PyType_Spec() {
    assert_eq!(
        ::std::mem::size_of::<PyType_Spec>(),
        32usize,
        concat!("Size of: ", stringify!(PyType_Spec))
    );
    assert_eq!(
        ::std::mem::align_of::<PyType_Spec>(),
        8usize,
        concat!("Alignment of ", stringify!(PyType_Spec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).basicsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(basicsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).itemsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).slots as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(slots)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_Identifier {
    pub next: *mut _Py_Identifier,
    pub string: *const ::std::os::raw::c_char,
    pub object: *mut PyObject,
}
#[test]
fn bindgen_test_layout__Py_Identifier() {
    assert_eq!(
        ::std::mem::size_of::<_Py_Identifier>(),
        24usize,
        concat!("Size of: ", stringify!(_Py_Identifier))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_Identifier>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_Identifier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_Identifier>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_Identifier),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_Identifier>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_Identifier),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_Identifier>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_Identifier),
            "::",
            stringify!(object)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferinfo {
    pub buf: *mut ::std::os::raw::c_void,
    pub obj: *mut PyObject,
    pub len: Py_ssize_t,
    pub itemsize: Py_ssize_t,
    pub readonly: ::std::os::raw::c_int,
    pub ndim: ::std::os::raw::c_int,
    pub format: *mut ::std::os::raw::c_char,
    pub shape: *mut Py_ssize_t,
    pub strides: *mut Py_ssize_t,
    pub suboffsets: *mut Py_ssize_t,
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bufferinfo() {
    assert_eq!(
        ::std::mem::size_of::<bufferinfo>(),
        80usize,
        concat!("Size of: ", stringify!(bufferinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).itemsize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).readonly as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).ndim as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).shape as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).strides as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).suboffsets as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(suboffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).internal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(internal)
        )
    );
}
pub type Py_buffer = bufferinfo;
pub type getbufferproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut Py_buffer,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type releasebufferproc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_buffer)>;
pub type vectorcallfunc = ::std::option::Option<
    unsafe extern "C" fn(
        callable: *mut PyObject,
        args: *const *mut PyObject,
        nargsf: size_t,
        kwnames: *mut PyObject,
    ) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyNumberMethods {
    pub nb_add: binaryfunc,
    pub nb_subtract: binaryfunc,
    pub nb_multiply: binaryfunc,
    pub nb_remainder: binaryfunc,
    pub nb_divmod: binaryfunc,
    pub nb_power: ternaryfunc,
    pub nb_negative: unaryfunc,
    pub nb_positive: unaryfunc,
    pub nb_absolute: unaryfunc,
    pub nb_bool: inquiry,
    pub nb_invert: unaryfunc,
    pub nb_lshift: binaryfunc,
    pub nb_rshift: binaryfunc,
    pub nb_and: binaryfunc,
    pub nb_xor: binaryfunc,
    pub nb_or: binaryfunc,
    pub nb_int: unaryfunc,
    pub nb_reserved: *mut ::std::os::raw::c_void,
    pub nb_float: unaryfunc,
    pub nb_inplace_add: binaryfunc,
    pub nb_inplace_subtract: binaryfunc,
    pub nb_inplace_multiply: binaryfunc,
    pub nb_inplace_remainder: binaryfunc,
    pub nb_inplace_power: ternaryfunc,
    pub nb_inplace_lshift: binaryfunc,
    pub nb_inplace_rshift: binaryfunc,
    pub nb_inplace_and: binaryfunc,
    pub nb_inplace_xor: binaryfunc,
    pub nb_inplace_or: binaryfunc,
    pub nb_floor_divide: binaryfunc,
    pub nb_true_divide: binaryfunc,
    pub nb_inplace_floor_divide: binaryfunc,
    pub nb_inplace_true_divide: binaryfunc,
    pub nb_index: unaryfunc,
    pub nb_matrix_multiply: binaryfunc,
    pub nb_inplace_matrix_multiply: binaryfunc,
}
#[test]
fn bindgen_test_layout_PyNumberMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyNumberMethods>(),
        288usize,
        concat!("Size of: ", stringify!(PyNumberMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyNumberMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyNumberMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_add as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_subtract as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_subtract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_multiply as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_multiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_remainder as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_remainder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_divmod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_divmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_power as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_negative as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_negative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_positive as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_positive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_absolute as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_absolute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_bool as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_invert as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_invert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_lshift as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_lshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_rshift as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_rshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_and as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_xor as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_xor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_or as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_int as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_reserved as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_float as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_add as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_subtract as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_subtract)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_multiply as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_multiply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_remainder as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_remainder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_power as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_power)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_lshift as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_lshift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_rshift as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_rshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_and as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_xor as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_xor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_or as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_floor_divide as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_floor_divide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_true_divide as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_true_divide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_floor_divide as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_floor_divide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_true_divide as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_true_divide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_index as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_matrix_multiply as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_matrix_multiply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_matrix_multiply as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_matrix_multiply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySequenceMethods {
    pub sq_length: lenfunc,
    pub sq_concat: binaryfunc,
    pub sq_repeat: ssizeargfunc,
    pub sq_item: ssizeargfunc,
    pub was_sq_slice: *mut ::std::os::raw::c_void,
    pub sq_ass_item: ssizeobjargproc,
    pub was_sq_ass_slice: *mut ::std::os::raw::c_void,
    pub sq_contains: objobjproc,
    pub sq_inplace_concat: binaryfunc,
    pub sq_inplace_repeat: ssizeargfunc,
}
#[test]
fn bindgen_test_layout_PySequenceMethods() {
    assert_eq!(
        ::std::mem::size_of::<PySequenceMethods>(),
        80usize,
        concat!("Size of: ", stringify!(PySequenceMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PySequenceMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PySequenceMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_concat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_concat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_repeat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_repeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).was_sq_slice as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(was_sq_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_ass_item as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_ass_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).was_sq_ass_slice as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(was_sq_ass_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_contains as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_contains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).sq_inplace_concat as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_inplace_concat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).sq_inplace_repeat as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_inplace_repeat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMappingMethods {
    pub mp_length: lenfunc,
    pub mp_subscript: binaryfunc,
    pub mp_ass_subscript: objobjargproc,
}
#[test]
fn bindgen_test_layout_PyMappingMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyMappingMethods>(),
        24usize,
        concat!("Size of: ", stringify!(PyMappingMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMappingMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMappingMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMappingMethods>())).mp_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMappingMethods>())).mp_subscript as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_subscript)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyMappingMethods>())).mp_ass_subscript as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_ass_subscript)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyAsyncMethods {
    pub am_await: unaryfunc,
    pub am_aiter: unaryfunc,
    pub am_anext: unaryfunc,
}
#[test]
fn bindgen_test_layout_PyAsyncMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyAsyncMethods>(),
        24usize,
        concat!("Size of: ", stringify!(PyAsyncMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyAsyncMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyAsyncMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_await as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_await)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_aiter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_aiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_anext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_anext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBufferProcs {
    pub bf_getbuffer: getbufferproc,
    pub bf_releasebuffer: releasebufferproc,
}
#[test]
fn bindgen_test_layout_PyBufferProcs() {
    assert_eq!(
        ::std::mem::size_of::<PyBufferProcs>(),
        16usize,
        concat!("Size of: ", stringify!(PyBufferProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBufferProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBufferProcs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBufferProcs>())).bf_getbuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBufferProcs),
            "::",
            stringify!(bf_getbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBufferProcs>())).bf_releasebuffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBufferProcs),
            "::",
            stringify!(bf_releasebuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _typeobject {
    pub ob_base: PyVarObject,
    pub tp_name: *const ::std::os::raw::c_char,
    pub tp_basicsize: Py_ssize_t,
    pub tp_itemsize: Py_ssize_t,
    pub tp_dealloc: destructor,
    pub tp_vectorcall_offset: Py_ssize_t,
    pub tp_getattr: getattrfunc,
    pub tp_setattr: setattrfunc,
    pub tp_as_async: *mut PyAsyncMethods,
    pub tp_repr: reprfunc,
    pub tp_as_number: *mut PyNumberMethods,
    pub tp_as_sequence: *mut PySequenceMethods,
    pub tp_as_mapping: *mut PyMappingMethods,
    pub tp_hash: hashfunc,
    pub tp_call: ternaryfunc,
    pub tp_str: reprfunc,
    pub tp_getattro: getattrofunc,
    pub tp_setattro: setattrofunc,
    pub tp_as_buffer: *mut PyBufferProcs,
    pub tp_flags: ::std::os::raw::c_ulong,
    pub tp_doc: *const ::std::os::raw::c_char,
    pub tp_traverse: traverseproc,
    pub tp_clear: inquiry,
    pub tp_richcompare: richcmpfunc,
    pub tp_weaklistoffset: Py_ssize_t,
    pub tp_iter: getiterfunc,
    pub tp_iternext: iternextfunc,
    pub tp_methods: *mut PyMethodDef,
    pub tp_members: *mut PyMemberDef,
    pub tp_getset: *mut PyGetSetDef,
    pub tp_base: *mut _typeobject,
    pub tp_dict: *mut PyObject,
    pub tp_descr_get: descrgetfunc,
    pub tp_descr_set: descrsetfunc,
    pub tp_dictoffset: Py_ssize_t,
    pub tp_init: initproc,
    pub tp_alloc: allocfunc,
    pub tp_new: newfunc,
    pub tp_free: freefunc,
    pub tp_is_gc: inquiry,
    pub tp_bases: *mut PyObject,
    pub tp_mro: *mut PyObject,
    pub tp_cache: *mut PyObject,
    pub tp_subclasses: *mut PyObject,
    pub tp_weaklist: *mut PyObject,
    pub tp_del: destructor,
    pub tp_version_tag: ::std::os::raw::c_uint,
    pub tp_finalize: destructor,
    pub tp_vectorcall: vectorcallfunc,
}
#[test]
fn bindgen_test_layout__typeobject() {
    assert_eq!(
        ::std::mem::size_of::<_typeobject>(),
        408usize,
        concat!("Size of: ", stringify!(_typeobject))
    );
    assert_eq!(
        ::std::mem::align_of::<_typeobject>(),
        8usize,
        concat!("Alignment of ", stringify!(_typeobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_basicsize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_basicsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_itemsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dealloc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dealloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_typeobject>())).tp_vectorcall_offset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_vectorcall_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getattr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_setattr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_setattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_async as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_repr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_repr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_number as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_sequence as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_mapping as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_hash as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_call as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_str as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getattro as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getattro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_setattro as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_setattro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_buffer as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_flags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_doc as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_traverse as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_traverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_clear as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_richcompare as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_richcompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_weaklistoffset as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_weaklistoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_iter as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_iternext as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_iternext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_methods as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_members as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getset as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_base as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dict as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_descr_get as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_descr_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_descr_set as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_descr_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dictoffset as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dictoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_init as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_alloc as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_new as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_free as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_is_gc as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_is_gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_bases as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_bases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_mro as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_mro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_cache as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_subclasses as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_subclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_weaklist as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_weaklist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_del as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_version_tag as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_version_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_finalize as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_finalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_vectorcall as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_vectorcall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heaptypeobject {
    pub ht_type: PyTypeObject,
    pub as_async: PyAsyncMethods,
    pub as_number: PyNumberMethods,
    pub as_mapping: PyMappingMethods,
    pub as_sequence: PySequenceMethods,
    pub as_buffer: PyBufferProcs,
    pub ht_name: *mut PyObject,
    pub ht_slots: *mut PyObject,
    pub ht_qualname: *mut PyObject,
    pub ht_cached_keys: *mut _dictkeysobject,
    pub ht_module: *mut PyObject,
}
#[test]
fn bindgen_test_layout__heaptypeobject() {
    assert_eq!(
        ::std::mem::size_of::<_heaptypeobject>(),
        880usize,
        concat!("Size of: ", stringify!(_heaptypeobject))
    );
    assert_eq!(
        ::std::mem::align_of::<_heaptypeobject>(),
        8usize,
        concat!("Alignment of ", stringify!(_heaptypeobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_async as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_number as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_mapping as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_sequence as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_buffer as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_name as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_slots as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_qualname as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_qualname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_cached_keys as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_cached_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_module as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_module)
        )
    );
}
pub type PyHeapTypeObject = _heaptypeobject;
pub type _PyTime_t = i64;
pub const _PyTime_round_t__PyTime_ROUND_FLOOR: _PyTime_round_t = 0;
pub const _PyTime_round_t__PyTime_ROUND_CEILING: _PyTime_round_t = 1;
pub const _PyTime_round_t__PyTime_ROUND_HALF_EVEN: _PyTime_round_t = 2;
pub const _PyTime_round_t__PyTime_ROUND_UP: _PyTime_round_t = 3;
pub const _PyTime_round_t__PyTime_ROUND_TIMEOUT: _PyTime_round_t = 3;
pub type _PyTime_round_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_clock_info_t {
    pub implementation: *const ::std::os::raw::c_char,
    pub monotonic: ::std::os::raw::c_int,
    pub adjustable: ::std::os::raw::c_int,
    pub resolution: f64,
}
#[test]
fn bindgen_test_layout__Py_clock_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_Py_clock_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(_Py_clock_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_clock_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_clock_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_clock_info_t>())).implementation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_clock_info_t),
            "::",
            stringify!(implementation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_clock_info_t>())).monotonic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_clock_info_t),
            "::",
            stringify!(monotonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_clock_info_t>())).adjustable as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_clock_info_t),
            "::",
            stringify!(adjustable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_clock_info_t>())).resolution as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_clock_info_t),
            "::",
            stringify!(resolution)
        )
    );
}
pub const PyMemAllocatorDomain_PYMEM_DOMAIN_RAW: PyMemAllocatorDomain = 0;
pub const PyMemAllocatorDomain_PYMEM_DOMAIN_MEM: PyMemAllocatorDomain = 1;
pub const PyMemAllocatorDomain_PYMEM_DOMAIN_OBJ: PyMemAllocatorDomain = 2;
pub type PyMemAllocatorDomain = ::std::os::raw::c_uint;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_NOT_SET: PyMemAllocatorName = 0;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_DEFAULT: PyMemAllocatorName = 1;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_DEBUG: PyMemAllocatorName = 2;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_MALLOC: PyMemAllocatorName = 3;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_MALLOC_DEBUG: PyMemAllocatorName = 4;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_PYMALLOC: PyMemAllocatorName = 5;
pub const PyMemAllocatorName_PYMEM_ALLOCATOR_PYMALLOC_DEBUG: PyMemAllocatorName = 6;
pub type PyMemAllocatorName = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemAllocatorEx {
    pub ctx: *mut ::std::os::raw::c_void,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            nelem: size_t,
            elsize: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            new_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_PyMemAllocatorEx() {
    assert_eq!(
        ::std::mem::size_of::<PyMemAllocatorEx>(),
        40usize,
        concat!("Size of: ", stringify!(PyMemAllocatorEx))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemAllocatorEx>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemAllocatorEx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemAllocatorEx>())).ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemAllocatorEx),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemAllocatorEx>())).malloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemAllocatorEx),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemAllocatorEx>())).calloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemAllocatorEx),
            "::",
            stringify!(calloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemAllocatorEx>())).realloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemAllocatorEx),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemAllocatorEx>())).free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemAllocatorEx),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyObjectArenaAllocator {
    pub ctx: *mut ::std::os::raw::c_void,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: size_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout_PyObjectArenaAllocator() {
    assert_eq!(
        ::std::mem::size_of::<PyObjectArenaAllocator>(),
        24usize,
        concat!("Size of: ", stringify!(PyObjectArenaAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<PyObjectArenaAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(PyObjectArenaAllocator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyObjectArenaAllocator>())).ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyObjectArenaAllocator),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyObjectArenaAllocator>())).alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyObjectArenaAllocator),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyObjectArenaAllocator>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyObjectArenaAllocator),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _Py_HashSecret_t {
    pub uc: [::std::os::raw::c_uchar; 24usize],
    pub fnv: _Py_HashSecret_t__bindgen_ty_1,
    pub siphash: _Py_HashSecret_t__bindgen_ty_2,
    pub djbx33a: _Py_HashSecret_t__bindgen_ty_3,
    pub expat: _Py_HashSecret_t__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_HashSecret_t__bindgen_ty_1 {
    pub prefix: Py_hash_t,
    pub suffix: Py_hash_t,
}
#[test]
fn bindgen_test_layout__Py_HashSecret_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_Py_HashSecret_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_Py_HashSecret_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_HashSecret_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_HashSecret_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_1>())).prefix as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_1),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_1>())).suffix as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_1),
            "::",
            stringify!(suffix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_HashSecret_t__bindgen_ty_2 {
    pub k0: u64,
    pub k1: u64,
}
#[test]
fn bindgen_test_layout__Py_HashSecret_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_Py_HashSecret_t__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_Py_HashSecret_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_HashSecret_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_HashSecret_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_2>())).k0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_2),
            "::",
            stringify!(k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_2>())).k1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_2),
            "::",
            stringify!(k1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_HashSecret_t__bindgen_ty_3 {
    pub padding: [::std::os::raw::c_uchar; 16usize],
    pub suffix: Py_hash_t,
}
#[test]
fn bindgen_test_layout__Py_HashSecret_t__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_Py_HashSecret_t__bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(_Py_HashSecret_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_HashSecret_t__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_HashSecret_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_3>())).padding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_3),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_3>())).suffix as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_3),
            "::",
            stringify!(suffix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_HashSecret_t__bindgen_ty_4 {
    pub padding: [::std::os::raw::c_uchar; 16usize],
    pub hashsalt: Py_hash_t,
}
#[test]
fn bindgen_test_layout__Py_HashSecret_t__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<_Py_HashSecret_t__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(_Py_HashSecret_t__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_HashSecret_t__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_HashSecret_t__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_4>())).padding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_4),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Py_HashSecret_t__bindgen_ty_4>())).hashsalt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t__bindgen_ty_4),
            "::",
            stringify!(hashsalt)
        )
    );
}
#[test]
fn bindgen_test_layout__Py_HashSecret_t() {
    assert_eq!(
        ::std::mem::size_of::<_Py_HashSecret_t>(),
        24usize,
        concat!("Size of: ", stringify!(_Py_HashSecret_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_HashSecret_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_Py_HashSecret_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_HashSecret_t>())).uc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_HashSecret_t>())).fnv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t),
            "::",
            stringify!(fnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_HashSecret_t>())).siphash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t),
            "::",
            stringify!(siphash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_HashSecret_t>())).djbx33a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t),
            "::",
            stringify!(djbx33a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_HashSecret_t>())).expat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_HashSecret_t),
            "::",
            stringify!(expat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyHash_FuncDef {
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: Py_ssize_t) -> Py_hash_t,
    >,
    pub name: *const ::std::os::raw::c_char,
    pub hash_bits: ::std::os::raw::c_int,
    pub seed_bits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyHash_FuncDef() {
    assert_eq!(
        ::std::mem::size_of::<PyHash_FuncDef>(),
        24usize,
        concat!("Size of: ", stringify!(PyHash_FuncDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyHash_FuncDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyHash_FuncDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyHash_FuncDef>())).hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyHash_FuncDef),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyHash_FuncDef>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyHash_FuncDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyHash_FuncDef>())).hash_bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyHash_FuncDef),
            "::",
            stringify!(hash_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyHash_FuncDef>())).seed_bits as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PyHash_FuncDef),
            "::",
            stringify!(seed_bits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyByteArrayObject {
    pub ob_base: PyVarObject,
    pub ob_alloc: Py_ssize_t,
    pub ob_bytes: *mut ::std::os::raw::c_char,
    pub ob_start: *mut ::std::os::raw::c_char,
    pub ob_exports: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyByteArrayObject() {
    assert_eq!(
        ::std::mem::size_of::<PyByteArrayObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyByteArrayObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyByteArrayObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyByteArrayObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_alloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_bytes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_start as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_exports as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_exports)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBytesObject {
    pub ob_base: PyVarObject,
    pub ob_shash: Py_hash_t,
    pub ob_sval: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_PyBytesObject() {
    assert_eq!(
        ::std::mem::size_of::<PyBytesObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyBytesObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBytesObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBytesObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_shash as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_shash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_sval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_sval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyBytesWriter {
    pub buffer: *mut PyObject,
    pub allocated: Py_ssize_t,
    pub min_size: Py_ssize_t,
    pub use_bytearray: ::std::os::raw::c_int,
    pub overallocate: ::std::os::raw::c_int,
    pub use_small_buffer: ::std::os::raw::c_int,
    pub small_buffer: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout__PyBytesWriter() {
    assert_eq!(
        ::std::mem::size_of::<_PyBytesWriter>(),
        552usize,
        concat!("Size of: ", stringify!(_PyBytesWriter))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyBytesWriter>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyBytesWriter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).allocated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).min_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(min_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).use_bytearray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(use_bytearray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).overallocate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(overallocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).use_small_buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(use_small_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyBytesWriter>())).small_buffer as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyBytesWriter),
            "::",
            stringify!(small_buffer)
        )
    );
}
pub type Py_UCS4 = u32;
pub type Py_UCS2 = u16;
pub type Py_UCS1 = u8;
pub type Py_UNICODE = wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyASCIIObject {
    pub ob_base: PyObject,
    pub length: Py_ssize_t,
    pub hash: Py_hash_t,
    pub state: PyASCIIObject__bindgen_ty_1,
    pub wstr: *mut wchar_t,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct PyASCIIObject__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_PyASCIIObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<PyASCIIObject__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(PyASCIIObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<PyASCIIObject__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(PyASCIIObject__bindgen_ty_1))
    );
}
impl PyASCIIObject__bindgen_ty_1 {
    #[inline]
    pub fn interned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_interned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn kind(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_kind(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn compact(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_compact(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ascii(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ascii(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ready(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ready(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        interned: ::std::os::raw::c_uint,
        kind: ::std::os::raw::c_uint,
        compact: ::std::os::raw::c_uint,
        ascii: ::std::os::raw::c_uint,
        ready: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let interned: u32 = unsafe { ::std::mem::transmute(interned) };
            interned as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let kind: u32 = unsafe { ::std::mem::transmute(kind) };
            kind as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let compact: u32 = unsafe { ::std::mem::transmute(compact) };
            compact as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ascii: u32 = unsafe { ::std::mem::transmute(ascii) };
            ascii as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ready: u32 = unsafe { ::std::mem::transmute(ready) };
            ready as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_PyASCIIObject() {
    assert_eq!(
        ::std::mem::size_of::<PyASCIIObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyASCIIObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyASCIIObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyASCIIObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).hash as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).wstr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(wstr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCompactUnicodeObject {
    pub _base: PyASCIIObject,
    pub utf8_length: Py_ssize_t,
    pub utf8: *mut ::std::os::raw::c_char,
    pub wstr_length: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyCompactUnicodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCompactUnicodeObject>(),
        72usize,
        concat!("Size of: ", stringify!(PyCompactUnicodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCompactUnicodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCompactUnicodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompactUnicodeObject>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyCompactUnicodeObject>())).utf8_length as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(utf8_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompactUnicodeObject>())).utf8 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(utf8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyCompactUnicodeObject>())).wstr_length as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(wstr_length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyUnicodeObject {
    pub _base: PyCompactUnicodeObject,
    pub data: PyUnicodeObject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PyUnicodeObject__bindgen_ty_1 {
    pub any: *mut ::std::os::raw::c_void,
    pub latin1: *mut Py_UCS1,
    pub ucs2: *mut Py_UCS2,
    pub ucs4: *mut Py_UCS4,
}
#[test]
fn bindgen_test_layout_PyUnicodeObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<PyUnicodeObject__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(PyUnicodeObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<PyUnicodeObject__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(PyUnicodeObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyUnicodeObject__bindgen_ty_1>())).any as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject__bindgen_ty_1),
            "::",
            stringify!(any)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyUnicodeObject__bindgen_ty_1>())).latin1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject__bindgen_ty_1),
            "::",
            stringify!(latin1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyUnicodeObject__bindgen_ty_1>())).ucs2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject__bindgen_ty_1),
            "::",
            stringify!(ucs2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyUnicodeObject__bindgen_ty_1>())).ucs4 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject__bindgen_ty_1),
            "::",
            stringify!(ucs4)
        )
    );
}
#[test]
fn bindgen_test_layout_PyUnicodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyUnicodeObject>(),
        80usize,
        concat!("Size of: ", stringify!(PyUnicodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyUnicodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyUnicodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeObject>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeObject>())).data as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject),
            "::",
            stringify!(data)
        )
    );
}
pub const PyUnicode_Kind_PyUnicode_WCHAR_KIND: PyUnicode_Kind = 0;
pub const PyUnicode_Kind_PyUnicode_1BYTE_KIND: PyUnicode_Kind = 1;
pub const PyUnicode_Kind_PyUnicode_2BYTE_KIND: PyUnicode_Kind = 2;
pub const PyUnicode_Kind_PyUnicode_4BYTE_KIND: PyUnicode_Kind = 4;
pub type PyUnicode_Kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyUnicodeWriter {
    pub buffer: *mut PyObject,
    pub data: *mut ::std::os::raw::c_void,
    pub kind: PyUnicode_Kind,
    pub maxchar: Py_UCS4,
    pub size: Py_ssize_t,
    pub pos: Py_ssize_t,
    pub min_length: Py_ssize_t,
    pub min_char: Py_UCS4,
    pub overallocate: ::std::os::raw::c_uchar,
    pub readonly: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__PyUnicodeWriter() {
    assert_eq!(
        ::std::mem::size_of::<_PyUnicodeWriter>(),
        56usize,
        concat!("Size of: ", stringify!(_PyUnicodeWriter))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyUnicodeWriter>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyUnicodeWriter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).maxchar as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(maxchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).min_length as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(min_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).min_char as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(min_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).overallocate as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(overallocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyUnicodeWriter>())).readonly as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyUnicodeWriter),
            "::",
            stringify!(readonly)
        )
    );
}
pub type PyLongObject = _longobject;
pub type digit = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _longobject {
    pub ob_base: PyVarObject,
    pub ob_digit: [digit; 1usize],
}
#[test]
fn bindgen_test_layout__longobject() {
    assert_eq!(
        ::std::mem::size_of::<_longobject>(),
        32usize,
        concat!("Size of: ", stringify!(_longobject))
    );
    assert_eq!(
        ::std::mem::align_of::<_longobject>(),
        8usize,
        concat!("Alignment of ", stringify!(_longobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_longobject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_longobject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_longobject>())).ob_digit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_longobject),
            "::",
            stringify!(ob_digit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyFloatObject {
    pub ob_base: PyObject,
    pub ob_fval: f64,
}
#[test]
fn bindgen_test_layout_PyFloatObject() {
    assert_eq!(
        ::std::mem::size_of::<PyFloatObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyFloatObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyFloatObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyFloatObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_fval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_fval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Py_complex {
    pub real: f64,
    pub imag: f64,
}
#[test]
fn bindgen_test_layout_Py_complex() {
    assert_eq!(
        ::std::mem::size_of::<Py_complex>(),
        16usize,
        concat!("Size of: ", stringify!(Py_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<Py_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(Py_complex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Py_complex>())).real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Py_complex),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Py_complex>())).imag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Py_complex),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyComplexObject {
    pub ob_base: PyObject,
    pub cval: Py_complex,
}
#[test]
fn bindgen_test_layout_PyComplexObject() {
    assert_eq!(
        ::std::mem::size_of::<PyComplexObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyComplexObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyComplexObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyComplexObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).cval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(cval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyManagedBufferObject {
    pub ob_base: PyObject,
    pub flags: ::std::os::raw::c_int,
    pub exports: Py_ssize_t,
    pub master: Py_buffer,
}
#[test]
fn bindgen_test_layout__PyManagedBufferObject() {
    assert_eq!(
        ::std::mem::size_of::<_PyManagedBufferObject>(),
        112usize,
        concat!("Size of: ", stringify!(_PyManagedBufferObject))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyManagedBufferObject>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyManagedBufferObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyManagedBufferObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyManagedBufferObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyManagedBufferObject>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyManagedBufferObject),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyManagedBufferObject>())).exports as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyManagedBufferObject),
            "::",
            stringify!(exports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyManagedBufferObject>())).master as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyManagedBufferObject),
            "::",
            stringify!(master)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemoryViewObject {
    pub ob_base: PyVarObject,
    pub mbuf: *mut _PyManagedBufferObject,
    pub hash: Py_hash_t,
    pub flags: ::std::os::raw::c_int,
    pub exports: Py_ssize_t,
    pub view: Py_buffer,
    pub weakreflist: *mut PyObject,
    pub ob_array: [Py_ssize_t; 1usize],
}
#[test]
fn bindgen_test_layout_PyMemoryViewObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMemoryViewObject>(),
        152usize,
        concat!("Size of: ", stringify!(PyMemoryViewObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemoryViewObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemoryViewObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).mbuf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(mbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).hash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).exports as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(exports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).view as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).weakreflist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).ob_array as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(ob_array)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyTupleObject {
    pub ob_base: PyVarObject,
    pub ob_item: [*mut PyObject; 1usize],
}
#[test]
fn bindgen_test_layout_PyTupleObject() {
    assert_eq!(
        ::std::mem::size_of::<PyTupleObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyTupleObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyTupleObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyTupleObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_item)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyListObject {
    pub ob_base: PyVarObject,
    pub ob_item: *mut *mut PyObject,
    pub allocated: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyListObject() {
    assert_eq!(
        ::std::mem::size_of::<PyListObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyListObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyListObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyListObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).ob_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(ob_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).allocated as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(allocated)
        )
    );
}
pub type PyDictKeysObject = _dictkeysobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDictObject {
    pub ob_base: PyObject,
    pub ma_used: Py_ssize_t,
    pub ma_version_tag: u64,
    pub ma_keys: *mut PyDictKeysObject,
    pub ma_values: *mut *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyDictObject() {
    assert_eq!(
        ::std::mem::size_of::<PyDictObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyDictObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDictObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDictObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ma_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ma_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ma_version_tag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ma_version_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ma_keys as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ma_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ma_values as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ma_values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyDictViewObject {
    pub ob_base: PyObject,
    pub dv_dict: *mut PyDictObject,
}
#[test]
fn bindgen_test_layout__PyDictViewObject() {
    assert_eq!(
        ::std::mem::size_of::<_PyDictViewObject>(),
        24usize,
        concat!("Size of: ", stringify!(_PyDictViewObject))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyDictViewObject>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyDictViewObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyDictViewObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyDictViewObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyDictViewObject>())).dv_dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyDictViewObject),
            "::",
            stringify!(dv_dict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odictobject {
    _unused: [u8; 0],
}
pub type PyODictObject = _odictobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct setentry {
    pub key: *mut PyObject,
    pub hash: Py_hash_t,
}
#[test]
fn bindgen_test_layout_setentry() {
    assert_eq!(
        ::std::mem::size_of::<setentry>(),
        16usize,
        concat!("Size of: ", stringify!(setentry))
    );
    assert_eq!(
        ::std::mem::align_of::<setentry>(),
        8usize,
        concat!("Alignment of ", stringify!(setentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setentry>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(setentry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<setentry>())).hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(setentry),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySetObject {
    pub ob_base: PyObject,
    pub fill: Py_ssize_t,
    pub used: Py_ssize_t,
    pub mask: Py_ssize_t,
    pub table: *mut setentry,
    pub hash: Py_hash_t,
    pub finger: Py_ssize_t,
    pub smalltable: [setentry; 8usize],
    pub weakreflist: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PySetObject() {
    assert_eq!(
        ::std::mem::size_of::<PySetObject>(),
        200usize,
        concat!("Size of: ", stringify!(PySetObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PySetObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PySetObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).fill as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).used as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).hash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).finger as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(finger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).smalltable as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(smalltable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySetObject>())).weakreflist as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PySetObject),
            "::",
            stringify!(weakreflist)
        )
    );
}
pub type PyCFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type _PyCFunctionFast = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *const *mut PyObject,
        arg3: Py_ssize_t,
    ) -> *mut PyObject,
>;
pub type PyCFunctionWithKeywords = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type _PyCFunctionFastWithKeywords = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *const *mut PyObject,
        arg3: Py_ssize_t,
        arg4: *mut PyObject,
    ) -> *mut PyObject,
>;
pub type PyCMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyTypeObject,
        arg3: *const *mut PyObject,
        arg4: size_t,
        arg5: *mut PyObject,
    ) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodDef {
    pub ml_name: *const ::std::os::raw::c_char,
    pub ml_meth: PyCFunction,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_doc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PyMethodDef() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodDef>(),
        32usize,
        concat!("Size of: ", stringify!(PyMethodDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_meth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_doc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCFunctionObject {
    pub ob_base: PyObject,
    pub m_ml: *mut PyMethodDef,
    pub m_self: *mut PyObject,
    pub m_module: *mut PyObject,
    pub m_weakreflist: *mut PyObject,
    pub vectorcall: vectorcallfunc,
}
#[test]
fn bindgen_test_layout_PyCFunctionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCFunctionObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyCFunctionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCFunctionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCFunctionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_ml as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_self as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_module as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_weakreflist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).vectorcall as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(vectorcall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCMethodObject {
    pub func: PyCFunctionObject,
    pub mm_class: *mut PyTypeObject,
}
#[test]
fn bindgen_test_layout_PyCMethodObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCMethodObject>(),
        64usize,
        concat!("Size of: ", stringify!(PyCMethodObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCMethodObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCMethodObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCMethodObject>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCMethodObject),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCMethodObject>())).mm_class as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCMethodObject),
            "::",
            stringify!(mm_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef_Base {
    pub ob_base: PyObject,
    pub m_init: ::std::option::Option<unsafe extern "C" fn() -> *mut PyObject>,
    pub m_index: Py_ssize_t,
    pub m_copy: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyModuleDef_Base() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef_Base>(),
        40usize,
        concat!("Size of: ", stringify!(PyModuleDef_Base))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef_Base>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef_Base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_copy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_copy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef_Slot {
    pub slot: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyModuleDef_Slot() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef_Slot>(),
        16usize,
        concat!("Size of: ", stringify!(PyModuleDef_Slot))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef_Slot>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef_Slot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Slot>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Slot),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Slot>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Slot),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef {
    pub m_base: PyModuleDef_Base,
    pub m_name: *const ::std::os::raw::c_char,
    pub m_doc: *const ::std::os::raw::c_char,
    pub m_size: Py_ssize_t,
    pub m_methods: *mut PyMethodDef,
    pub m_slots: *mut PyModuleDef_Slot,
    pub m_traverse: traverseproc,
    pub m_clear: inquiry,
    pub m_free: freefunc,
}
#[test]
fn bindgen_test_layout_PyModuleDef() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef>(),
        104usize,
        concat!("Size of: ", stringify!(PyModuleDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_doc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_methods as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_slots as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_traverse as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_traverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_clear as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_free as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyFunctionObject {
    pub ob_base: PyObject,
    pub func_code: *mut PyObject,
    pub func_globals: *mut PyObject,
    pub func_defaults: *mut PyObject,
    pub func_kwdefaults: *mut PyObject,
    pub func_closure: *mut PyObject,
    pub func_doc: *mut PyObject,
    pub func_name: *mut PyObject,
    pub func_dict: *mut PyObject,
    pub func_weakreflist: *mut PyObject,
    pub func_module: *mut PyObject,
    pub func_annotations: *mut PyObject,
    pub func_qualname: *mut PyObject,
    pub vectorcall: vectorcallfunc,
}
#[test]
fn bindgen_test_layout_PyFunctionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyFunctionObject>(),
        120usize,
        concat!("Size of: ", stringify!(PyFunctionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyFunctionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyFunctionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_code as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_globals as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_defaults as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_defaults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyFunctionObject>())).func_kwdefaults as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_kwdefaults)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_closure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_doc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_dict as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_dict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyFunctionObject>())).func_weakreflist as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_module as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyFunctionObject>())).func_annotations as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_annotations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_qualname as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_qualname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).vectorcall as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(vectorcall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodObject {
    pub ob_base: PyObject,
    pub im_func: *mut PyObject,
    pub im_self: *mut PyObject,
    pub im_weakreflist: *mut PyObject,
    pub vectorcall: vectorcallfunc,
}
#[test]
fn bindgen_test_layout_PyMethodObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyMethodObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).im_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(im_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).im_self as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(im_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).im_weakreflist as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(im_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).vectorcall as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(vectorcall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyInstanceMethodObject {
    pub ob_base: PyObject,
    pub func: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyInstanceMethodObject() {
    assert_eq!(
        ::std::mem::size_of::<PyInstanceMethodObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyInstanceMethodObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyInstanceMethodObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyInstanceMethodObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyInstanceMethodObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyInstanceMethodObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyInstanceMethodObject>())).func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyInstanceMethodObject),
            "::",
            stringify!(func)
        )
    );
}
pub type Py_OpenCodeHookFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_void) -> *mut PyObject,
>;
pub type PyCapsule_Destructor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>;
pub type _Py_CODEUNIT = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyOpcache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCodeObject {
    pub ob_base: PyObject,
    pub co_argcount: ::std::os::raw::c_int,
    pub co_posonlyargcount: ::std::os::raw::c_int,
    pub co_kwonlyargcount: ::std::os::raw::c_int,
    pub co_nlocals: ::std::os::raw::c_int,
    pub co_stacksize: ::std::os::raw::c_int,
    pub co_flags: ::std::os::raw::c_int,
    pub co_firstlineno: ::std::os::raw::c_int,
    pub co_code: *mut PyObject,
    pub co_consts: *mut PyObject,
    pub co_names: *mut PyObject,
    pub co_varnames: *mut PyObject,
    pub co_freevars: *mut PyObject,
    pub co_cellvars: *mut PyObject,
    pub co_cell2arg: *mut Py_ssize_t,
    pub co_filename: *mut PyObject,
    pub co_name: *mut PyObject,
    pub co_lnotab: *mut PyObject,
    pub co_zombieframe: *mut ::std::os::raw::c_void,
    pub co_weakreflist: *mut PyObject,
    pub co_extra: *mut ::std::os::raw::c_void,
    pub co_opcache_map: *mut ::std::os::raw::c_uchar,
    pub co_opcache: *mut _PyOpcache,
    pub co_opcache_flag: ::std::os::raw::c_int,
    pub co_opcache_size: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_PyCodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCodeObject>(),
        176usize,
        concat!("Size of: ", stringify!(PyCodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_argcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_argcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_posonlyargcount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_posonlyargcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_kwonlyargcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_kwonlyargcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_nlocals as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_nlocals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_stacksize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_stacksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_firstlineno as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_firstlineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_code as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_consts as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_consts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_names as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_varnames as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_varnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_freevars as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_freevars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_cellvars as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_cellvars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_cell2arg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_cell2arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_filename as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_lnotab as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_lnotab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_zombieframe as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_zombieframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_weakreflist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_extra as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_opcache_map as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_opcache_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_opcache as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_opcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_opcache_flag as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_opcache_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_opcache_size as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_opcache_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _addr_pair {
    pub ap_lower: ::std::os::raw::c_int,
    pub ap_upper: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__addr_pair() {
    assert_eq!(
        ::std::mem::size_of::<_addr_pair>(),
        8usize,
        concat!("Size of: ", stringify!(_addr_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<_addr_pair>(),
        4usize,
        concat!("Alignment of ", stringify!(_addr_pair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_addr_pair>())).ap_lower as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_addr_pair),
            "::",
            stringify!(ap_lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_addr_pair>())).ap_upper as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_addr_pair),
            "::",
            stringify!(ap_upper)
        )
    );
}
pub type PyAddrPair = _addr_pair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _frame {
    _unused: [u8; 0],
}
pub type PyFrameObject = _frame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _traceback {
    pub ob_base: PyObject,
    pub tb_next: *mut _traceback,
    pub tb_frame: *mut PyFrameObject,
    pub tb_lasti: ::std::os::raw::c_int,
    pub tb_lineno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__traceback() {
    assert_eq!(
        ::std::mem::size_of::<_traceback>(),
        40usize,
        concat!("Size of: ", stringify!(_traceback))
    );
    assert_eq!(
        ::std::mem::align_of::<_traceback>(),
        8usize,
        concat!("Alignment of ", stringify!(_traceback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_frame as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_lasti as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_lasti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_lineno as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_lineno)
        )
    );
}
pub type PyTracebackObject = _traceback;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySliceObject {
    pub ob_base: PyObject,
    pub start: *mut PyObject,
    pub stop: *mut PyObject,
    pub step: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PySliceObject() {
    assert_eq!(
        ::std::mem::size_of::<PySliceObject>(),
        40usize,
        concat!("Size of: ", stringify!(PySliceObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PySliceObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PySliceObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).stop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).step as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCellObject {
    pub ob_base: PyObject,
    pub ob_ref: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyCellObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCellObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyCellObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCellObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCellObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCellObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCellObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCellObject>())).ob_ref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCellObject),
            "::",
            stringify!(ob_ref)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _is {
    _unused: [u8; 0],
}
pub type PyThreadState = _ts;
pub type PyInterpreterState = _is;
pub const PyGILState_STATE_PyGILState_LOCKED: PyGILState_STATE = 0;
pub const PyGILState_STATE_PyGILState_UNLOCKED: PyGILState_STATE = 1;
pub type PyGILState_STATE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStatus {
    pub _type: PyStatus__bindgen_ty_1,
    pub func: *const ::std::os::raw::c_char,
    pub err_msg: *const ::std::os::raw::c_char,
    pub exitcode: ::std::os::raw::c_int,
}
pub const PyStatus__PyStatus_TYPE_OK: ::std::os::raw::c_uint = 0;
pub const PyStatus__PyStatus_TYPE_ERROR: ::std::os::raw::c_uint = 1;
pub const PyStatus__PyStatus_TYPE_EXIT: ::std::os::raw::c_uint = 2;
pub type PyStatus__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_PyStatus() {
    assert_eq!(
        ::std::mem::size_of::<PyStatus>(),
        32usize,
        concat!("Size of: ", stringify!(PyStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStatus>()))._type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStatus>())).func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStatus>())).err_msg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(err_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStatus>())).exitcode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(exitcode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyWideStringList {
    pub length: Py_ssize_t,
    pub items: *mut *mut wchar_t,
}
#[test]
fn bindgen_test_layout_PyWideStringList() {
    assert_eq!(
        ::std::mem::size_of::<PyWideStringList>(),
        16usize,
        concat!("Size of: ", stringify!(PyWideStringList))
    );
    assert_eq!(
        ::std::mem::align_of::<PyWideStringList>(),
        8usize,
        concat!("Alignment of ", stringify!(PyWideStringList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWideStringList>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWideStringList),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWideStringList>())).items as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWideStringList),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyPreConfig {
    pub _config_init: ::std::os::raw::c_int,
    pub parse_argv: ::std::os::raw::c_int,
    pub isolated: ::std::os::raw::c_int,
    pub use_environment: ::std::os::raw::c_int,
    pub configure_locale: ::std::os::raw::c_int,
    pub coerce_c_locale: ::std::os::raw::c_int,
    pub coerce_c_locale_warn: ::std::os::raw::c_int,
    pub utf8_mode: ::std::os::raw::c_int,
    pub dev_mode: ::std::os::raw::c_int,
    pub allocator: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyPreConfig() {
    assert_eq!(
        ::std::mem::size_of::<PyPreConfig>(),
        40usize,
        concat!("Size of: ", stringify!(PyPreConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<PyPreConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(PyPreConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>()))._config_init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(_config_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).parse_argv as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(parse_argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).isolated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(isolated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).use_environment as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(use_environment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).configure_locale as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(configure_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).coerce_c_locale as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(coerce_c_locale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyPreConfig>())).coerce_c_locale_warn as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(coerce_c_locale_warn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).utf8_mode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(utf8_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).dev_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(dev_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyPreConfig>())).allocator as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PyPreConfig),
            "::",
            stringify!(allocator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyConfig {
    pub _config_init: ::std::os::raw::c_int,
    pub isolated: ::std::os::raw::c_int,
    pub use_environment: ::std::os::raw::c_int,
    pub dev_mode: ::std::os::raw::c_int,
    pub install_signal_handlers: ::std::os::raw::c_int,
    pub use_hash_seed: ::std::os::raw::c_int,
    pub hash_seed: ::std::os::raw::c_ulong,
    pub faulthandler: ::std::os::raw::c_int,
    pub _use_peg_parser: ::std::os::raw::c_int,
    pub tracemalloc: ::std::os::raw::c_int,
    pub import_time: ::std::os::raw::c_int,
    pub show_ref_count: ::std::os::raw::c_int,
    pub dump_refs: ::std::os::raw::c_int,
    pub malloc_stats: ::std::os::raw::c_int,
    pub filesystem_encoding: *mut wchar_t,
    pub filesystem_errors: *mut wchar_t,
    pub pycache_prefix: *mut wchar_t,
    pub parse_argv: ::std::os::raw::c_int,
    pub argv: PyWideStringList,
    pub program_name: *mut wchar_t,
    pub xoptions: PyWideStringList,
    pub warnoptions: PyWideStringList,
    pub site_import: ::std::os::raw::c_int,
    pub bytes_warning: ::std::os::raw::c_int,
    pub inspect: ::std::os::raw::c_int,
    pub interactive: ::std::os::raw::c_int,
    pub optimization_level: ::std::os::raw::c_int,
    pub parser_debug: ::std::os::raw::c_int,
    pub write_bytecode: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
    pub quiet: ::std::os::raw::c_int,
    pub user_site_directory: ::std::os::raw::c_int,
    pub configure_c_stdio: ::std::os::raw::c_int,
    pub buffered_stdio: ::std::os::raw::c_int,
    pub stdio_encoding: *mut wchar_t,
    pub stdio_errors: *mut wchar_t,
    pub check_hash_pycs_mode: *mut wchar_t,
    pub pathconfig_warnings: ::std::os::raw::c_int,
    pub pythonpath_env: *mut wchar_t,
    pub home: *mut wchar_t,
    pub module_search_paths_set: ::std::os::raw::c_int,
    pub module_search_paths: PyWideStringList,
    pub executable: *mut wchar_t,
    pub base_executable: *mut wchar_t,
    pub prefix: *mut wchar_t,
    pub base_prefix: *mut wchar_t,
    pub exec_prefix: *mut wchar_t,
    pub base_exec_prefix: *mut wchar_t,
    pub platlibdir: *mut wchar_t,
    pub skip_source_first_line: ::std::os::raw::c_int,
    pub run_command: *mut wchar_t,
    pub run_module: *mut wchar_t,
    pub run_filename: *mut wchar_t,
    pub _install_importlib: ::std::os::raw::c_int,
    pub _init_main: ::std::os::raw::c_int,
    pub _isolated_interpreter: ::std::os::raw::c_int,
    pub _orig_argv: PyWideStringList,
}
#[test]
fn bindgen_test_layout_PyConfig() {
    assert_eq!(
        ::std::mem::size_of::<PyConfig>(),
        392usize,
        concat!("Size of: ", stringify!(PyConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<PyConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(PyConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._config_init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_config_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).isolated as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(isolated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).use_environment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(use_environment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).dev_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(dev_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyConfig>())).install_signal_handlers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(install_signal_handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).use_hash_seed as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(use_hash_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).hash_seed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(hash_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).faulthandler as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(faulthandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._use_peg_parser as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_use_peg_parser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).tracemalloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(tracemalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).import_time as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(import_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).show_ref_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(show_ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).dump_refs as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(dump_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).malloc_stats as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(malloc_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).filesystem_encoding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(filesystem_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).filesystem_errors as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(filesystem_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).pycache_prefix as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(pycache_prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).parse_argv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(parse_argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).argv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).program_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(program_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).xoptions as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(xoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).warnoptions as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(warnoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).site_import as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(site_import)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).bytes_warning as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(bytes_warning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).inspect as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(inspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).interactive as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(interactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).optimization_level as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(optimization_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).parser_debug as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(parser_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).write_bytecode as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(write_bytecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).verbose as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).quiet as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(quiet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).user_site_directory as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(user_site_directory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).configure_c_stdio as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(configure_c_stdio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).buffered_stdio as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(buffered_stdio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).stdio_encoding as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(stdio_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).stdio_errors as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(stdio_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).check_hash_pycs_mode as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(check_hash_pycs_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).pathconfig_warnings as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(pathconfig_warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).pythonpath_env as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(pythonpath_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).home as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(home)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyConfig>())).module_search_paths_set as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(module_search_paths_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).module_search_paths as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(module_search_paths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).executable as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(executable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).base_executable as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(base_executable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).prefix as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).base_prefix as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(base_prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).exec_prefix as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(exec_prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).base_exec_prefix as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(base_exec_prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).platlibdir as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(platlibdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).skip_source_first_line as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(skip_source_first_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).run_command as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(run_command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).run_module as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(run_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>())).run_filename as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(run_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._install_importlib as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_install_importlib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._init_main as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_init_main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._isolated_interpreter as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_isolated_interpreter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyConfig>()))._orig_argv as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(PyConfig),
            "::",
            stringify!(_orig_argv)
        )
    );
}
pub type Py_tracefunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyFrameObject,
        arg3: ::std::os::raw::c_int,
        arg4: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _err_stackitem {
    pub exc_type: *mut PyObject,
    pub exc_value: *mut PyObject,
    pub exc_traceback: *mut PyObject,
    pub previous_item: *mut _err_stackitem,
}
#[test]
fn bindgen_test_layout__err_stackitem() {
    assert_eq!(
        ::std::mem::size_of::<_err_stackitem>(),
        32usize,
        concat!("Size of: ", stringify!(_err_stackitem))
    );
    assert_eq!(
        ::std::mem::align_of::<_err_stackitem>(),
        8usize,
        concat!("Alignment of ", stringify!(_err_stackitem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_err_stackitem>())).exc_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_err_stackitem),
            "::",
            stringify!(exc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_err_stackitem>())).exc_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_err_stackitem),
            "::",
            stringify!(exc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_err_stackitem>())).exc_traceback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_err_stackitem),
            "::",
            stringify!(exc_traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_err_stackitem>())).previous_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_err_stackitem),
            "::",
            stringify!(previous_item)
        )
    );
}
pub type _PyErr_StackItem = _err_stackitem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ts {
    pub prev: *mut _ts,
    pub next: *mut _ts,
    pub interp: *mut PyInterpreterState,
    pub frame: *mut PyFrameObject,
    pub recursion_depth: ::std::os::raw::c_int,
    pub overflowed: ::std::os::raw::c_char,
    pub recursion_critical: ::std::os::raw::c_char,
    pub stackcheck_counter: ::std::os::raw::c_int,
    pub tracing: ::std::os::raw::c_int,
    pub use_tracing: ::std::os::raw::c_int,
    pub c_profilefunc: Py_tracefunc,
    pub c_tracefunc: Py_tracefunc,
    pub c_profileobj: *mut PyObject,
    pub c_traceobj: *mut PyObject,
    pub curexc_type: *mut PyObject,
    pub curexc_value: *mut PyObject,
    pub curexc_traceback: *mut PyObject,
    pub exc_state: _PyErr_StackItem,
    pub exc_info: *mut _PyErr_StackItem,
    pub dict: *mut PyObject,
    pub gilstate_counter: ::std::os::raw::c_int,
    pub async_exc: *mut PyObject,
    pub thread_id: ::std::os::raw::c_ulong,
    pub trash_delete_nesting: ::std::os::raw::c_int,
    pub trash_delete_later: *mut PyObject,
    pub on_delete: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub on_delete_data: *mut ::std::os::raw::c_void,
    pub coroutine_origin_tracking_depth: ::std::os::raw::c_int,
    pub async_gen_firstiter: *mut PyObject,
    pub async_gen_finalizer: *mut PyObject,
    pub context: *mut PyObject,
    pub context_ver: u64,
    pub id: u64,
}
#[test]
fn bindgen_test_layout__ts() {
    assert_eq!(
        ::std::mem::size_of::<_ts>(),
        264usize,
        concat!("Size of: ", stringify!(_ts))
    );
    assert_eq!(
        ::std::mem::align_of::<_ts>(),
        8usize,
        concat!("Alignment of ", stringify!(_ts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).prev as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_ts), "::", stringify!(prev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).next as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ts), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).interp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(interp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).frame as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).recursion_depth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(recursion_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).overflowed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(overflowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).recursion_critical as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(recursion_critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).stackcheck_counter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(stackcheck_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).tracing as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(tracing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).use_tracing as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(use_tracing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).c_profilefunc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(c_profilefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).c_tracefunc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(c_tracefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).c_profileobj as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(c_profileobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).c_traceobj as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(c_traceobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).curexc_type as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(curexc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).curexc_value as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(curexc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).curexc_traceback as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(curexc_traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).exc_state as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(exc_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).exc_info as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(exc_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).dict as *const _ as usize },
        152usize,
        concat!("Offset of field: ", stringify!(_ts), "::", stringify!(dict))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).gilstate_counter as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(gilstate_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).async_exc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(async_exc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).thread_id as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).trash_delete_nesting as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(trash_delete_nesting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).trash_delete_later as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(trash_delete_later)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).on_delete as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(on_delete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).on_delete_data as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(on_delete_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ts>())).coroutine_origin_tracking_depth as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(coroutine_origin_tracking_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).async_gen_firstiter as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(async_gen_firstiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).async_gen_finalizer as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(async_gen_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).context as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).context_ver as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(context_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).id as *const _ as usize },
        256usize,
        concat!("Offset of field: ", stringify!(_ts), "::", stringify!(id))
    );
}
pub type _PyFrameEvalFunction = ::std::option::Option<
    unsafe extern "C" fn(
        tstate: *mut PyThreadState,
        arg1: *mut PyFrameObject,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xid {
    pub data: *mut ::std::os::raw::c_void,
    pub obj: *mut PyObject,
    pub interp: i64,
    pub new_object: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _xid) -> *mut PyObject>,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout__xid() {
    assert_eq!(
        ::std::mem::size_of::<_xid>(),
        40usize,
        concat!("Size of: ", stringify!(_xid))
    );
    assert_eq!(
        ::std::mem::align_of::<_xid>(),
        8usize,
        concat!("Alignment of ", stringify!(_xid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xid>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xid),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xid>())).obj as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_xid), "::", stringify!(obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xid>())).interp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xid),
            "::",
            stringify!(interp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xid>())).new_object as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xid),
            "::",
            stringify!(new_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xid>())).free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_xid),
            "::",
            stringify!(free)
        )
    );
}
pub type _PyCrossInterpreterData = _xid;
pub type crossinterpdatafunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut _xid) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGenObject {
    pub ob_base: PyObject,
    pub gi_frame: *mut PyFrameObject,
    pub gi_running: ::std::os::raw::c_char,
    pub gi_code: *mut PyObject,
    pub gi_weakreflist: *mut PyObject,
    pub gi_name: *mut PyObject,
    pub gi_qualname: *mut PyObject,
    pub gi_exc_state: _PyErr_StackItem,
}
#[test]
fn bindgen_test_layout_PyGenObject() {
    assert_eq!(
        ::std::mem::size_of::<PyGenObject>(),
        96usize,
        concat!("Size of: ", stringify!(PyGenObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGenObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGenObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_frame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_running as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_weakreflist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_qualname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_qualname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_exc_state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_exc_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCoroObject {
    pub ob_base: PyObject,
    pub cr_frame: *mut PyFrameObject,
    pub cr_running: ::std::os::raw::c_char,
    pub cr_code: *mut PyObject,
    pub cr_weakreflist: *mut PyObject,
    pub cr_name: *mut PyObject,
    pub cr_qualname: *mut PyObject,
    pub cr_exc_state: _PyErr_StackItem,
    pub cr_origin: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyCoroObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCoroObject>(),
        104usize,
        concat!("Size of: ", stringify!(PyCoroObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCoroObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCoroObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_frame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_running as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_weakreflist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_qualname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_qualname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_exc_state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_exc_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCoroObject>())).cr_origin as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCoroObject),
            "::",
            stringify!(cr_origin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyAsyncGenObject {
    pub ob_base: PyObject,
    pub ag_frame: *mut PyFrameObject,
    pub ag_running: ::std::os::raw::c_char,
    pub ag_code: *mut PyObject,
    pub ag_weakreflist: *mut PyObject,
    pub ag_name: *mut PyObject,
    pub ag_qualname: *mut PyObject,
    pub ag_exc_state: _PyErr_StackItem,
    pub ag_finalizer: *mut PyObject,
    pub ag_hooks_inited: ::std::os::raw::c_int,
    pub ag_closed: ::std::os::raw::c_int,
    pub ag_running_async: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyAsyncGenObject() {
    assert_eq!(
        ::std::mem::size_of::<PyAsyncGenObject>(),
        120usize,
        concat!("Size of: ", stringify!(PyAsyncGenObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyAsyncGenObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyAsyncGenObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_frame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_running as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_weakreflist as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_weakreflist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_qualname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_qualname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_exc_state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_exc_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_finalizer as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_finalizer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_hooks_inited as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_hooks_inited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_closed as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_closed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyAsyncGenObject>())).ag_running_async as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncGenObject),
            "::",
            stringify!(ag_running_async)
        )
    );
}
pub type getter = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_void) -> *mut PyObject,
>;
pub type setter = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGetSetDef {
    pub name: *const ::std::os::raw::c_char,
    pub get: getter,
    pub set: setter,
    pub doc: *const ::std::os::raw::c_char,
    pub closure: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyGetSetDef() {
    assert_eq!(
        ::std::mem::size_of::<PyGetSetDef>(),
        40usize,
        concat!("Size of: ", stringify!(PyGetSetDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGetSetDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGetSetDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).get as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).set as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).closure as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(closure)
        )
    );
}
pub type wrapperfunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut PyObject,
        args: *mut PyObject,
        wrapped: *mut ::std::os::raw::c_void,
    ) -> *mut PyObject,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wrapperbase {
    pub name: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub function: *mut ::std::os::raw::c_void,
    pub wrapper: wrapperfunc,
    pub doc: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub name_strobj: *mut PyObject,
}
#[test]
fn bindgen_test_layout_wrapperbase() {
    assert_eq!(
        ::std::mem::size_of::<wrapperbase>(),
        56usize,
        concat!("Size of: ", stringify!(wrapperbase))
    );
    assert_eq!(
        ::std::mem::align_of::<wrapperbase>(),
        8usize,
        concat!("Alignment of ", stringify!(wrapperbase))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).wrapper as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(wrapper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).doc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wrapperbase>())).name_strobj as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wrapperbase),
            "::",
            stringify!(name_strobj)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDescrObject {
    pub ob_base: PyObject,
    pub d_type: *mut PyTypeObject,
    pub d_name: *mut PyObject,
    pub d_qualname: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyDescrObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_qualname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_qualname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodDescrObject {
    pub d_common: PyDescrObject,
    pub d_method: *mut PyMethodDef,
    pub vectorcall: vectorcallfunc,
}
#[test]
fn bindgen_test_layout_PyMethodDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodDescrObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyMethodDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDescrObject>())).d_method as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDescrObject),
            "::",
            stringify!(d_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDescrObject>())).vectorcall as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDescrObject),
            "::",
            stringify!(vectorcall)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemberDescrObject {
    pub d_common: PyDescrObject,
    pub d_member: *mut PyMemberDef,
}
#[test]
fn bindgen_test_layout_PyMemberDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMemberDescrObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyMemberDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemberDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemberDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDescrObject>())).d_member as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDescrObject),
            "::",
            stringify!(d_member)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGetSetDescrObject {
    pub d_common: PyDescrObject,
    pub d_getset: *mut PyGetSetDef,
}
#[test]
fn bindgen_test_layout_PyGetSetDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyGetSetDescrObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyGetSetDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGetSetDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGetSetDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDescrObject>())).d_getset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDescrObject),
            "::",
            stringify!(d_getset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyWrapperDescrObject {
    pub d_common: PyDescrObject,
    pub d_base: *mut wrapperbase,
    pub d_wrapped: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyWrapperDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyWrapperDescrObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyWrapperDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyWrapperDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyWrapperDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_wrapped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_wrapped)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemberDef {
    _unused: [u8; 0],
}
pub type PyWeakReference = _PyWeakReference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyWeakReference {
    pub ob_base: PyObject,
    pub wr_object: *mut PyObject,
    pub wr_callback: *mut PyObject,
    pub hash: Py_hash_t,
    pub wr_prev: *mut PyWeakReference,
    pub wr_next: *mut PyWeakReference,
}
#[test]
fn bindgen_test_layout__PyWeakReference() {
    assert_eq!(
        ::std::mem::size_of::<_PyWeakReference>(),
        56usize,
        concat!("Size of: ", stringify!(_PyWeakReference))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyWeakReference>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyWeakReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).wr_object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(wr_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).wr_callback as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(wr_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).hash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).wr_prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(wr_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyWeakReference>())).wr_next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyWeakReference),
            "::",
            stringify!(wr_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStructSequence_Field {
    pub name: *const ::std::os::raw::c_char,
    pub doc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PyStructSequence_Field() {
    assert_eq!(
        ::std::mem::size_of::<PyStructSequence_Field>(),
        16usize,
        concat!("Size of: ", stringify!(PyStructSequence_Field))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStructSequence_Field>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStructSequence_Field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStructSequence_Field>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStructSequence_Field>())).doc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Field),
            "::",
            stringify!(doc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStructSequence_Desc {
    pub name: *const ::std::os::raw::c_char,
    pub doc: *const ::std::os::raw::c_char,
    pub fields: *mut PyStructSequence_Field,
    pub n_in_sequence: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyStructSequence_Desc() {
    assert_eq!(
        ::std::mem::size_of::<PyStructSequence_Desc>(),
        32usize,
        concat!("Size of: ", stringify!(PyStructSequence_Desc))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStructSequence_Desc>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStructSequence_Desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStructSequence_Desc>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStructSequence_Desc>())).doc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Desc),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStructSequence_Desc>())).fields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Desc),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyStructSequence_Desc>())).n_in_sequence as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStructSequence_Desc),
            "::",
            stringify!(n_in_sequence)
        )
    );
}
pub type PyStructSequence = PyTupleObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBaseExceptionObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PyBaseExceptionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyBaseExceptionObject>(),
        64usize,
        concat!("Size of: ", stringify!(PyBaseExceptionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBaseExceptionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBaseExceptionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyBaseExceptionObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(suppress_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySyntaxErrorObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub msg: *mut PyObject,
    pub filename: *mut PyObject,
    pub lineno: *mut PyObject,
    pub offset: *mut PyObject,
    pub text: *mut PyObject,
    pub print_file_and_line: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PySyntaxErrorObject() {
    assert_eq!(
        ::std::mem::size_of::<PySyntaxErrorObject>(),
        112usize,
        concat!("Size of: ", stringify!(PySyntaxErrorObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PySyntaxErrorObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PySyntaxErrorObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySyntaxErrorObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).msg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).filename as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).lineno as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).offset as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySyntaxErrorObject>())).text as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySyntaxErrorObject>())).print_file_and_line as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PySyntaxErrorObject),
            "::",
            stringify!(print_file_and_line)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyImportErrorObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub msg: *mut PyObject,
    pub name: *mut PyObject,
    pub path: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyImportErrorObject() {
    assert_eq!(
        ::std::mem::size_of::<PyImportErrorObject>(),
        88usize,
        concat!("Size of: ", stringify!(PyImportErrorObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyImportErrorObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyImportErrorObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyImportErrorObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).msg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).name as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyImportErrorObject>())).path as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyImportErrorObject),
            "::",
            stringify!(path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyUnicodeErrorObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub encoding: *mut PyObject,
    pub object: *mut PyObject,
    pub start: Py_ssize_t,
    pub end: Py_ssize_t,
    pub reason: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyUnicodeErrorObject() {
    assert_eq!(
        ::std::mem::size_of::<PyUnicodeErrorObject>(),
        104usize,
        concat!("Size of: ", stringify!(PyUnicodeErrorObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyUnicodeErrorObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyUnicodeErrorObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyUnicodeErrorObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).encoding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).object as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).start as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeErrorObject>())).reason as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeErrorObject),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySystemExitObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub code: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PySystemExitObject() {
    assert_eq!(
        ::std::mem::size_of::<PySystemExitObject>(),
        72usize,
        concat!("Size of: ", stringify!(PySystemExitObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PySystemExitObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PySystemExitObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySystemExitObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySystemExitObject>())).code as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PySystemExitObject),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyOSErrorObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub myerrno: *mut PyObject,
    pub strerror: *mut PyObject,
    pub filename: *mut PyObject,
    pub filename2: *mut PyObject,
    pub written: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyOSErrorObject() {
    assert_eq!(
        ::std::mem::size_of::<PyOSErrorObject>(),
        104usize,
        concat!("Size of: ", stringify!(PyOSErrorObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyOSErrorObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyOSErrorObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyOSErrorObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).myerrno as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(myerrno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).strerror as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(strerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).filename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).filename2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(filename2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyOSErrorObject>())).written as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyOSErrorObject),
            "::",
            stringify!(written)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStopIterationObject {
    pub ob_base: PyObject,
    pub dict: *mut PyObject,
    pub args: *mut PyObject,
    pub traceback: *mut PyObject,
    pub context: *mut PyObject,
    pub cause: *mut PyObject,
    pub suppress_context: ::std::os::raw::c_char,
    pub value: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyStopIterationObject() {
    assert_eq!(
        ::std::mem::size_of::<PyStopIterationObject>(),
        72usize,
        concat!("Size of: ", stringify!(PyStopIterationObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStopIterationObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStopIterationObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).ob_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(ob_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).dict as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).traceback as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(traceback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).cause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyStopIterationObject>())).suppress_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(suppress_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).value as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(value)
        )
    );
}
pub type PyEnvironmentErrorObject = PyOSErrorObject;
pub type PyThread_type_lock = *mut ::std::os::raw::c_void;
pub const PyLockStatus_PY_LOCK_FAILURE: PyLockStatus = 0;
pub const PyLockStatus_PY_LOCK_ACQUIRED: PyLockStatus = 1;
pub const PyLockStatus_PY_LOCK_INTR: PyLockStatus = 2;
pub type PyLockStatus = ::std::os::raw::c_uint;
pub type Py_tss_t = _Py_tss_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Py_tss_t {
    pub _is_initialized: ::std::os::raw::c_int,
    pub _key: pthread_key_t,
}
#[test]
fn bindgen_test_layout__Py_tss_t() {
    assert_eq!(
        ::std::mem::size_of::<_Py_tss_t>(),
        8usize,
        concat!("Size of: ", stringify!(_Py_tss_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Py_tss_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_Py_tss_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_tss_t>()))._is_initialized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_tss_t),
            "::",
            stringify!(_is_initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Py_tss_t>()))._key as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Py_tss_t),
            "::",
            stringify!(_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pycontextobject {
    _unused: [u8; 0],
}
pub type PyContext = _pycontextobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pycontextvarobject {
    _unused: [u8; 0],
}
pub type PyContextVar = _pycontextvarobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pycontexttokenobject {
    _unused: [u8; 0],
}
pub type PyContextToken = _pycontexttokenobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arena {
    _unused: [u8; 0],
}
pub type PyArena = _arena;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyArg_Parser {
    pub format: *const ::std::os::raw::c_char,
    pub keywords: *const *const ::std::os::raw::c_char,
    pub fname: *const ::std::os::raw::c_char,
    pub custom_msg: *const ::std::os::raw::c_char,
    pub pos: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub kwtuple: *mut PyObject,
    pub next: *mut _PyArg_Parser,
}
#[test]
fn bindgen_test_layout__PyArg_Parser() {
    assert_eq!(
        ::std::mem::size_of::<_PyArg_Parser>(),
        64usize,
        concat!("Size of: ", stringify!(_PyArg_Parser))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyArg_Parser>(),
        8usize,
        concat!("Alignment of ", stringify!(_PyArg_Parser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).keywords as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(keywords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).fname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).custom_msg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(custom_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).min as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).max as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).kwtuple as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(kwtuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyArg_Parser>())).next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyArg_Parser),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCompilerFlags {
    pub cf_flags: ::std::os::raw::c_int,
    pub cf_feature_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyCompilerFlags() {
    assert_eq!(
        ::std::mem::size_of::<PyCompilerFlags>(),
        8usize,
        concat!("Size of: ", stringify!(PyCompilerFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCompilerFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(PyCompilerFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompilerFlags>())).cf_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompilerFlags),
            "::",
            stringify!(cf_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyCompilerFlags>())).cf_feature_version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompilerFlags),
            "::",
            stringify!(cf_feature_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyFutureFeatures {
    pub ff_features: ::std::os::raw::c_int,
    pub ff_lineno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyFutureFeatures() {
    assert_eq!(
        ::std::mem::size_of::<PyFutureFeatures>(),
        8usize,
        concat!("Size of: ", stringify!(PyFutureFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<PyFutureFeatures>(),
        4usize,
        concat!("Alignment of ", stringify!(PyFutureFeatures))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFutureFeatures>())).ff_features as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFutureFeatures),
            "::",
            stringify!(ff_features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFutureFeatures>())).ff_lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFutureFeatures),
            "::",
            stringify!(ff_lineno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mod {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyASTOptimizeState {
    pub optimize: ::std::os::raw::c_int,
    pub ff_features: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__PyASTOptimizeState() {
    assert_eq!(
        ::std::mem::size_of::<_PyASTOptimizeState>(),
        8usize,
        concat!("Size of: ", stringify!(_PyASTOptimizeState))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyASTOptimizeState>(),
        4usize,
        concat!("Alignment of ", stringify!(_PyASTOptimizeState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASTOptimizeState>())).optimize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASTOptimizeState),
            "::",
            stringify!(optimize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASTOptimizeState>())).ff_features as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASTOptimizeState),
            "::",
            stringify!(ff_features)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtable {
    _unused: [u8; 0],
}
pub type PyOS_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type Py_AuditHookFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inittab {
    pub name: *const ::std::os::raw::c_char,
    pub initfunc: ::std::option::Option<unsafe extern "C" fn() -> *mut PyObject>,
}
#[test]
fn bindgen_test_layout__inittab() {
    assert_eq!(
        ::std::mem::size_of::<_inittab>(),
        16usize,
        concat!("Size of: ", stringify!(_inittab))
    );
    assert_eq!(
        ::std::mem::align_of::<_inittab>(),
        8usize,
        concat!("Alignment of ", stringify!(_inittab))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_inittab>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_inittab),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_inittab>())).initfunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_inittab),
            "::",
            stringify!(initfunc)
        )
    );
}
pub const _Py_error_handler__Py_ERROR_UNKNOWN: _Py_error_handler = 0;
pub const _Py_error_handler__Py_ERROR_STRICT: _Py_error_handler = 1;
pub const _Py_error_handler__Py_ERROR_SURROGATEESCAPE: _Py_error_handler = 2;
pub const _Py_error_handler__Py_ERROR_REPLACE: _Py_error_handler = 3;
pub const _Py_error_handler__Py_ERROR_IGNORE: _Py_error_handler = 4;
pub const _Py_error_handler__Py_ERROR_BACKSLASHREPLACE: _Py_error_handler = 5;
pub const _Py_error_handler__Py_ERROR_SURROGATEPASS: _Py_error_handler = 6;
pub const _Py_error_handler__Py_ERROR_XMLCHARREFREPLACE: _Py_error_handler = 7;
pub const _Py_error_handler__Py_ERROR_OTHER: _Py_error_handler = 8;
pub type _Py_error_handler = ::std::os::raw::c_uint;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dictkeysobject {
    pub _address: u8,
}
extern crate libloading;
pub struct PythonLib {
    __library: ::libloading::Library,
    pub _Py_get_387controlword:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ushort, ::libloading::Error>,
    pub _Py_set_387controlword:
        Result<unsafe extern "C" fn(arg1: ::std::os::raw::c_ushort), ::libloading::Error>,
    pub _Py_bit_length: Result<
        unsafe extern "C" fn(d: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub PyType_FromSpec:
        Result<unsafe extern "C" fn(arg1: *mut PyType_Spec) -> *mut PyObject, ::libloading::Error>,
    pub PyType_FromSpecWithBases: Result<
        unsafe extern "C" fn(arg1: *mut PyType_Spec, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyType_GetSlot: Result<
        unsafe extern "C" fn(
            arg1: *mut PyTypeObject,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyType_FromModuleAndSpec: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyType_Spec,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyType_GetModule:
        Result<unsafe extern "C" fn(arg1: *mut _typeobject) -> *mut PyObject, ::libloading::Error>,
    pub PyType_GetModuleState: Result<
        unsafe extern "C" fn(arg1: *mut _typeobject) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyType_IsSubtype: Result<
        unsafe extern "C" fn(
            arg1: *mut PyTypeObject,
            arg2: *mut PyTypeObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyType_GetFlags: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub PyType_Ready: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyType_GenericAlloc: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyType_GenericNew: Result<
        unsafe extern "C" fn(
            arg1: *mut PyTypeObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyType_ClearCache:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub PyType_Modified: Result<unsafe extern "C" fn(arg1: *mut PyTypeObject), ::libloading::Error>,
    pub PyObject_Repr:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_Str:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_ASCII:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_Bytes:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_RichCompare: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_RichCompareBool: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_GetAttrString: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_SetAttrString: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_HasAttrString: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_GetAttr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_SetAttr: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_HasAttr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_SelfIter:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_GenericGetAttr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_GenericSetAttr: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_GenericSetDict: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_Hash:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_hash_t, ::libloading::Error>,
    pub PyObject_HashNotImplemented:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_hash_t, ::libloading::Error>,
    pub PyObject_IsTrue: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_Not: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCallable_Check: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_ClearWeakRefs:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub PyObject_Dir:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub Py_ReprEnter: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_ReprLeave: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _Py_Dealloc: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub Py_IncRef: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub Py_DecRef: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _Py_NewReference: Result<unsafe extern "C" fn(op: *mut PyObject), ::libloading::Error>,
    pub _PyTraceMalloc_NewReference: Result<
        unsafe extern "C" fn(op: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyType_Name: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _PyType_Lookup: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyType_LookupId: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_LookupSpecial: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyType_CalculateMetaclass: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyObject) -> *mut PyTypeObject,
        ::libloading::Error,
    >,
    pub _PyType_GetDocFromInternalDoc: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyType_GetTextSignatureFromInternalDoc: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_Print: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut FILE,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_BreakPoint: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyObject_Dump: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyObject_IsFreed: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_IsAbstract: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_GetAttrId: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_SetAttrId: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut _Py_Identifier,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_HasAttrId: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut _Py_Identifier,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_LookupAttr: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_LookupAttrId: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut _Py_Identifier,
            arg3: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_GetMethod: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *mut PyObject,
            method: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_GetDictPtr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *mut *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_NextNotImplemented:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_CallFinalizer:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub PyObject_CallFinalizerFromDealloc: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_GenericGetAttrWithDict: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
            arg4: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_GenericSetAttrWithDict: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
            arg4: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_FunctionStr:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyDebugAllocatorStats: Result<
        unsafe extern "C" fn(
            out: *mut FILE,
            block_name: *const ::std::os::raw::c_char,
            num_blocks: ::std::os::raw::c_int,
            sizeof_block: size_t,
        ),
        ::libloading::Error,
    >,
    pub _PyObject_DebugTypeStats: Result<unsafe extern "C" fn(out: *mut FILE), ::libloading::Error>,
    pub _PyObject_AssertFailed: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            expr: *const ::std::os::raw::c_char,
            msg: *const ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            function: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub _PyObject_CheckConsistency: Result<
        unsafe extern "C" fn(
            op: *mut PyObject,
            check_content: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTrash_deposit_object:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyTrash_destroy_chain: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyTrash_thread_deposit_object:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyTrash_thread_destroy_chain: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyTrash_begin: Result<
        unsafe extern "C" fn(tstate: *mut _ts, op: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTrash_end: Result<unsafe extern "C" fn(tstate: *mut _ts), ::libloading::Error>,
    pub _PyLong_FromTime_t:
        Result<unsafe extern "C" fn(sec: time_t) -> *mut PyObject, ::libloading::Error>,
    pub _PyLong_AsTime_t:
        Result<unsafe extern "C" fn(obj: *mut PyObject) -> time_t, ::libloading::Error>,
    pub _PyTime_ObjectToTime_t: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            sec: *mut time_t,
            arg1: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_ObjectToTimeval: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            sec: *mut time_t,
            usec: *mut ::std::os::raw::c_long,
            arg1: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_ObjectToTimespec: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            sec: *mut time_t,
            nsec: *mut ::std::os::raw::c_long,
            arg1: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_FromSeconds: Result<
        unsafe extern "C" fn(seconds: ::std::os::raw::c_int) -> _PyTime_t,
        ::libloading::Error,
    >,
    pub _PyTime_FromNanoseconds:
        Result<unsafe extern "C" fn(ns: _PyTime_t) -> _PyTime_t, ::libloading::Error>,
    pub _PyTime_FromNanosecondsObject: Result<
        unsafe extern "C" fn(t: *mut _PyTime_t, obj: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_FromSecondsObject: Result<
        unsafe extern "C" fn(
            t: *mut _PyTime_t,
            obj: *mut PyObject,
            round: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_FromMillisecondsObject: Result<
        unsafe extern "C" fn(
            t: *mut _PyTime_t,
            obj: *mut PyObject,
            round: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_AsSecondsDouble:
        Result<unsafe extern "C" fn(t: _PyTime_t) -> f64, ::libloading::Error>,
    pub _PyTime_AsMilliseconds: Result<
        unsafe extern "C" fn(t: _PyTime_t, round: _PyTime_round_t) -> _PyTime_t,
        ::libloading::Error,
    >,
    pub _PyTime_AsMicroseconds: Result<
        unsafe extern "C" fn(t: _PyTime_t, round: _PyTime_round_t) -> _PyTime_t,
        ::libloading::Error,
    >,
    pub _PyTime_AsNanosecondsObject:
        Result<unsafe extern "C" fn(t: _PyTime_t) -> *mut PyObject, ::libloading::Error>,
    pub _PyTime_FromTimeval: Result<
        unsafe extern "C" fn(tp: *mut _PyTime_t, tv: *mut timeval) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_AsTimeval: Result<
        unsafe extern "C" fn(
            t: _PyTime_t,
            tv: *mut timeval,
            round: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_AsTimeval_noraise: Result<
        unsafe extern "C" fn(
            t: _PyTime_t,
            tv: *mut timeval,
            round: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_AsTimevalTime_t: Result<
        unsafe extern "C" fn(
            t: _PyTime_t,
            secs: *mut time_t,
            us: *mut ::std::os::raw::c_int,
            round: _PyTime_round_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_FromTimespec: Result<
        unsafe extern "C" fn(tp: *mut _PyTime_t, ts: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_AsTimespec: Result<
        unsafe extern "C" fn(t: _PyTime_t, ts: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_MulDiv: Result<
        unsafe extern "C" fn(ticks: _PyTime_t, mul: _PyTime_t, div: _PyTime_t) -> _PyTime_t,
        ::libloading::Error,
    >,
    pub _PyTime_GetSystemClock: Result<unsafe extern "C" fn() -> _PyTime_t, ::libloading::Error>,
    pub _PyTime_GetMonotonicClock: Result<unsafe extern "C" fn() -> _PyTime_t, ::libloading::Error>,
    pub _PyTime_GetSystemClockWithInfo: Result<
        unsafe extern "C" fn(
            t: *mut _PyTime_t,
            info: *mut _Py_clock_info_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_GetMonotonicClockWithInfo: Result<
        unsafe extern "C" fn(
            t: *mut _PyTime_t,
            info: *mut _Py_clock_info_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_Init: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyTime_localtime: Result<
        unsafe extern "C" fn(t: time_t, tm: *mut tm) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_gmtime: Result<
        unsafe extern "C" fn(t: time_t, tm: *mut tm) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTime_GetPerfCounter: Result<unsafe extern "C" fn() -> _PyTime_t, ::libloading::Error>,
    pub _PyTime_GetPerfCounterWithInfo: Result<
        unsafe extern "C" fn(
            t: *mut _PyTime_t,
            info: *mut _Py_clock_info_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyMem_Malloc: Result<
        unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyMem_Realloc: Result<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            new_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyMem_Free:
        Result<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub PyMem_RawMalloc: Result<
        unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyMem_RawCalloc: Result<
        unsafe extern "C" fn(nelem: size_t, elsize: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyMem_RawRealloc: Result<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            new_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyMem_RawFree:
        Result<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub _PyMem_GetCurrentAllocatorName:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub PyMem_Calloc: Result<
        unsafe extern "C" fn(nelem: size_t, elsize: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _PyMem_RawStrdup: Result<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _PyMem_Strdup: Result<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _PyMem_RawWcsdup:
        Result<unsafe extern "C" fn(str_: *const wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub PyMem_GetAllocator: Result<
        unsafe extern "C" fn(domain: PyMemAllocatorDomain, allocator: *mut PyMemAllocatorEx),
        ::libloading::Error,
    >,
    pub PyMem_SetAllocator: Result<
        unsafe extern "C" fn(domain: PyMemAllocatorDomain, allocator: *mut PyMemAllocatorEx),
        ::libloading::Error,
    >,
    pub PyMem_SetupDebugHooks: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyObject_Malloc: Result<
        unsafe extern "C" fn(size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyObject_Calloc: Result<
        unsafe extern "C" fn(nelem: size_t, elsize: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyObject_Realloc: Result<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            new_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyObject_Free:
        Result<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub PyObject_Init: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyTypeObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_InitVar: Result<
        unsafe extern "C" fn(
            arg1: *mut PyVarObject,
            arg2: *mut PyTypeObject,
            arg3: Py_ssize_t,
        ) -> *mut PyVarObject,
        ::libloading::Error,
    >,
    pub _PyObject_New:
        Result<unsafe extern "C" fn(arg1: *mut PyTypeObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyObject_NewVar: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: Py_ssize_t) -> *mut PyVarObject,
        ::libloading::Error,
    >,
    pub PyGC_Collect: Result<unsafe extern "C" fn() -> Py_ssize_t, ::libloading::Error>,
    pub _PyObject_GC_Resize: Result<
        unsafe extern "C" fn(arg1: *mut PyVarObject, arg2: Py_ssize_t) -> *mut PyVarObject,
        ::libloading::Error,
    >,
    pub _PyObject_GC_New:
        Result<unsafe extern "C" fn(arg1: *mut PyTypeObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyObject_GC_NewVar: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: Py_ssize_t) -> *mut PyVarObject,
        ::libloading::Error,
    >,
    pub PyObject_GC_Track:
        Result<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub PyObject_GC_UnTrack:
        Result<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub PyObject_GC_Del:
        Result<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub PyObject_GC_IsTracked: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_GC_IsFinalized: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_GetAllocatedBlocks: Result<unsafe extern "C" fn() -> Py_ssize_t, ::libloading::Error>,
    pub _PyObject_DebugMallocStats:
        Result<unsafe extern "C" fn(out: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyObject_GetArenaAllocator:
        Result<unsafe extern "C" fn(allocator: *mut PyObjectArenaAllocator), ::libloading::Error>,
    pub PyObject_SetArenaAllocator:
        Result<unsafe extern "C" fn(allocator: *mut PyObjectArenaAllocator), ::libloading::Error>,
    pub _PyGC_CollectNoFail: Result<unsafe extern "C" fn() -> Py_ssize_t, ::libloading::Error>,
    pub _PyGC_CollectIfEnabled: Result<unsafe extern "C" fn() -> Py_ssize_t, ::libloading::Error>,
    pub PyObject_IS_GC: Result<
        unsafe extern "C" fn(obj: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_GC_Malloc:
        Result<unsafe extern "C" fn(size: size_t) -> *mut PyObject, ::libloading::Error>,
    pub _PyObject_GC_Calloc:
        Result<unsafe extern "C" fn(size: size_t) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_GET_WEAKREFS_LISTPTR:
        Result<unsafe extern "C" fn(op: *mut PyObject) -> *mut *mut PyObject, ::libloading::Error>,
    pub _Py_HashDouble: Result<unsafe extern "C" fn(arg1: f64) -> Py_hash_t, ::libloading::Error>,
    pub _Py_HashPointer: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> Py_hash_t,
        ::libloading::Error,
    >,
    pub _Py_HashPointerRaw: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> Py_hash_t,
        ::libloading::Error,
    >,
    pub _Py_HashBytes: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: Py_ssize_t) -> Py_hash_t,
        ::libloading::Error,
    >,
    pub PyHash_GetFuncDef:
        Result<unsafe extern "C" fn() -> *mut PyHash_FuncDef, ::libloading::Error>,
    pub PyByteArray_FromObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyByteArray_Concat: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyByteArray_FromStringAndSize: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyByteArray_Size:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyByteArray_AsString: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyByteArray_Resize: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBytes_FromStringAndSize: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_FromString: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_FromObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyBytes_FromFormatV: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut __va_list_tag,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_FromFormat: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_Size:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyBytes_AsString: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyBytes_Repr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_Concat: Result<
        unsafe extern "C" fn(arg1: *mut *mut PyObject, arg2: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyBytes_ConcatAndDel: Result<
        unsafe extern "C" fn(arg1: *mut *mut PyObject, arg2: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyBytes_DecodeEscape: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
            arg3: *const ::std::os::raw::c_char,
            arg4: Py_ssize_t,
            arg5: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyBytes_AsStringAndSize: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            s: *mut *mut ::std::os::raw::c_char,
            len: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyBytes_Resize: Result<
        unsafe extern "C" fn(arg1: *mut *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyBytes_FormatEx: Result<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            format_len: Py_ssize_t,
            args: *mut PyObject,
            use_bytearray: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyBytes_FromHex: Result<
        unsafe extern "C" fn(
            string: *mut PyObject,
            use_bytearray: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyBytes_DecodeEscape: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyBytes_Join: Result<
        unsafe extern "C" fn(sep: *mut PyObject, x: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyBytesWriter_Init:
        Result<unsafe extern "C" fn(writer: *mut _PyBytesWriter), ::libloading::Error>,
    pub _PyBytesWriter_Finish: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            str_: *mut ::std::os::raw::c_void,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyBytesWriter_Dealloc:
        Result<unsafe extern "C" fn(writer: *mut _PyBytesWriter), ::libloading::Error>,
    pub _PyBytesWriter_Alloc: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            size: Py_ssize_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _PyBytesWriter_Prepare: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            str_: *mut ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _PyBytesWriter_Resize: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            str_: *mut ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _PyBytesWriter_WriteBytes: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            str_: *mut ::std::os::raw::c_void,
            bytes: *const ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyUnicode_FromStringAndSize: Result<
        unsafe extern "C" fn(u: *const ::std::os::raw::c_char, size: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FromString: Result<
        unsafe extern "C" fn(u: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Substring: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUCS4: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            buffer: *mut Py_UCS4,
            buflen: Py_ssize_t,
            copy_null: ::std::os::raw::c_int,
        ) -> *mut Py_UCS4,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUCS4Copy:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut Py_UCS4, ::libloading::Error>,
    pub PyUnicode_GetLength:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyUnicode_GetSize:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyUnicode_ReadChar: Result<
        unsafe extern "C" fn(unicode: *mut PyObject, index: Py_ssize_t) -> Py_UCS4,
        ::libloading::Error,
    >,
    pub PyUnicode_WriteChar: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            index: Py_ssize_t,
            character: Py_UCS4,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_Resize: Result<
        unsafe extern "C" fn(
            unicode: *mut *mut PyObject,
            length: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_FromEncodedObject: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FromObject:
        Result<unsafe extern "C" fn(obj: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_FromFormatV: Result<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            vargs: *mut __va_list_tag,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FromFormat: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_InternInPlace:
        Result<unsafe extern "C" fn(arg1: *mut *mut PyObject), ::libloading::Error>,
    pub PyUnicode_InternImmortal:
        Result<unsafe extern "C" fn(arg1: *mut *mut PyObject), ::libloading::Error>,
    pub PyUnicode_InternFromString: Result<
        unsafe extern "C" fn(u: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FromWideChar: Result<
        unsafe extern "C" fn(w: *const wchar_t, size: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsWideChar: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            w: *mut wchar_t,
            size: Py_ssize_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyUnicode_AsWideCharString: Result<
        unsafe extern "C" fn(unicode: *mut PyObject, size: *mut Py_ssize_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub PyUnicode_FromOrdinal: Result<
        unsafe extern "C" fn(ordinal: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_GetDefaultEncoding:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub PyUnicode_Decode: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            size: Py_ssize_t,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsDecodedObject: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsDecodedUnicode: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsEncodedObject: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsEncodedString: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsEncodedUnicode: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_BuildEncodingMap:
        Result<unsafe extern "C" fn(string: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeUTF7: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeUTF7Stateful: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            consumed: *mut Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeUTF8: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeUTF8Stateful: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            consumed: *mut Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUTF8String:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeUTF32: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: *mut ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeUTF32Stateful: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: *mut ::std::os::raw::c_int,
            consumed: *mut Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUTF32String:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeUTF16: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: *mut ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeUTF16Stateful: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: *mut ::std::os::raw::c_int,
            consumed: *mut Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUTF16String:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeUnicodeEscape: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUnicodeEscapeString:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeRawUnicodeEscape: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsRawUnicodeEscapeString:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeLatin1: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsLatin1String:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeASCII: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsASCIIString:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_DecodeCharmap: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            mapping: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsCharmapString: Result<
        unsafe extern "C" fn(unicode: *mut PyObject, mapping: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeLocaleAndSize: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            len: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeLocale: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeLocale: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FSConverter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_FSDecoder: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeFSDefault: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_DecodeFSDefaultAndSize: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char, size: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeFSDefault:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_Concat: Result<
        unsafe extern "C" fn(left: *mut PyObject, right: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Append: Result<
        unsafe extern "C" fn(pleft: *mut *mut PyObject, right: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyUnicode_AppendAndDel: Result<
        unsafe extern "C" fn(pleft: *mut *mut PyObject, right: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyUnicode_Split: Result<
        unsafe extern "C" fn(
            s: *mut PyObject,
            sep: *mut PyObject,
            maxsplit: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Splitlines: Result<
        unsafe extern "C" fn(s: *mut PyObject, keepends: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Partition: Result<
        unsafe extern "C" fn(s: *mut PyObject, sep: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_RPartition: Result<
        unsafe extern "C" fn(s: *mut PyObject, sep: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_RSplit: Result<
        unsafe extern "C" fn(
            s: *mut PyObject,
            sep: *mut PyObject,
            maxsplit: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Translate: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            table: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Join: Result<
        unsafe extern "C" fn(separator: *mut PyObject, seq: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Tailmatch: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            substr: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
            direction: ::std::os::raw::c_int,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyUnicode_Find: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            substr: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
            direction: ::std::os::raw::c_int,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyUnicode_FindChar: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            ch: Py_UCS4,
            start: Py_ssize_t,
            end: Py_ssize_t,
            direction: ::std::os::raw::c_int,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyUnicode_Count: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            substr: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyUnicode_Replace: Result<
        unsafe extern "C" fn(
            str_: *mut PyObject,
            substr: *mut PyObject,
            replstr: *mut PyObject,
            maxcount: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Compare: Result<
        unsafe extern "C" fn(left: *mut PyObject, right: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_CompareWithASCIIString: Result<
        unsafe extern "C" fn(
            left: *mut PyObject,
            right: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_RichCompare: Result<
        unsafe extern "C" fn(
            left: *mut PyObject,
            right: *mut PyObject,
            op: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Format: Result<
        unsafe extern "C" fn(format: *mut PyObject, args: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_Contains: Result<
        unsafe extern "C" fn(
            container: *mut PyObject,
            element: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_IsIdentifier: Result<
        unsafe extern "C" fn(s: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_CheckConsistency: Result<
        unsafe extern "C" fn(
            op: *mut PyObject,
            check_content: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_New: Result<
        unsafe extern "C" fn(size: Py_ssize_t, maxchar: Py_UCS4) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_Ready: Result<
        unsafe extern "C" fn(unicode: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_Copy:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicode_CopyCharacters: Result<
        unsafe extern "C" fn(
            to: *mut PyObject,
            to_start: Py_ssize_t,
            from: *mut PyObject,
            from_start: Py_ssize_t,
            how_many: Py_ssize_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _PyUnicode_FastCopyCharacters: Result<
        unsafe extern "C" fn(
            to: *mut PyObject,
            to_start: Py_ssize_t,
            from: *mut PyObject,
            from_start: Py_ssize_t,
            how_many: Py_ssize_t,
        ),
        ::libloading::Error,
    >,
    pub PyUnicode_Fill: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            start: Py_ssize_t,
            length: Py_ssize_t,
            fill_char: Py_UCS4,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _PyUnicode_FastFill: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            start: Py_ssize_t,
            length: Py_ssize_t,
            fill_char: Py_UCS4,
        ),
        ::libloading::Error,
    >,
    pub PyUnicode_FromUnicode: Result<
        unsafe extern "C" fn(u: *const Py_UNICODE, size: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_FromKindAndData: Result<
        unsafe extern "C" fn(
            kind: ::std::os::raw::c_int,
            buffer: *const ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_FromASCII: Result<
        unsafe extern "C" fn(
            buffer: *const ::std::os::raw::c_char,
            size: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_FindMaxChar: Result<
        unsafe extern "C" fn(unicode: *mut PyObject, start: Py_ssize_t, end: Py_ssize_t) -> Py_UCS4,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUnicode: Result<
        unsafe extern "C" fn(unicode: *mut PyObject) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub _PyUnicode_AsUnicode: Result<
        unsafe extern "C" fn(unicode: *mut PyObject) -> *const Py_UNICODE,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUnicodeAndSize: Result<
        unsafe extern "C" fn(unicode: *mut PyObject, size: *mut Py_ssize_t) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub PyUnicode_GetMax: Result<unsafe extern "C" fn() -> Py_UNICODE, ::libloading::Error>,
    pub _PyUnicodeWriter_Init:
        Result<unsafe extern "C" fn(writer: *mut _PyUnicodeWriter), ::libloading::Error>,
    pub _PyUnicodeWriter_PrepareInternal: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            length: Py_ssize_t,
            maxchar: Py_UCS4,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_PrepareKindInternal: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            kind: PyUnicode_Kind,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_WriteChar: Result<
        unsafe extern "C" fn(writer: *mut _PyUnicodeWriter, ch: Py_UCS4) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_WriteStr: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            str_: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_WriteSubstring: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            str_: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_WriteASCIIString: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            str_: *const ::std::os::raw::c_char,
            len: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_WriteLatin1String: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            str_: *const ::std::os::raw::c_char,
            len: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_Finish: Result<
        unsafe extern "C" fn(writer: *mut _PyUnicodeWriter) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicodeWriter_Dealloc:
        Result<unsafe extern "C" fn(writer: *mut _PyUnicodeWriter), ::libloading::Error>,
    pub _PyUnicode_FormatAdvancedWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            obj: *mut PyObject,
            format_spec: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUTF8AndSize: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            size: *mut Py_ssize_t,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUTF8: Result<
        unsafe extern "C" fn(unicode: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyUnicode_Encode: Result<
        unsafe extern "C" fn(
            s: *const Py_UNICODE,
            size: Py_ssize_t,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeUTF7: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            base64SetO: ::std::os::raw::c_int,
            base64WhiteSpace: ::std::os::raw::c_int,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EncodeUTF7: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            base64SetO: ::std::os::raw::c_int,
            base64WhiteSpace: ::std::os::raw::c_int,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_AsUTF8String: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeUTF8: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeUTF32: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EncodeUTF32: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
            byteorder: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeUTF16: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            byteorder: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EncodeUTF16: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
            byteorder: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_DecodeUnicodeEscape: Result<
        unsafe extern "C" fn(
            string: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
            first_invalid_escape: *mut *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeUnicodeEscape: Result<
        unsafe extern "C" fn(data: *const Py_UNICODE, length: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeRawUnicodeEscape: Result<
        unsafe extern "C" fn(data: *const Py_UNICODE, length: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_AsLatin1String: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeLatin1: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_AsASCIIString: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeASCII: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeCharmap: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            mapping: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EncodeCharmap: Result<
        unsafe extern "C" fn(
            unicode: *mut PyObject,
            mapping: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_TranslateCharmap: Result<
        unsafe extern "C" fn(
            data: *const Py_UNICODE,
            length: Py_ssize_t,
            table: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_EncodeDecimal: Result<
        unsafe extern "C" fn(
            s: *mut Py_UNICODE,
            length: Py_ssize_t,
            output: *mut ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicode_TransformDecimalToASCII: Result<
        unsafe extern "C" fn(s: *mut Py_UNICODE, length: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_TransformDecimalAndSpaceToASCII:
        Result<unsafe extern "C" fn(unicode: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyUnicode_JoinArray: Result<
        unsafe extern "C" fn(
            separator: *mut PyObject,
            items: *const *mut PyObject,
            seqlen: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EqualToASCIIId: Result<
        unsafe extern "C" fn(
            left: *mut PyObject,
            right: *mut _Py_Identifier,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_EqualToASCIIString: Result<
        unsafe extern "C" fn(
            left: *mut PyObject,
            right: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_XStrip: Result<
        unsafe extern "C" fn(
            self_: *mut PyObject,
            striptype: ::std::os::raw::c_int,
            sepobj: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_InsertThousandsGrouping: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            n_buffer: Py_ssize_t,
            digits: *mut PyObject,
            d_pos: Py_ssize_t,
            n_digits: Py_ssize_t,
            min_width: Py_ssize_t,
            grouping: *const ::std::os::raw::c_char,
            thousands_sep: *mut PyObject,
            maxchar: *mut Py_UCS4,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _PyUnicode_IsLowercase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsUppercase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsTitlecase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsXidStart:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsXidContinue:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsWhitespace:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsLinebreak:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_ToLowercase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> Py_UCS4, ::libloading::Error>,
    pub _PyUnicode_ToUppercase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> Py_UCS4, ::libloading::Error>,
    pub _PyUnicode_ToTitlecase:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> Py_UCS4, ::libloading::Error>,
    pub _PyUnicode_ToLowerFull: Result<
        unsafe extern "C" fn(ch: Py_UCS4, res: *mut Py_UCS4) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_ToTitleFull: Result<
        unsafe extern "C" fn(ch: Py_UCS4, res: *mut Py_UCS4) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_ToUpperFull: Result<
        unsafe extern "C" fn(ch: Py_UCS4, res: *mut Py_UCS4) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_ToFoldedFull: Result<
        unsafe extern "C" fn(ch: Py_UCS4, res: *mut Py_UCS4) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_IsCaseIgnorable:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsCased:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_ToDecimalDigit:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_ToDigit:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_ToNumeric: Result<unsafe extern "C" fn(ch: Py_UCS4) -> f64, ::libloading::Error>,
    pub _PyUnicode_IsDecimalDigit:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsDigit:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsNumeric:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsPrintable:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyUnicode_IsAlpha:
        Result<unsafe extern "C" fn(ch: Py_UCS4) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_UNICODE_strlen:
        Result<unsafe extern "C" fn(u: *const Py_UNICODE) -> size_t, ::libloading::Error>,
    pub Py_UNICODE_strcpy: Result<
        unsafe extern "C" fn(s1: *mut Py_UNICODE, s2: *const Py_UNICODE) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strcat: Result<
        unsafe extern "C" fn(s1: *mut Py_UNICODE, s2: *const Py_UNICODE) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strncpy: Result<
        unsafe extern "C" fn(
            s1: *mut Py_UNICODE,
            s2: *const Py_UNICODE,
            n: size_t,
        ) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strcmp: Result<
        unsafe extern "C" fn(s1: *const Py_UNICODE, s2: *const Py_UNICODE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strncmp: Result<
        unsafe extern "C" fn(
            s1: *const Py_UNICODE,
            s2: *const Py_UNICODE,
            n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strchr: Result<
        unsafe extern "C" fn(s: *const Py_UNICODE, c: Py_UNICODE) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub Py_UNICODE_strrchr: Result<
        unsafe extern "C" fn(s: *const Py_UNICODE, c: Py_UNICODE) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub _PyUnicode_FormatLong: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicode_AsUnicodeCopy: Result<
        unsafe extern "C" fn(unicode: *mut PyObject) -> *mut Py_UNICODE,
        ::libloading::Error,
    >,
    pub _PyUnicode_FromId: Result<
        unsafe extern "C" fn(arg1: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicode_EQ: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyUnicode_ScanIdentifier:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyLong_FromLong: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_long) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_FromUnsignedLong: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_FromSize_t:
        Result<unsafe extern "C" fn(arg1: size_t) -> *mut PyObject, ::libloading::Error>,
    pub PyLong_FromSsize_t:
        Result<unsafe extern "C" fn(arg1: Py_ssize_t) -> *mut PyObject, ::libloading::Error>,
    pub PyLong_FromDouble:
        Result<unsafe extern "C" fn(arg1: f64) -> *mut PyObject, ::libloading::Error>,
    pub PyLong_AsLong: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub PyLong_AsLongAndOverflow: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub PyLong_AsSsize_t:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyLong_AsSize_t:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> size_t, ::libloading::Error>,
    pub PyLong_AsUnsignedLong: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub PyLong_AsUnsignedLongMask: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _PyLong_AsInt: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyLong_GetInfo: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub _PyLong_UnsignedShort_Converter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_UnsignedInt_Converter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_UnsignedLong_Converter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_UnsignedLongLong_Converter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_Size_t_Converter: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_Frexp: Result<
        unsafe extern "C" fn(a: *mut PyLongObject, e: *mut Py_ssize_t) -> f64,
        ::libloading::Error,
    >,
    pub PyLong_AsDouble:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> f64, ::libloading::Error>,
    pub PyLong_FromVoidPtr: Result<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_AsVoidPtr: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyLong_FromLongLong: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_longlong) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_FromUnsignedLongLong: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_AsLongLong: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub PyLong_AsUnsignedLongLong: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub PyLong_AsUnsignedLongLongMask: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub PyLong_AsLongLongAndOverflow: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub PyLong_FromString: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_FromUnicode: Result<
        unsafe extern "C" fn(
            arg1: *mut Py_UNICODE,
            arg2: Py_ssize_t,
            arg3: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyLong_FromUnicodeObject: Result<
        unsafe extern "C" fn(u: *mut PyObject, base: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_FromBytes: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
            arg3: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_Sign: Result<
        unsafe extern "C" fn(v: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_NumBits:
        Result<unsafe extern "C" fn(v: *mut PyObject) -> size_t, ::libloading::Error>,
    pub _PyLong_DivmodNear: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_FromByteArray: Result<
        unsafe extern "C" fn(
            bytes: *const ::std::os::raw::c_uchar,
            n: size_t,
            little_endian: ::std::os::raw::c_int,
            is_signed: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_AsByteArray: Result<
        unsafe extern "C" fn(
            v: *mut PyLongObject,
            bytes: *mut ::std::os::raw::c_uchar,
            n: size_t,
            little_endian: ::std::os::raw::c_int,
            is_signed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_FromNbInt:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyLong_FromNbIndexOrNbInt:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyLong_Format: Result<
        unsafe extern "C" fn(obj: *mut PyObject, base: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_FormatWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            obj: *mut PyObject,
            base: ::std::os::raw::c_int,
            alternate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyLong_FormatBytesWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyBytesWriter,
            str_: *mut ::std::os::raw::c_char,
            obj: *mut PyObject,
            base: ::std::os::raw::c_int,
            alternate: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _PyLong_FormatAdvancedWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            obj: *mut PyObject,
            format_spec: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyOS_strtoul: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub PyOS_strtol: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _PyLong_GCD: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_Rshift: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: size_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_Lshift: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: size_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyLong_New:
        Result<unsafe extern "C" fn(arg1: Py_ssize_t) -> *mut PyLongObject, ::libloading::Error>,
    pub _PyLong_Copy:
        Result<unsafe extern "C" fn(src: *mut PyLongObject) -> *mut PyObject, ::libloading::Error>,
    pub PyBool_FromLong: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_long) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFloat_GetMax: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub PyFloat_GetMin: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub PyFloat_GetInfo: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyFloat_FromString:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFloat_FromDouble:
        Result<unsafe extern "C" fn(arg1: f64) -> *mut PyObject, ::libloading::Error>,
    pub PyFloat_AsDouble:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> f64, ::libloading::Error>,
    pub _PyFloat_Pack2: Result<
        unsafe extern "C" fn(
            x: f64,
            p: *mut ::std::os::raw::c_uchar,
            le: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyFloat_Pack4: Result<
        unsafe extern "C" fn(
            x: f64,
            p: *mut ::std::os::raw::c_uchar,
            le: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyFloat_Pack8: Result<
        unsafe extern "C" fn(
            x: f64,
            p: *mut ::std::os::raw::c_uchar,
            le: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyFloat_Unpack2: Result<
        unsafe extern "C" fn(p: *const ::std::os::raw::c_uchar, le: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub _PyFloat_Unpack4: Result<
        unsafe extern "C" fn(p: *const ::std::os::raw::c_uchar, le: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub _PyFloat_Unpack8: Result<
        unsafe extern "C" fn(p: *const ::std::os::raw::c_uchar, le: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub _PyFloat_DebugMallocStats:
        Result<unsafe extern "C" fn(out: *mut FILE), ::libloading::Error>,
    pub _PyFloat_FormatAdvancedWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            obj: *mut PyObject,
            format_spec: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_c_sum: Result<
        unsafe extern "C" fn(arg1: Py_complex, arg2: Py_complex) -> Py_complex,
        ::libloading::Error,
    >,
    pub _Py_c_diff: Result<
        unsafe extern "C" fn(arg1: Py_complex, arg2: Py_complex) -> Py_complex,
        ::libloading::Error,
    >,
    pub _Py_c_neg:
        Result<unsafe extern "C" fn(arg1: Py_complex) -> Py_complex, ::libloading::Error>,
    pub _Py_c_prod: Result<
        unsafe extern "C" fn(arg1: Py_complex, arg2: Py_complex) -> Py_complex,
        ::libloading::Error,
    >,
    pub _Py_c_quot: Result<
        unsafe extern "C" fn(arg1: Py_complex, arg2: Py_complex) -> Py_complex,
        ::libloading::Error,
    >,
    pub _Py_c_pow: Result<
        unsafe extern "C" fn(arg1: Py_complex, arg2: Py_complex) -> Py_complex,
        ::libloading::Error,
    >,
    pub _Py_c_abs: Result<unsafe extern "C" fn(arg1: Py_complex) -> f64, ::libloading::Error>,
    pub PyComplex_FromCComplex:
        Result<unsafe extern "C" fn(arg1: Py_complex) -> *mut PyObject, ::libloading::Error>,
    pub PyComplex_FromDoubles:
        Result<unsafe extern "C" fn(real: f64, imag: f64) -> *mut PyObject, ::libloading::Error>,
    pub PyComplex_RealAsDouble:
        Result<unsafe extern "C" fn(op: *mut PyObject) -> f64, ::libloading::Error>,
    pub PyComplex_ImagAsDouble:
        Result<unsafe extern "C" fn(op: *mut PyObject) -> f64, ::libloading::Error>,
    pub PyComplex_AsCComplex:
        Result<unsafe extern "C" fn(op: *mut PyObject) -> Py_complex, ::libloading::Error>,
    pub _PyComplex_FormatAdvancedWriter: Result<
        unsafe extern "C" fn(
            writer: *mut _PyUnicodeWriter,
            obj: *mut PyObject,
            format_spec: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyMemoryView_FromObject:
        Result<unsafe extern "C" fn(base: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMemoryView_FromMemory: Result<
        unsafe extern "C" fn(
            mem: *mut ::std::os::raw::c_char,
            size: Py_ssize_t,
            flags: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyMemoryView_FromBuffer:
        Result<unsafe extern "C" fn(info: *mut Py_buffer) -> *mut PyObject, ::libloading::Error>,
    pub PyMemoryView_GetContiguous: Result<
        unsafe extern "C" fn(
            base: *mut PyObject,
            buffertype: ::std::os::raw::c_int,
            order: ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyTuple_New:
        Result<unsafe extern "C" fn(size: Py_ssize_t) -> *mut PyObject, ::libloading::Error>,
    pub PyTuple_Size:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyTuple_GetItem: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyTuple_SetItem: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyTuple_GetSlice: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyTuple_Pack:
        Result<unsafe extern "C" fn(arg1: Py_ssize_t, ...) -> *mut PyObject, ::libloading::Error>,
    pub _PyTuple_Resize: Result<
        unsafe extern "C" fn(arg1: *mut *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTuple_MaybeUntrack:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyTuple_DebugMallocStats:
        Result<unsafe extern "C" fn(out: *mut FILE), ::libloading::Error>,
    pub PyList_New:
        Result<unsafe extern "C" fn(size: Py_ssize_t) -> *mut PyObject, ::libloading::Error>,
    pub PyList_Size:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyList_GetItem: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyList_SetItem: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_Insert: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_Append: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_GetSlice: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: Py_ssize_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyList_SetSlice: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: Py_ssize_t,
            arg3: Py_ssize_t,
            arg4: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_Sort: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_Reverse: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyList_AsTuple:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyList_Extend: Result<
        unsafe extern "C" fn(arg1: *mut PyListObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyList_DebugMallocStats: Result<unsafe extern "C" fn(out: *mut FILE), ::libloading::Error>,
    pub PyDict_New: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyDict_GetItem: Result<
        unsafe extern "C" fn(mp: *mut PyObject, key: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDict_GetItemWithError: Result<
        unsafe extern "C" fn(mp: *mut PyObject, key: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDict_SetItem: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            item: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_DelItem: Result<
        unsafe extern "C" fn(mp: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_Clear: Result<unsafe extern "C" fn(mp: *mut PyObject), ::libloading::Error>,
    pub PyDict_Next: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            pos: *mut Py_ssize_t,
            key: *mut *mut PyObject,
            value: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_Keys:
        Result<unsafe extern "C" fn(mp: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyDict_Values:
        Result<unsafe extern "C" fn(mp: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyDict_Items:
        Result<unsafe extern "C" fn(mp: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyDict_Size:
        Result<unsafe extern "C" fn(mp: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyDict_Copy:
        Result<unsafe extern "C" fn(mp: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyDict_Contains: Result<
        unsafe extern "C" fn(mp: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_Update: Result<
        unsafe extern "C" fn(mp: *mut PyObject, other: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_Merge: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            other: *mut PyObject,
            override_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_MergeFromSeq2: Result<
        unsafe extern "C" fn(
            d: *mut PyObject,
            seq2: *mut PyObject,
            override_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_GetItemString: Result<
        unsafe extern "C" fn(
            dp: *mut PyObject,
            key: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDict_SetItemString: Result<
        unsafe extern "C" fn(
            dp: *mut PyObject,
            key: *const ::std::os::raw::c_char,
            item: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyDict_DelItemString: Result<
        unsafe extern "C" fn(
            dp: *mut PyObject,
            key: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_GetItem_KnownHash: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            hash: Py_hash_t,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_GetItemIdWithError: Result<
        unsafe extern "C" fn(dp: *mut PyObject, key: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_GetItemStringWithError: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDict_SetDefault: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            defaultobj: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_SetItem_KnownHash: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            item: *mut PyObject,
            hash: Py_hash_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_DelItem_KnownHash: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            hash: Py_hash_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_DelItemIf: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            predicate: ::std::option::Option<
                unsafe extern "C" fn(value: *mut PyObject) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_NewKeysForClass:
        Result<unsafe extern "C" fn() -> *mut PyDictKeysObject, ::libloading::Error>,
    pub PyObject_GenericGetDict: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_Next: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            pos: *mut Py_ssize_t,
            key: *mut *mut PyObject,
            value: *mut *mut PyObject,
            hash: *mut Py_hash_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_Contains: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            key: *mut PyObject,
            hash: Py_hash_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_NewPresized:
        Result<unsafe extern "C" fn(minused: Py_ssize_t) -> *mut PyObject, ::libloading::Error>,
    pub _PyDict_MaybeUntrack: Result<unsafe extern "C" fn(mp: *mut PyObject), ::libloading::Error>,
    pub _PyDict_HasOnlyStringKeys: Result<
        unsafe extern "C" fn(mp: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_KeysSize: Result<
        unsafe extern "C" fn(keys: *mut PyDictKeysObject) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _PyDict_SizeOf:
        Result<unsafe extern "C" fn(arg1: *mut PyDictObject) -> Py_ssize_t, ::libloading::Error>,
    pub _PyDict_Pop: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_Pop_KnownHash: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: Py_hash_t,
            arg4: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_FromKeys: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_MergeEx: Result<
        unsafe extern "C" fn(
            mp: *mut PyObject,
            other: *mut PyObject,
            override_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_GetItemId: Result<
        unsafe extern "C" fn(dp: *mut PyObject, key: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDict_SetItemId: Result<
        unsafe extern "C" fn(
            dp: *mut PyObject,
            key: *mut _Py_Identifier,
            item: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_DelItemId: Result<
        unsafe extern "C" fn(mp: *mut PyObject, key: *mut _Py_Identifier) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_DebugMallocStats: Result<unsafe extern "C" fn(out: *mut FILE), ::libloading::Error>,
    pub _PyObjectDict_SetItem: Result<
        unsafe extern "C" fn(
            tp: *mut PyTypeObject,
            dictptr: *mut *mut PyObject,
            name: *mut PyObject,
            value: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyDict_LoadGlobal: Result<
        unsafe extern "C" fn(
            arg1: *mut PyDictObject,
            arg2: *mut PyDictObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDictView_New: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyTypeObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyDictView_Intersect: Result<
        unsafe extern "C" fn(self_: *mut PyObject, other: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyODict_New: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyODict_SetItem: Result<
        unsafe extern "C" fn(
            od: *mut PyObject,
            key: *mut PyObject,
            item: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyODict_DelItem: Result<
        unsafe extern "C" fn(od: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PySet_NextEntry: Result<
        unsafe extern "C" fn(
            set: *mut PyObject,
            pos: *mut Py_ssize_t,
            key: *mut *mut PyObject,
            hash: *mut Py_hash_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PySet_Update: Result<
        unsafe extern "C" fn(set: *mut PyObject, iterable: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySet_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFrozenSet_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PySet_Add: Result<
        unsafe extern "C" fn(set: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySet_Clear: Result<
        unsafe extern "C" fn(set: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySet_Contains: Result<
        unsafe extern "C" fn(anyset: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySet_Discard: Result<
        unsafe extern "C" fn(set: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySet_Pop:
        Result<unsafe extern "C" fn(set: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PySet_Size:
        Result<unsafe extern "C" fn(anyset: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyCFunction_GetFunction:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> PyCFunction, ::libloading::Error>,
    pub PyCFunction_GetSelf:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCFunction_GetFlags: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCFunction_Call: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCFunction_NewEx: Result<
        unsafe extern "C" fn(
            arg1: *mut PyMethodDef,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCMethod_New: Result<
        unsafe extern "C" fn(
            arg1: *mut PyMethodDef,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
            arg4: *mut PyTypeObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyModule_NewObject:
        Result<unsafe extern "C" fn(name: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyModule_New: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyModule_GetDict:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyModule_GetNameObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyModule_GetName: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyModule_GetFilename: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyModule_GetFilenameObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyModule_Clear: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyModule_ClearDict: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyModuleSpec_IsInitializing: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_GetDef:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyModuleDef, ::libloading::Error>,
    pub PyModule_GetState: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyModuleDef_Init:
        Result<unsafe extern "C" fn(arg1: *mut PyModuleDef) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_New: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFunction_NewWithQualName: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFunction_GetCode:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_GetGlobals:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_GetModule:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_GetDefaults:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_SetDefaults: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFunction_GetKwDefaults:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_SetKwDefaults: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFunction_GetClosure:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_SetClosure: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFunction_GetAnnotations:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFunction_SetAnnotations: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyFunction_Vectorcall: Result<
        unsafe extern "C" fn(
            func: *mut PyObject,
            stack: *const *mut PyObject,
            nargsf: size_t,
            kwnames: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyClassMethod_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyStaticMethod_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMethod_New: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyMethod_Function:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMethod_Self:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyInstanceMethod_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyInstanceMethod_Function:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFile_FromFd: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
            arg5: *const ::std::os::raw::c_char,
            arg6: *const ::std::os::raw::c_char,
            arg7: *const ::std::os::raw::c_char,
            arg8: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFile_GetLine: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFile_WriteObject: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFile_WriteString: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_AsFileDescriptor: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_UniversalNewlineFgets: Result<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut FILE,
            arg4: *mut PyObject,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyFile_NewStdPrinter: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFile_OpenCode: Result<
        unsafe extern "C" fn(utf8path: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyFile_OpenCodeObject:
        Result<unsafe extern "C" fn(path: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyFile_SetOpenCodeHook: Result<
        unsafe extern "C" fn(
            hook: Py_OpenCodeHookFunction,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_New: Result<
        unsafe extern "C" fn(
            pointer: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            destructor: PyCapsule_Destructor,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCapsule_GetPointer: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyCapsule_GetDestructor: Result<
        unsafe extern "C" fn(capsule: *mut PyObject) -> PyCapsule_Destructor,
        ::libloading::Error,
    >,
    pub PyCapsule_GetName: Result<
        unsafe extern "C" fn(capsule: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyCapsule_GetContext: Result<
        unsafe extern "C" fn(capsule: *mut PyObject) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyCapsule_IsValid: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_SetPointer: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            pointer: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_SetDestructor: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            destructor: PyCapsule_Destructor,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_SetName: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_SetContext: Result<
        unsafe extern "C" fn(
            capsule: *mut PyObject,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCapsule_Import: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            no_block: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyCode_New: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut PyObject,
            arg7: *mut PyObject,
            arg8: *mut PyObject,
            arg9: *mut PyObject,
            arg10: *mut PyObject,
            arg11: *mut PyObject,
            arg12: *mut PyObject,
            arg13: *mut PyObject,
            arg14: ::std::os::raw::c_int,
            arg15: *mut PyObject,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyCode_NewWithPosOnlyArgs: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: ::std::os::raw::c_int,
            arg7: *mut PyObject,
            arg8: *mut PyObject,
            arg9: *mut PyObject,
            arg10: *mut PyObject,
            arg11: *mut PyObject,
            arg12: *mut PyObject,
            arg13: *mut PyObject,
            arg14: *mut PyObject,
            arg15: ::std::os::raw::c_int,
            arg16: *mut PyObject,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyCode_NewEmpty: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            funcname: *const ::std::os::raw::c_char,
            firstlineno: ::std::os::raw::c_int,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyCode_Addr2Line: Result<
        unsafe extern "C" fn(
            arg1: *mut PyCodeObject,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCode_CheckLineNumber: Result<
        unsafe extern "C" fn(
            co: *mut PyCodeObject,
            lasti: ::std::os::raw::c_int,
            bounds: *mut PyAddrPair,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCode_ConstantKey:
        Result<unsafe extern "C" fn(obj: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCode_Optimize: Result<
        unsafe extern "C" fn(
            code: *mut PyObject,
            consts: *mut PyObject,
            names: *mut PyObject,
            lnotab: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCode_GetExtra: Result<
        unsafe extern "C" fn(
            code: *mut PyObject,
            index: Py_ssize_t,
            extra: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCode_SetExtra: Result<
        unsafe extern "C" fn(
            code: *mut PyObject,
            index: Py_ssize_t,
            extra: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFrame_GetLineNumber: Result<
        unsafe extern "C" fn(arg1: *mut PyFrameObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyFrame_GetCode: Result<
        unsafe extern "C" fn(frame: *mut PyFrameObject) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyTraceBack_Here: Result<
        unsafe extern "C" fn(arg1: *mut PyFrameObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyTraceBack_Print: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_DisplaySourceLine: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTraceback_Add: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PySlice_New: Result<
        unsafe extern "C" fn(
            start: *mut PyObject,
            stop: *mut PyObject,
            step: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PySlice_FromIndices: Result<
        unsafe extern "C" fn(start: Py_ssize_t, stop: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PySlice_GetLongIndices: Result<
        unsafe extern "C" fn(
            self_: *mut PySliceObject,
            length: *mut PyObject,
            start_ptr: *mut *mut PyObject,
            stop_ptr: *mut *mut PyObject,
            step_ptr: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySlice_GetIndices: Result<
        unsafe extern "C" fn(
            r: *mut PyObject,
            length: Py_ssize_t,
            start: *mut Py_ssize_t,
            stop: *mut Py_ssize_t,
            step: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySlice_GetIndicesEx: Result<
        unsafe extern "C" fn(
            r: *mut PyObject,
            length: Py_ssize_t,
            start: *mut Py_ssize_t,
            stop: *mut Py_ssize_t,
            step: *mut Py_ssize_t,
            slicelength: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySlice_Unpack: Result<
        unsafe extern "C" fn(
            slice: *mut PyObject,
            start: *mut Py_ssize_t,
            stop: *mut Py_ssize_t,
            step: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySlice_AdjustIndices: Result<
        unsafe extern "C" fn(
            length: Py_ssize_t,
            start: *mut Py_ssize_t,
            stop: *mut Py_ssize_t,
            step: Py_ssize_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyCell_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCell_Get:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCell_Set: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySeqIter_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCallIter_New: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyInterpreterState_New:
        Result<unsafe extern "C" fn() -> *mut PyInterpreterState, ::libloading::Error>,
    pub PyInterpreterState_Clear:
        Result<unsafe extern "C" fn(arg1: *mut PyInterpreterState), ::libloading::Error>,
    pub PyInterpreterState_Delete:
        Result<unsafe extern "C" fn(arg1: *mut PyInterpreterState), ::libloading::Error>,
    pub PyInterpreterState_Get:
        Result<unsafe extern "C" fn() -> *mut PyInterpreterState, ::libloading::Error>,
    pub PyInterpreterState_GetDict: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyInterpreterState_GetID:
        Result<unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> i64, ::libloading::Error>,
    pub PyState_AddModule: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyModuleDef) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyState_RemoveModule: Result<
        unsafe extern "C" fn(arg1: *mut PyModuleDef) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyState_FindModule:
        Result<unsafe extern "C" fn(arg1: *mut PyModuleDef) -> *mut PyObject, ::libloading::Error>,
    pub PyThreadState_New: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub PyThreadState_Clear:
        Result<unsafe extern "C" fn(arg1: *mut PyThreadState), ::libloading::Error>,
    pub PyThreadState_Delete:
        Result<unsafe extern "C" fn(arg1: *mut PyThreadState), ::libloading::Error>,
    pub PyThreadState_Get:
        Result<unsafe extern "C" fn() -> *mut PyThreadState, ::libloading::Error>,
    pub PyThreadState_Swap: Result<
        unsafe extern "C" fn(arg1: *mut PyThreadState) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub PyThreadState_GetDict: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyThreadState_SetAsyncExc: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_ulong,
            arg2: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThreadState_GetInterpreter: Result<
        unsafe extern "C" fn(tstate: *mut PyThreadState) -> *mut PyInterpreterState,
        ::libloading::Error,
    >,
    pub PyThreadState_GetFrame: Result<
        unsafe extern "C" fn(tstate: *mut PyThreadState) -> *mut PyFrameObject,
        ::libloading::Error,
    >,
    pub PyThreadState_GetID:
        Result<unsafe extern "C" fn(tstate: *mut PyThreadState) -> u64, ::libloading::Error>,
    pub PyGILState_Ensure: Result<unsafe extern "C" fn() -> PyGILState_STATE, ::libloading::Error>,
    pub PyGILState_Release:
        Result<unsafe extern "C" fn(arg1: PyGILState_STATE), ::libloading::Error>,
    pub PyGILState_GetThisThreadState:
        Result<unsafe extern "C" fn() -> *mut PyThreadState, ::libloading::Error>,
    pub PyStatus_Ok: Result<unsafe extern "C" fn() -> PyStatus, ::libloading::Error>,
    pub PyStatus_Error: Result<
        unsafe extern "C" fn(err_msg: *const ::std::os::raw::c_char) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyStatus_NoMemory: Result<unsafe extern "C" fn() -> PyStatus, ::libloading::Error>,
    pub PyStatus_Exit: Result<
        unsafe extern "C" fn(exitcode: ::std::os::raw::c_int) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyStatus_IsError:
        Result<unsafe extern "C" fn(err: PyStatus) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyStatus_IsExit:
        Result<unsafe extern "C" fn(err: PyStatus) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyStatus_Exception:
        Result<unsafe extern "C" fn(err: PyStatus) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyWideStringList_Append: Result<
        unsafe extern "C" fn(list: *mut PyWideStringList, item: *const wchar_t) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyWideStringList_Insert: Result<
        unsafe extern "C" fn(
            list: *mut PyWideStringList,
            index: Py_ssize_t,
            item: *const wchar_t,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyPreConfig_InitPythonConfig:
        Result<unsafe extern "C" fn(config: *mut PyPreConfig), ::libloading::Error>,
    pub PyPreConfig_InitIsolatedConfig:
        Result<unsafe extern "C" fn(config: *mut PyPreConfig), ::libloading::Error>,
    pub PyConfig_InitPythonConfig:
        Result<unsafe extern "C" fn(config: *mut PyConfig), ::libloading::Error>,
    pub PyConfig_InitIsolatedConfig:
        Result<unsafe extern "C" fn(config: *mut PyConfig), ::libloading::Error>,
    pub PyConfig_Clear: Result<unsafe extern "C" fn(arg1: *mut PyConfig), ::libloading::Error>,
    pub PyConfig_SetString: Result<
        unsafe extern "C" fn(
            config: *mut PyConfig,
            config_str: *mut *mut wchar_t,
            str_: *const wchar_t,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyConfig_SetBytesString: Result<
        unsafe extern "C" fn(
            config: *mut PyConfig,
            config_str: *mut *mut wchar_t,
            str_: *const ::std::os::raw::c_char,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyConfig_Read:
        Result<unsafe extern "C" fn(config: *mut PyConfig) -> PyStatus, ::libloading::Error>,
    pub PyConfig_SetBytesArgv: Result<
        unsafe extern "C" fn(
            config: *mut PyConfig,
            argc: Py_ssize_t,
            argv: *const *mut ::std::os::raw::c_char,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyConfig_SetArgv: Result<
        unsafe extern "C" fn(
            config: *mut PyConfig,
            argc: Py_ssize_t,
            argv: *const *mut wchar_t,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub PyConfig_SetWideStringList: Result<
        unsafe extern "C" fn(
            config: *mut PyConfig,
            list: *mut PyWideStringList,
            length: Py_ssize_t,
            items: *mut *mut wchar_t,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub Py_GetArgcArgv: Result<
        unsafe extern "C" fn(argc: *mut ::std::os::raw::c_int, argv: *mut *mut *mut wchar_t),
        ::libloading::Error,
    >,
    pub _PyInterpreterState_RequiresIDRef: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyInterpreterState_RequireIDRef: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState, arg2: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub _PyInterpreterState_GetMainModule: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyThreadState_Prealloc: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub _PyThreadState_UncheckedGet:
        Result<unsafe extern "C" fn() -> *mut PyThreadState, ::libloading::Error>,
    pub _PyThreadState_GetDict: Result<
        unsafe extern "C" fn(tstate: *mut PyThreadState) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyGILState_Check:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyGILState_GetInterpreterStateUnsafe:
        Result<unsafe extern "C" fn() -> *mut PyInterpreterState, ::libloading::Error>,
    pub _PyThread_CurrentFrames:
        Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyInterpreterState_Main:
        Result<unsafe extern "C" fn() -> *mut PyInterpreterState, ::libloading::Error>,
    pub PyInterpreterState_Head:
        Result<unsafe extern "C" fn() -> *mut PyInterpreterState, ::libloading::Error>,
    pub PyInterpreterState_Next: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyInterpreterState,
        ::libloading::Error,
    >,
    pub PyInterpreterState_ThreadHead: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub PyThreadState_Next: Result<
        unsafe extern "C" fn(arg1: *mut PyThreadState) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub PyThreadState_DeleteCurrent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyInterpreterState_GetEvalFrameFunc: Result<
        unsafe extern "C" fn(interp: *mut PyInterpreterState) -> _PyFrameEvalFunction,
        ::libloading::Error,
    >,
    pub _PyInterpreterState_SetEvalFrameFunc: Result<
        unsafe extern "C" fn(interp: *mut PyInterpreterState, eval_frame: _PyFrameEvalFunction),
        ::libloading::Error,
    >,
    pub _PyInterpreterState_GetConfig: Result<
        unsafe extern "C" fn(interp: *mut PyInterpreterState) -> *const PyConfig,
        ::libloading::Error,
    >,
    pub _Py_GetConfig: Result<unsafe extern "C" fn() -> *const PyConfig, ::libloading::Error>,
    pub _PyObject_GetCrossInterpreterData: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut _PyCrossInterpreterData,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCrossInterpreterData_NewObject: Result<
        unsafe extern "C" fn(arg1: *mut _PyCrossInterpreterData) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCrossInterpreterData_Release:
        Result<unsafe extern "C" fn(arg1: *mut _PyCrossInterpreterData), ::libloading::Error>,
    pub _PyObject_CheckCrossInterpreterData: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCrossInterpreterData_RegisterClass: Result<
        unsafe extern "C" fn(
            arg1: *mut PyTypeObject,
            arg2: crossinterpdatafunc,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCrossInterpreterData_Lookup: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> crossinterpdatafunc,
        ::libloading::Error,
    >,
    pub PyGen_New: Result<
        unsafe extern "C" fn(arg1: *mut PyFrameObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyGen_NewWithQualName: Result<
        unsafe extern "C" fn(
            arg1: *mut PyFrameObject,
            name: *mut PyObject,
            qualname: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyGen_SetStopIterationValue: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyGen_FetchStopIterationValue: Result<
        unsafe extern "C" fn(arg1: *mut *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyGen_Send: Result<
        unsafe extern "C" fn(arg1: *mut PyGenObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyGen_yf:
        Result<unsafe extern "C" fn(arg1: *mut PyGenObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyGen_Finalize: Result<unsafe extern "C" fn(self_: *mut PyObject), ::libloading::Error>,
    pub _PyCoro_GetAwaitableIter:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCoro_New: Result<
        unsafe extern "C" fn(
            arg1: *mut PyFrameObject,
            name: *mut PyObject,
            qualname: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyAsyncGen_New: Result<
        unsafe extern "C" fn(
            arg1: *mut PyFrameObject,
            name: *mut PyObject,
            qualname: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyAsyncGenValueWrapperNew:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyDescr_NewMethod: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyMethodDef) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDescr_NewClassMethod: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyMethodDef) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDescr_NewMember: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyMemberDef) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDescr_NewGetSet: Result<
        unsafe extern "C" fn(arg1: *mut PyTypeObject, arg2: *mut PyGetSetDef) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDescr_NewWrapper: Result<
        unsafe extern "C" fn(
            arg1: *mut PyTypeObject,
            arg2: *mut wrapperbase,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyDictProxy_New:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyWrapper_New: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub Py_GenericAlias: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyWarnings_Init: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyErr_WarnEx: Result<
        unsafe extern "C" fn(
            category: *mut PyObject,
            message: *const ::std::os::raw::c_char,
            stack_level: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_WarnFormat: Result<
        unsafe extern "C" fn(
            category: *mut PyObject,
            stack_level: Py_ssize_t,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_ResourceWarning: Result<
        unsafe extern "C" fn(
            source: *mut PyObject,
            stack_level: Py_ssize_t,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_WarnExplicitObject: Result<
        unsafe extern "C" fn(
            category: *mut PyObject,
            message: *mut PyObject,
            filename: *mut PyObject,
            lineno: ::std::os::raw::c_int,
            module: *mut PyObject,
            registry: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_WarnExplicit: Result<
        unsafe extern "C" fn(
            category: *mut PyObject,
            message: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
            module: *const ::std::os::raw::c_char,
            registry: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_WarnExplicitFormat: Result<
        unsafe extern "C" fn(
            category: *mut PyObject,
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
            module: *const ::std::os::raw::c_char,
            registry: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyErr_WarnUnawaitedCoroutine:
        Result<unsafe extern "C" fn(coro: *mut PyObject), ::libloading::Error>,
    pub PyWeakref_NewRef: Result<
        unsafe extern "C" fn(ob: *mut PyObject, callback: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyWeakref_NewProxy: Result<
        unsafe extern "C" fn(ob: *mut PyObject, callback: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyWeakref_GetObject:
        Result<unsafe extern "C" fn(ref_: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub _PyWeakref_GetWeakrefCount:
        Result<unsafe extern "C" fn(head: *mut PyWeakReference) -> Py_ssize_t, ::libloading::Error>,
    pub _PyWeakref_ClearRef:
        Result<unsafe extern "C" fn(self_: *mut PyWeakReference), ::libloading::Error>,
    pub PyStructSequence_InitType: Result<
        unsafe extern "C" fn(type_: *mut PyTypeObject, desc: *mut PyStructSequence_Desc),
        ::libloading::Error,
    >,
    pub PyStructSequence_InitType2: Result<
        unsafe extern "C" fn(
            type_: *mut PyTypeObject,
            desc: *mut PyStructSequence_Desc,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyStructSequence_NewType: Result<
        unsafe extern "C" fn(desc: *mut PyStructSequence_Desc) -> *mut PyTypeObject,
        ::libloading::Error,
    >,
    pub PyStructSequence_New: Result<
        unsafe extern "C" fn(type_: *mut PyTypeObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyStructSequence_SetItem: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t, arg3: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyStructSequence_GetItem: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyNamespace_New:
        Result<unsafe extern "C" fn(kwds: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyPickleBuffer_FromObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyPickleBuffer_GetBuffer:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *const Py_buffer, ::libloading::Error>,
    pub PyPickleBuffer_Release: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCodec_Register: Result<
        unsafe extern "C" fn(search_function: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyCodec_Lookup: Result<
        unsafe extern "C" fn(encoding: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodec_Forget: Result<
        unsafe extern "C" fn(encoding: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCodec_KnownEncoding: Result<
        unsafe extern "C" fn(encoding: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCodec_Encode: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_Decode: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodec_LookupTextEncoding: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            alternate_command: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodec_EncodeText: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodec_DecodeText: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodecInfo_GetIncrementalDecoder: Result<
        unsafe extern "C" fn(
            codec_info: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyCodecInfo_GetIncrementalEncoder: Result<
        unsafe extern "C" fn(
            codec_info: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_Encoder: Result<
        unsafe extern "C" fn(encoding: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_Decoder: Result<
        unsafe extern "C" fn(encoding: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_IncrementalEncoder: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_IncrementalDecoder: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_StreamReader: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            stream: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_StreamWriter: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            stream: *mut PyObject,
            errors: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_RegisterError: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            error: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCodec_LookupError: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCodec_StrictErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCodec_IgnoreErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCodec_ReplaceErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCodec_XMLCharRefReplaceErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCodec_BackslashReplaceErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyCodec_NameReplaceErrors:
        Result<unsafe extern "C" fn(exc: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyErr_SetNone: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub PyErr_SetObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject), ::libloading::Error>,
    pub PyErr_SetString: Result<
        unsafe extern "C" fn(exception: *mut PyObject, string: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub PyErr_Occurred: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyErr_Clear: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyErr_Fetch: Result<
        unsafe extern "C" fn(
            arg1: *mut *mut PyObject,
            arg2: *mut *mut PyObject,
            arg3: *mut *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub PyErr_Restore: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyErr_GetExcInfo: Result<
        unsafe extern "C" fn(
            arg1: *mut *mut PyObject,
            arg2: *mut *mut PyObject,
            arg3: *mut *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub PyErr_SetExcInfo: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject),
        ::libloading::Error,
    >,
    pub Py_FatalError:
        Result<unsafe extern "C" fn(message: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub PyErr_GivenExceptionMatches: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_ExceptionMatches: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyErr_NormalizeException: Result<
        unsafe extern "C" fn(
            arg1: *mut *mut PyObject,
            arg2: *mut *mut PyObject,
            arg3: *mut *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub PyException_SetTraceback: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyException_GetTraceback:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyException_GetCause:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyException_SetCause:
        Result<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject), ::libloading::Error>,
    pub PyException_GetContext:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyException_SetContext:
        Result<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject), ::libloading::Error>,
    pub PyExceptionClass_Name: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyErr_BadArgument:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyErr_NoMemory: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyErr_SetFromErrno:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyErr_SetFromErrnoWithFilenameObject: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_SetFromErrnoWithFilenameObjects: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_SetFromErrnoWithFilename: Result<
        unsafe extern "C" fn(
            exc: *mut PyObject,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_Format: Result<
        unsafe extern "C" fn(
            exception: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_FormatV: Result<
        unsafe extern "C" fn(
            exception: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            vargs: *mut __va_list_tag,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_SetImportErrorSubclass: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
            arg4: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_SetImportError: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_BadInternalCall: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyErr_BadInternalCall: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PyErr_NewException: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            base: *mut PyObject,
            dict: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_NewExceptionWithDoc: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            doc: *const ::std::os::raw::c_char,
            base: *mut PyObject,
            dict: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyErr_WriteUnraisable:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub PyErr_CheckSignals:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyErr_SetInterrupt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyErr_SyntaxLocation: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PyErr_SyntaxLocationEx: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
            col_offset: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PyErr_ProgramText: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            lineno: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_Create: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            object: *const ::std::os::raw::c_char,
            length: Py_ssize_t,
            start: Py_ssize_t,
            end: Py_ssize_t,
            reason: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_GetEncoding:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeDecodeError_GetEncoding:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeEncodeError_GetObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeDecodeError_GetObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeTranslateError_GetObject:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeEncodeError_GetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_GetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_GetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_SetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_SetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_SetStart: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_GetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_GetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_GetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_SetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_SetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_SetEnd: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_GetReason:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeDecodeError_GetReason:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeTranslateError_GetReason:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyUnicodeEncodeError_SetReason: Result<
        unsafe extern "C" fn(
            exc: *mut PyObject,
            reason: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeDecodeError_SetReason: Result<
        unsafe extern "C" fn(
            exc: *mut PyObject,
            reason: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_SetReason: Result<
        unsafe extern "C" fn(
            exc: *mut PyObject,
            reason: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyOS_snprintf: Result<
        unsafe extern "C" fn(
            str_: *mut ::std::os::raw::c_char,
            size: size_t,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyOS_vsnprintf: Result<
        unsafe extern "C" fn(
            str_: *mut ::std::os::raw::c_char,
            size: size_t,
            format: *const ::std::os::raw::c_char,
            va: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyErr_SetKeyError: Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub _PyErr_GetTopmostException: Result<
        unsafe extern "C" fn(tstate: *mut PyThreadState) -> *mut _PyErr_StackItem,
        ::libloading::Error,
    >,
    pub _PyErr_GetExcInfo: Result<
        unsafe extern "C" fn(
            arg1: *mut PyThreadState,
            arg2: *mut *mut PyObject,
            arg3: *mut *mut PyObject,
            arg4: *mut *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub _PyErr_ChainExceptions: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject),
        ::libloading::Error,
    >,
    pub _PyErr_FormatFromCause: Result<
        unsafe extern "C" fn(
            exception: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyErr_TrySetFromCause: Result<
        unsafe extern "C" fn(prefix_format: *const ::std::os::raw::c_char, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySignal_SetWakeupFd: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyErr_CheckSignals:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyErr_SyntaxLocationObject: Result<
        unsafe extern "C" fn(
            filename: *mut PyObject,
            lineno: ::std::os::raw::c_int,
            col_offset: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PyErr_ProgramTextObject: Result<
        unsafe extern "C" fn(
            filename: *mut PyObject,
            lineno: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicodeEncodeError_Create: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            object: *const Py_UNICODE,
            length: Py_ssize_t,
            start: Py_ssize_t,
            end: Py_ssize_t,
            reason: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyUnicodeTranslateError_Create: Result<
        unsafe extern "C" fn(
            object: *const Py_UNICODE,
            length: Py_ssize_t,
            start: Py_ssize_t,
            end: Py_ssize_t,
            reason: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyUnicodeTranslateError_Create: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            start: Py_ssize_t,
            end: Py_ssize_t,
            reason: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyErr_WriteUnraisableMsg: Result<
        unsafe extern "C" fn(err_msg: *const ::std::os::raw::c_char, obj: *mut PyObject),
        ::libloading::Error,
    >,
    pub _Py_FatalErrorFunc: Result<
        unsafe extern "C" fn(
            func: *const ::std::os::raw::c_char,
            message: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub _Py_FatalErrorFormat: Result<
        unsafe extern "C" fn(
            func: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ),
        ::libloading::Error,
    >,
    pub PyThread_init_thread: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyThread_start_new_thread: Result<
        unsafe extern "C" fn(
            arg1: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub PyThread_exit_thread: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyThread_get_thread_ident:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub PyThread_get_thread_native_id:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub PyThread_allocate_lock:
        Result<unsafe extern "C" fn() -> PyThread_type_lock, ::libloading::Error>,
    pub PyThread_free_lock:
        Result<unsafe extern "C" fn(arg1: PyThread_type_lock), ::libloading::Error>,
    pub PyThread_acquire_lock: Result<
        unsafe extern "C" fn(
            arg1: PyThread_type_lock,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyThread_at_fork_reinit: Result<
        unsafe extern "C" fn(lock: *mut PyThread_type_lock) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThread_acquire_lock_timed: Result<
        unsafe extern "C" fn(
            arg1: PyThread_type_lock,
            microseconds: ::std::os::raw::c_longlong,
            intr_flag: ::std::os::raw::c_int,
        ) -> PyLockStatus,
        ::libloading::Error,
    >,
    pub PyThread_release_lock:
        Result<unsafe extern "C" fn(arg1: PyThread_type_lock), ::libloading::Error>,
    pub PyThread_get_stacksize: Result<unsafe extern "C" fn() -> size_t, ::libloading::Error>,
    pub PyThread_set_stacksize:
        Result<unsafe extern "C" fn(arg1: size_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyThread_GetInfo: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyThread_create_key:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyThread_delete_key:
        Result<unsafe extern "C" fn(key: ::std::os::raw::c_int), ::libloading::Error>,
    pub PyThread_set_key_value: Result<
        unsafe extern "C" fn(
            key: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThread_get_key_value: Result<
        unsafe extern "C" fn(key: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyThread_delete_key_value:
        Result<unsafe extern "C" fn(key: ::std::os::raw::c_int), ::libloading::Error>,
    pub PyThread_ReInitTLS: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyThread_tss_alloc: Result<unsafe extern "C" fn() -> *mut Py_tss_t, ::libloading::Error>,
    pub PyThread_tss_free: Result<unsafe extern "C" fn(key: *mut Py_tss_t), ::libloading::Error>,
    pub PyThread_tss_is_created: Result<
        unsafe extern "C" fn(key: *mut Py_tss_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThread_tss_create: Result<
        unsafe extern "C" fn(key: *mut Py_tss_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThread_tss_delete: Result<unsafe extern "C" fn(key: *mut Py_tss_t), ::libloading::Error>,
    pub PyThread_tss_set: Result<
        unsafe extern "C" fn(
            key: *mut Py_tss_t,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyThread_tss_get: Result<
        unsafe extern "C" fn(key: *mut Py_tss_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyContext_New: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyContext_Copy:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyContext_CopyCurrent: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyContext_Enter: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyContext_Exit: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyContextVar_New: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            default_value: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyContextVar_Get: Result<
        unsafe extern "C" fn(
            var: *mut PyObject,
            default_value: *mut PyObject,
            value: *mut *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyContextVar_Set: Result<
        unsafe extern "C" fn(var: *mut PyObject, value: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyContextVar_Reset: Result<
        unsafe extern "C" fn(var: *mut PyObject, token: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyContext_NewHamtForTests:
        Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyArena_New: Result<unsafe extern "C" fn() -> *mut PyArena, ::libloading::Error>,
    pub PyArena_Free: Result<unsafe extern "C" fn(arg1: *mut PyArena), ::libloading::Error>,
    pub PyArena_Malloc: Result<
        unsafe extern "C" fn(arg1: *mut PyArena, size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyArena_AddPyObject: Result<
        unsafe extern "C" fn(arg1: *mut PyArena, arg2: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_VaBuildValue_SizeT: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut __va_list_tag,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_VaBuildStack_SizeT: Result<
        unsafe extern "C" fn(
            small_stack: *mut *mut PyObject,
            small_stack_len: Py_ssize_t,
            format: *const ::std::os::raw::c_char,
            va: *mut __va_list_tag,
            p_nargs: *mut Py_ssize_t,
        ) -> *mut *mut PyObject,
        ::libloading::Error,
    >,
    pub PyArg_Parse: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_ParseTuple: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_ParseTupleAndKeywords: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut *mut ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_VaParse: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_VaParseTupleAndKeywords: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut *mut ::std::os::raw::c_char,
            arg5: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_ValidateKeywordArguments: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyArg_UnpackTuple: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: Py_ssize_t,
            arg4: Py_ssize_t,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_BuildValue: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_BuildValue_SizeT: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyArg_UnpackStack: Result<
        unsafe extern "C" fn(
            args: *const *mut PyObject,
            nargs: Py_ssize_t,
            name: *const ::std::os::raw::c_char,
            min: Py_ssize_t,
            max: Py_ssize_t,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_NoKeywords: Result<
        unsafe extern "C" fn(
            funcname: *const ::std::os::raw::c_char,
            kwargs: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_NoKwnames: Result<
        unsafe extern "C" fn(
            funcname: *const ::std::os::raw::c_char,
            kwnames: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_NoPositional: Result<
        unsafe extern "C" fn(
            funcname: *const ::std::os::raw::c_char,
            args: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_BadArgument: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub _PyArg_CheckPositional: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: Py_ssize_t,
            arg3: Py_ssize_t,
            arg4: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_VaBuildValue: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut __va_list_tag,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_VaBuildStack: Result<
        unsafe extern "C" fn(
            small_stack: *mut *mut PyObject,
            small_stack_len: Py_ssize_t,
            format: *const ::std::os::raw::c_char,
            va: *mut __va_list_tag,
            p_nargs: *mut Py_ssize_t,
        ) -> *mut *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyArg_ParseTupleAndKeywordsFast: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut _PyArg_Parser,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_ParseStack: Result<
        unsafe extern "C" fn(
            args: *const *mut PyObject,
            nargs: Py_ssize_t,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_ParseStackAndKeywords: Result<
        unsafe extern "C" fn(
            args: *const *mut PyObject,
            nargs: Py_ssize_t,
            kwnames: *mut PyObject,
            arg1: *mut _PyArg_Parser,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_VaParseTupleAndKeywordsFast: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut _PyArg_Parser,
            arg4: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyArg_UnpackKeywords: Result<
        unsafe extern "C" fn(
            args: *const *mut PyObject,
            nargs: Py_ssize_t,
            kwargs: *mut PyObject,
            kwnames: *mut PyObject,
            parser: *mut _PyArg_Parser,
            minpos: ::std::os::raw::c_int,
            maxpos: ::std::os::raw::c_int,
            minkw: ::std::os::raw::c_int,
            buf: *mut *mut PyObject,
        ) -> *const *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyArg_Fini: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyModule_AddObject: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_AddIntConstant: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_AddStringConstant: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_AddType: Result<
        unsafe extern "C" fn(
            module: *mut PyObject,
            type_: *mut PyTypeObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_SetDocString: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_AddFunctions: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyMethodDef) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_ExecDef: Result<
        unsafe extern "C" fn(module: *mut PyObject, def: *mut PyModuleDef) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyModule_Create2: Result<
        unsafe extern "C" fn(
            arg1: *mut PyModuleDef,
            apiver: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyModule_CreateInitialized: Result<
        unsafe extern "C" fn(
            arg1: *mut PyModuleDef,
            apiver: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyModule_FromDefAndSpec2: Result<
        unsafe extern "C" fn(
            def: *mut PyModuleDef,
            spec: *mut PyObject,
            module_api_version: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNode_Compile: Result<
        unsafe extern "C" fn(
            arg1: *mut _node,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyAST_CompileEx: Result<
        unsafe extern "C" fn(
            mod_: *mut _mod,
            filename: *const ::std::os::raw::c_char,
            flags: *mut PyCompilerFlags,
            optimize: ::std::os::raw::c_int,
            arena: *mut PyArena,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyAST_CompileObject: Result<
        unsafe extern "C" fn(
            mod_: *mut _mod,
            filename: *mut PyObject,
            flags: *mut PyCompilerFlags,
            optimize: ::std::os::raw::c_int,
            arena: *mut PyArena,
        ) -> *mut PyCodeObject,
        ::libloading::Error,
    >,
    pub PyFuture_FromAST: Result<
        unsafe extern "C" fn(
            mod_: *mut _mod,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut PyFutureFeatures,
        ::libloading::Error,
    >,
    pub PyFuture_FromASTObject: Result<
        unsafe extern "C" fn(mod_: *mut _mod, filename: *mut PyObject) -> *mut PyFutureFeatures,
        ::libloading::Error,
    >,
    pub _Py_Mangle: Result<
        unsafe extern "C" fn(p: *mut PyObject, name: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyCompile_OpcodeStackEffect: Result<
        unsafe extern "C" fn(
            opcode: ::std::os::raw::c_int,
            oparg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyCompile_OpcodeStackEffectWithJump: Result<
        unsafe extern "C" fn(
            opcode: ::std::os::raw::c_int,
            oparg: ::std::os::raw::c_int,
            jump: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyAST_Optimize: Result<
        unsafe extern "C" fn(
            arg1: *mut _mod,
            arena: *mut PyArena,
            state: *mut _PyASTOptimizeState,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_SimpleStringFlags: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_AnyFileExFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            closeit: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_SimpleFileExFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            closeit: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_InteractiveOneFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            flags: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_InteractiveOneObject: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *mut PyObject,
            flags: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_InteractiveLoopFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            flags: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyParser_ASTFromString: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
            arena: *mut PyArena,
        ) -> *mut _mod,
        ::libloading::Error,
    >,
    pub PyParser_ASTFromStringObject: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            filename: *mut PyObject,
            start: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
            arena: *mut PyArena,
        ) -> *mut _mod,
        ::libloading::Error,
    >,
    pub PyParser_ASTFromFile: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            enc: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            ps1: *const ::std::os::raw::c_char,
            ps2: *const ::std::os::raw::c_char,
            flags: *mut PyCompilerFlags,
            errcode: *mut ::std::os::raw::c_int,
            arena: *mut PyArena,
        ) -> *mut _mod,
        ::libloading::Error,
    >,
    pub PyParser_ASTFromFileObject: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *mut PyObject,
            enc: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            ps1: *const ::std::os::raw::c_char,
            ps2: *const ::std::os::raw::c_char,
            flags: *mut PyCompilerFlags,
            errcode: *mut ::std::os::raw::c_int,
            arena: *mut PyArena,
        ) -> *mut _mod,
        ::libloading::Error,
    >,
    pub PyParser_SimpleParseStringFlags: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> *mut _node,
        ::libloading::Error,
    >,
    pub PyParser_SimpleParseStringFlagsFilename: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> *mut _node,
        ::libloading::Error,
    >,
    pub PyParser_SimpleParseFileFlags: Result<
        unsafe extern "C" fn(
            arg1: *mut FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> *mut _node,
        ::libloading::Error,
    >,
    pub PyRun_StringFlags: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut PyObject,
            arg4: *mut PyObject,
            arg5: *mut PyCompilerFlags,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyRun_FileExFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            filename: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            globals: *mut PyObject,
            locals: *mut PyObject,
            closeit: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub Py_CompileStringExFlags: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
            optimize: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub Py_CompileStringObject: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            filename: *mut PyObject,
            start: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
            optimize: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub Py_SymtableString: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
        ) -> *mut symtable,
        ::libloading::Error,
    >,
    pub _Py_SourceAsString: Result<
        unsafe extern "C" fn(
            cmd: *mut PyObject,
            funcname: *const ::std::os::raw::c_char,
            what: *const ::std::os::raw::c_char,
            cf: *mut PyCompilerFlags,
            cmd_copy: *mut *mut PyObject,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub Py_SymtableStringObject: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            filename: *mut PyObject,
            start: ::std::os::raw::c_int,
        ) -> *mut symtable,
        ::libloading::Error,
    >,
    pub _Py_SymtableStringObjectFlags: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            filename: *mut PyObject,
            start: ::std::os::raw::c_int,
            flags: *mut PyCompilerFlags,
        ) -> *mut symtable,
        ::libloading::Error,
    >,
    pub PyErr_Print: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyErr_PrintEx:
        Result<unsafe extern "C" fn(arg1: ::std::os::raw::c_int), ::libloading::Error>,
    pub PyErr_Display: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject),
        ::libloading::Error,
    >,
    pub PyRun_String: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            s: ::std::os::raw::c_int,
            g: *mut PyObject,
            l: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyRun_AnyFile: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_AnyFileEx: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            name: *const ::std::os::raw::c_char,
            closeit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_AnyFileFlags: Result<
        unsafe extern "C" fn(
            arg1: *mut FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut PyCompilerFlags,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_SimpleString: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_SimpleFile: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            p: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_SimpleFileEx: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            p: *const ::std::os::raw::c_char,
            c: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_InteractiveOne: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            p: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_InteractiveLoop: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            p: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyRun_File: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            p: *const ::std::os::raw::c_char,
            s: ::std::os::raw::c_int,
            g: *mut PyObject,
            l: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyRun_FileEx: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            p: *const ::std::os::raw::c_char,
            s: ::std::os::raw::c_int,
            g: *mut PyObject,
            l: *mut PyObject,
            c: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyRun_FileFlags: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            p: *const ::std::os::raw::c_char,
            s: ::std::os::raw::c_int,
            g: *mut PyObject,
            l: *mut PyObject,
            flags: *mut PyCompilerFlags,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyOS_Readline: Result<
        unsafe extern "C" fn(
            arg1: *mut FILE,
            arg2: *mut FILE,
            arg3: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub Py_Initialize: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub Py_InitializeEx:
        Result<unsafe extern "C" fn(arg1: ::std::os::raw::c_int), ::libloading::Error>,
    pub Py_Finalize: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub Py_FinalizeEx: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_IsInitialized:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_NewInterpreter:
        Result<unsafe extern "C" fn() -> *mut PyThreadState, ::libloading::Error>,
    pub Py_EndInterpreter:
        Result<unsafe extern "C" fn(arg1: *mut PyThreadState), ::libloading::Error>,
    pub Py_AtExit: Result<
        unsafe extern "C" fn(
            func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_Exit: Result<unsafe extern "C" fn(arg1: ::std::os::raw::c_int), ::libloading::Error>,
    pub Py_Main: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_FrozenMain: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_BytesMain: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_SetProgramName: Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub Py_GetProgramName: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_SetPythonHome: Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub Py_GetPythonHome: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_GetProgramFullPath: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_GetPrefix: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_GetExecPrefix: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_GetPath: Result<unsafe extern "C" fn() -> *mut wchar_t, ::libloading::Error>,
    pub Py_SetPath: Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub Py_GetVersion:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub Py_GetPlatform:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub Py_GetCopyright:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub Py_GetCompiler:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub Py_GetBuildInfo:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub PyOS_getsig: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> PyOS_sighandler_t,
        ::libloading::Error,
    >,
    pub PyOS_setsig: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: PyOS_sighandler_t,
        ) -> PyOS_sighandler_t,
        ::libloading::Error,
    >,
    pub Py_SetStandardStreamEncoding: Result<
        unsafe extern "C" fn(
            encoding: *const ::std::os::raw::c_char,
            errors: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_PreInitialize: Result<
        unsafe extern "C" fn(src_config: *const PyPreConfig) -> PyStatus,
        ::libloading::Error,
    >,
    pub Py_PreInitializeFromBytesArgs: Result<
        unsafe extern "C" fn(
            src_config: *const PyPreConfig,
            argc: Py_ssize_t,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub Py_PreInitializeFromArgs: Result<
        unsafe extern "C" fn(
            src_config: *const PyPreConfig,
            argc: Py_ssize_t,
            argv: *mut *mut wchar_t,
        ) -> PyStatus,
        ::libloading::Error,
    >,
    pub _Py_IsCoreInitialized:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_InitializeFromConfig:
        Result<unsafe extern "C" fn(config: *const PyConfig) -> PyStatus, ::libloading::Error>,
    pub _Py_InitializeMain: Result<unsafe extern "C" fn() -> PyStatus, ::libloading::Error>,
    pub Py_RunMain: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_ExitStatusException: Result<unsafe extern "C" fn(err: PyStatus), ::libloading::Error>,
    pub _Py_PyAtExit: Result<
        unsafe extern "C" fn(
            func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>,
            arg1: *mut PyObject,
        ),
        ::libloading::Error,
    >,
    pub _Py_RestoreSignals: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub Py_FdIsInteractive: Result<
        unsafe extern "C" fn(
            arg1: *mut FILE,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_SetProgramFullPath:
        Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub _Py_gitidentifier:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub _Py_gitversion:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub _Py_IsFinalizing:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyOS_URandom: Result<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyOS_URandomNonblock: Result<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_void,
            size: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_CoerceLegacyLocale: Result<
        unsafe extern "C" fn(warn: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_LegacyLocaleDetected: Result<
        unsafe extern "C" fn(warn: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_SetLocaleFromEnv: Result<
        unsafe extern "C" fn(category: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _Py_NewInterpreter: Result<
        unsafe extern "C" fn(isolated_subinterpreter: ::std::os::raw::c_int) -> *mut PyThreadState,
        ::libloading::Error,
    >,
    pub PyEval_CallObjectWithKeywords: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            args: *mut PyObject,
            kwargs: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_CallFunction: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_CallMethod: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_GetBuiltins: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyEval_GetGlobals: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyEval_GetLocals: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyEval_GetFrame: Result<unsafe extern "C" fn() -> *mut PyFrameObject, ::libloading::Error>,
    pub Py_AddPendingCall: Result<
        unsafe extern "C" fn(
            func: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_MakePendingCalls:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_SetRecursionLimit:
        Result<unsafe extern "C" fn(arg1: ::std::os::raw::c_int), ::libloading::Error>,
    pub Py_GetRecursionLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub Py_EnterRecursiveCall: Result<
        unsafe extern "C" fn(where_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_LeaveRecursiveCall: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyEval_GetFuncName: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyEval_GetFuncDesc: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PyEval_EvalFrame: Result<
        unsafe extern "C" fn(arg1: *mut PyFrameObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_EvalFrameEx: Result<
        unsafe extern "C" fn(f: *mut PyFrameObject, exc: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_SaveThread:
        Result<unsafe extern "C" fn() -> *mut PyThreadState, ::libloading::Error>,
    pub PyEval_RestoreThread:
        Result<unsafe extern "C" fn(arg1: *mut PyThreadState), ::libloading::Error>,
    pub PyEval_ThreadsInitialized:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyEval_InitThreads: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyEval_AcquireLock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyEval_ReleaseLock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyEval_AcquireThread:
        Result<unsafe extern "C" fn(tstate: *mut PyThreadState), ::libloading::Error>,
    pub PyEval_ReleaseThread:
        Result<unsafe extern "C" fn(tstate: *mut PyThreadState), ::libloading::Error>,
    pub PyEval_SetProfile:
        Result<unsafe extern "C" fn(arg1: Py_tracefunc, arg2: *mut PyObject), ::libloading::Error>,
    pub _PyEval_SetProfile: Result<
        unsafe extern "C" fn(
            tstate: *mut PyThreadState,
            func: Py_tracefunc,
            arg: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyEval_SetTrace:
        Result<unsafe extern "C" fn(arg1: Py_tracefunc, arg2: *mut PyObject), ::libloading::Error>,
    pub _PyEval_SetTrace: Result<
        unsafe extern "C" fn(
            tstate: *mut PyThreadState,
            func: Py_tracefunc,
            arg: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyEval_GetCoroutineOriginTrackingDepth:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyEval_SetAsyncGenFirstiter: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyEval_GetAsyncGenFirstiter:
        Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub _PyEval_SetAsyncGenFinalizer: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyEval_GetAsyncGenFinalizer:
        Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub _PyEval_GetBuiltinId: Result<
        unsafe extern "C" fn(arg1: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_MergeCompilerFlags: Result<
        unsafe extern "C" fn(cf: *mut PyCompilerFlags) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyEval_EvalFrameDefault: Result<
        unsafe extern "C" fn(
            tstate: *mut PyThreadState,
            f: *mut PyFrameObject,
            exc: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyEval_SetSwitchInterval:
        Result<unsafe extern "C" fn(microseconds: ::std::os::raw::c_ulong), ::libloading::Error>,
    pub _PyEval_GetSwitchInterval:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub _PyEval_RequestCodeExtraIndex:
        Result<unsafe extern "C" fn(arg1: freefunc) -> Py_ssize_t, ::libloading::Error>,
    pub _PyEval_SliceIndex: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyEval_SliceIndexNotNone: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySys_GetObject: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySys_SetObject: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySys_SetArgv: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut *mut wchar_t),
        ::libloading::Error,
    >,
    pub PySys_SetArgvEx: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut *mut wchar_t,
            arg3: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PySys_SetPath: Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub PySys_WriteStdout: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
        ::libloading::Error,
    >,
    pub PySys_WriteStderr: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
        ::libloading::Error,
    >,
    pub PySys_FormatStdout: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
        ::libloading::Error,
    >,
    pub PySys_FormatStderr: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
        ::libloading::Error,
    >,
    pub PySys_ResetWarnOptions: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PySys_AddWarnOption:
        Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub PySys_AddWarnOptionUnicode:
        Result<unsafe extern "C" fn(arg1: *mut PyObject), ::libloading::Error>,
    pub PySys_HasWarnOptions:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PySys_AddXOption: Result<unsafe extern "C" fn(arg1: *const wchar_t), ::libloading::Error>,
    pub PySys_GetXOptions: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub _PySys_GetObjectId: Result<
        unsafe extern "C" fn(key: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PySys_SetObjectId: Result<
        unsafe extern "C" fn(
            key: *mut _Py_Identifier,
            arg1: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PySys_GetSizeOf:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> size_t, ::libloading::Error>,
    pub PySys_Audit: Result<
        unsafe extern "C" fn(
            event: *const ::std::os::raw::c_char,
            argFormat: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySys_AddAuditHook: Result<
        unsafe extern "C" fn(
            arg1: Py_AuditHookFunction,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyOS_FSPath:
        Result<unsafe extern "C" fn(path: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyOS_InterruptOccurred:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PyOS_InitInterrupts: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyOS_BeforeFork: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyOS_AfterFork_Parent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyOS_AfterFork_Child: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyOS_AfterFork: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyOS_IsMainThread:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PySignal_AfterFork: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PyImport_GetMagicNumber:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub PyImport_GetMagicTag:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub PyImport_ExecCodeModule: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            co: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ExecCodeModuleEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            co: *mut PyObject,
            pathname: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ExecCodeModuleWithPathnames: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            co: *mut PyObject,
            pathname: *const ::std::os::raw::c_char,
            cpathname: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ExecCodeModuleObject: Result<
        unsafe extern "C" fn(
            name: *mut PyObject,
            co: *mut PyObject,
            pathname: *mut PyObject,
            cpathname: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_GetModuleDict:
        Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub PyImport_GetModule:
        Result<unsafe extern "C" fn(name: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyImport_AddModuleObject:
        Result<unsafe extern "C" fn(name: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyImport_AddModule: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ImportModule: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ImportModuleNoBlock: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ImportModuleLevel: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            globals: *mut PyObject,
            locals: *mut PyObject,
            fromlist: *mut PyObject,
            level: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_ImportModuleLevelObject: Result<
        unsafe extern "C" fn(
            name: *mut PyObject,
            globals: *mut PyObject,
            locals: *mut PyObject,
            fromlist: *mut PyObject,
            level: ::std::os::raw::c_int,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyImport_GetImporter:
        Result<unsafe extern "C" fn(path: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyImport_Import:
        Result<unsafe extern "C" fn(name: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyImport_ReloadModule:
        Result<unsafe extern "C" fn(m: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyImport_ImportFrozenModuleObject: Result<
        unsafe extern "C" fn(name: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyImport_ImportFrozenModule: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyImport_AppendInittab: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            initfunc: ::std::option::Option<unsafe extern "C" fn() -> *mut PyObject>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyInit__imp: Result<unsafe extern "C" fn() -> *mut PyObject, ::libloading::Error>,
    pub _PyImport_IsInitialized: Result<
        unsafe extern "C" fn(arg1: *mut PyInterpreterState) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyImport_GetModuleId: Result<
        unsafe extern "C" fn(name: *mut _Py_Identifier) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyImport_SetModule: Result<
        unsafe extern "C" fn(name: *mut PyObject, module: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyImport_SetModuleString: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            module: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyImport_AcquireLock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _PyImport_ReleaseLock:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _PyImport_FindExtensionObject: Result<
        unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyImport_FixupBuiltin: Result<
        unsafe extern "C" fn(
            mod_: *mut PyObject,
            name: *const ::std::os::raw::c_char,
            modules: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyImport_FixupExtensionObject: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
            arg4: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyImport_ExtendInittab: Result<
        unsafe extern "C" fn(newtab: *mut _inittab) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_CallNoArgs:
        Result<unsafe extern "C" fn(func: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_Call: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            args: *mut PyObject,
            kwargs: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_CallObject: Result<
        unsafe extern "C" fn(callable: *mut PyObject, args: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_CallFunction: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_CallMethod: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_CallFunction_SizeT: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_CallMethod_SizeT: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_CallFunctionObjArgs: Result<
        unsafe extern "C" fn(callable: *mut PyObject, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_CallMethodObjArgs: Result<
        unsafe extern "C" fn(obj: *mut PyObject, name: *mut PyObject, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_Type:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyObject_Size:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyObject_Length:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyObject_GetItem: Result<
        unsafe extern "C" fn(o: *mut PyObject, key: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_SetItem: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            key: *mut PyObject,
            v: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_DelItemString: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            key: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_DelItem: Result<
        unsafe extern "C" fn(o: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_AsCharBuffer: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            buffer: *mut *const ::std::os::raw::c_char,
            buffer_len: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_CheckReadBuffer: Result<
        unsafe extern "C" fn(obj: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_AsReadBuffer: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            buffer: *mut *const ::std::os::raw::c_void,
            buffer_len: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_AsWriteBuffer: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            buffer: *mut *mut ::std::os::raw::c_void,
            buffer_len: *mut Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_Format: Result<
        unsafe extern "C" fn(obj: *mut PyObject, format_spec: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_GetIter:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyIter_Check: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyIter_Next:
        Result<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Check: Result<
        unsafe extern "C" fn(o: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyNumber_Add: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Subtract: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Multiply: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_MatrixMultiply: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_FloorDivide: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_TrueDivide: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Remainder: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Divmod: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Power: Result<
        unsafe extern "C" fn(
            o1: *mut PyObject,
            o2: *mut PyObject,
            o3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Negative:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Positive:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Absolute:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Invert:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Lshift: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Rshift: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_And: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Xor: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_Or: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyIndex_Check: Result<
        unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyNumber_Index:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_AsSsize_t: Result<
        unsafe extern "C" fn(o: *mut PyObject, exc: *mut PyObject) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyNumber_Long:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_Float:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyNumber_InPlaceAdd: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceSubtract: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceMultiply: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceMatrixMultiply: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceFloorDivide: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceTrueDivide: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceRemainder: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlacePower: Result<
        unsafe extern "C" fn(
            o1: *mut PyObject,
            o2: *mut PyObject,
            o3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceLshift: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceRshift: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceAnd: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceXor: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_InPlaceOr: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyNumber_ToBase: Result<
        unsafe extern "C" fn(n: *mut PyObject, base: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_Check: Result<
        unsafe extern "C" fn(o: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_Size:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PySequence_Length:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PySequence_Concat: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_Repeat: Result<
        unsafe extern "C" fn(o: *mut PyObject, count: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_GetItem: Result<
        unsafe extern "C" fn(o: *mut PyObject, i: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_GetSlice: Result<
        unsafe extern "C" fn(o: *mut PyObject, i1: Py_ssize_t, i2: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_SetItem: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            i: Py_ssize_t,
            v: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_DelItem: Result<
        unsafe extern "C" fn(o: *mut PyObject, i: Py_ssize_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_SetSlice: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            i1: Py_ssize_t,
            i2: Py_ssize_t,
            v: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_DelSlice: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            i1: Py_ssize_t,
            i2: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_Tuple:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PySequence_List:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PySequence_Fast: Result<
        unsafe extern "C" fn(o: *mut PyObject, m: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_Count: Result<
        unsafe extern "C" fn(o: *mut PyObject, value: *mut PyObject) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PySequence_Contains: Result<
        unsafe extern "C" fn(seq: *mut PyObject, ob: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_In: Result<
        unsafe extern "C" fn(o: *mut PyObject, value: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PySequence_Index: Result<
        unsafe extern "C" fn(o: *mut PyObject, value: *mut PyObject) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PySequence_InPlaceConcat: Result<
        unsafe extern "C" fn(o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PySequence_InPlaceRepeat: Result<
        unsafe extern "C" fn(o: *mut PyObject, count: Py_ssize_t) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyMapping_Check: Result<
        unsafe extern "C" fn(o: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyMapping_Size:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyMapping_Length:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> Py_ssize_t, ::libloading::Error>,
    pub PyMapping_HasKeyString: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            key: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyMapping_HasKey: Result<
        unsafe extern "C" fn(o: *mut PyObject, key: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyMapping_Keys:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMapping_Values:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMapping_Items:
        Result<unsafe extern "C" fn(o: *mut PyObject) -> *mut PyObject, ::libloading::Error>,
    pub PyMapping_GetItemString: Result<
        unsafe extern "C" fn(o: *mut PyObject, key: *const ::std::os::raw::c_char) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyMapping_SetItemString: Result<
        unsafe extern "C" fn(
            o: *mut PyObject,
            key: *const ::std::os::raw::c_char,
            value: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_IsInstance: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            typeorclass: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_IsSubclass: Result<
        unsafe extern "C" fn(
            object: *mut PyObject,
            typeorclass: *mut PyObject,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyStack_AsDict: Result<
        unsafe extern "C" fn(values: *const *mut PyObject, kwnames: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_CheckFunctionResult: Result<
        unsafe extern "C" fn(
            tstate: *mut PyThreadState,
            callable: *mut PyObject,
            result: *mut PyObject,
            where_: *const ::std::os::raw::c_char,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_MakeTpCall: Result<
        unsafe extern "C" fn(
            tstate: *mut PyThreadState,
            callable: *mut PyObject,
            args: *const *mut PyObject,
            nargs: Py_ssize_t,
            keywords: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_VectorcallDict: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            args: *const *mut PyObject,
            nargsf: size_t,
            kwargs: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyVectorcall_Call: Result<
        unsafe extern "C" fn(
            callable: *mut PyObject,
            tuple: *mut PyObject,
            dict: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyObject_VectorcallMethod: Result<
        unsafe extern "C" fn(
            name: *mut PyObject,
            args: *const *mut PyObject,
            nargsf: size_t,
            kwnames: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_CallMethodId: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *mut _Py_Identifier,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_CallMethodId_SizeT: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            name: *mut _Py_Identifier,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_CallMethodIdObjArgs: Result<
        unsafe extern "C" fn(obj: *mut PyObject, name: *mut _Py_Identifier, ...) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyObject_HasLen: Result<
        unsafe extern "C" fn(o: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_LengthHint: Result<
        unsafe extern "C" fn(o: *mut PyObject, arg1: Py_ssize_t) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyObject_CheckBuffer: Result<
        unsafe extern "C" fn(obj: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_GetBuffer: Result<
        unsafe extern "C" fn(
            obj: *mut PyObject,
            view: *mut Py_buffer,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBuffer_GetPointer: Result<
        unsafe extern "C" fn(
            view: *mut Py_buffer,
            indices: *mut Py_ssize_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub PyBuffer_SizeFromFormat: Result<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub PyBuffer_ToContiguous: Result<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_void,
            view: *mut Py_buffer,
            len: Py_ssize_t,
            order: ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBuffer_FromContiguous: Result<
        unsafe extern "C" fn(
            view: *mut Py_buffer,
            buf: *mut ::std::os::raw::c_void,
            len: Py_ssize_t,
            order: ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyObject_CopyData: Result<
        unsafe extern "C" fn(dest: *mut PyObject, src: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBuffer_IsContiguous: Result<
        unsafe extern "C" fn(
            view: *const Py_buffer,
            fort: ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBuffer_FillContiguousStrides: Result<
        unsafe extern "C" fn(
            ndims: ::std::os::raw::c_int,
            shape: *mut Py_ssize_t,
            strides: *mut Py_ssize_t,
            itemsize: ::std::os::raw::c_int,
            fort: ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub PyBuffer_FillInfo: Result<
        unsafe extern "C" fn(
            view: *mut Py_buffer,
            o: *mut PyObject,
            buf: *mut ::std::os::raw::c_void,
            len: Py_ssize_t,
            readonly: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyBuffer_Release: Result<unsafe extern "C" fn(view: *mut Py_buffer), ::libloading::Error>,
    pub _PySequence_IterSearch: Result<
        unsafe extern "C" fn(
            seq: *mut PyObject,
            obj: *mut PyObject,
            operation: ::std::os::raw::c_int,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _PyObject_RealIsInstance: Result<
        unsafe extern "C" fn(inst: *mut PyObject, cls: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyObject_RealIsSubclass: Result<
        unsafe extern "C" fn(derived: *mut PyObject, cls: *mut PyObject) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PySequence_BytesToCharpArray: Result<
        unsafe extern "C" fn(self_: *mut PyObject) -> *const *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _Py_FreeCharPArray: Result<
        unsafe extern "C" fn(array: *const *mut ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub _Py_add_one_to_index_F: Result<
        unsafe extern "C" fn(
            nd: ::std::os::raw::c_int,
            index: *mut Py_ssize_t,
            shape: *const Py_ssize_t,
        ),
        ::libloading::Error,
    >,
    pub _Py_add_one_to_index_C: Result<
        unsafe extern "C" fn(
            nd: ::std::os::raw::c_int,
            index: *mut Py_ssize_t,
            shape: *const Py_ssize_t,
        ),
        ::libloading::Error,
    >,
    pub _Py_convert_optional_to_ssize_t: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyEval_EvalCode: Result<
        unsafe extern "C" fn(
            arg1: *mut PyObject,
            arg2: *mut PyObject,
            arg3: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyEval_EvalCodeEx: Result<
        unsafe extern "C" fn(
            co: *mut PyObject,
            globals: *mut PyObject,
            locals: *mut PyObject,
            args: *const *mut PyObject,
            argc: ::std::os::raw::c_int,
            kwds: *const *mut PyObject,
            kwdc: ::std::os::raw::c_int,
            defs: *const *mut PyObject,
            defc: ::std::os::raw::c_int,
            kwdefs: *mut PyObject,
            closure: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyEval_EvalCodeWithName: Result<
        unsafe extern "C" fn(
            co: *mut PyObject,
            globals: *mut PyObject,
            locals: *mut PyObject,
            args: *const *mut PyObject,
            argcount: Py_ssize_t,
            kwnames: *const *mut PyObject,
            kwargs: *const *mut PyObject,
            kwcount: Py_ssize_t,
            kwstep: ::std::os::raw::c_int,
            defs: *const *mut PyObject,
            defcount: Py_ssize_t,
            kwdefs: *mut PyObject,
            closure: *mut PyObject,
            name: *mut PyObject,
            qualname: *mut PyObject,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _PyEval_CallTracing: Result<
        unsafe extern "C" fn(func: *mut PyObject, args: *mut PyObject) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub PyOS_string_to_double: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            endptr: *mut *mut ::std::os::raw::c_char,
            overflow_exception: *mut PyObject,
        ) -> f64,
        ::libloading::Error,
    >,
    pub PyOS_double_to_string: Result<
        unsafe extern "C" fn(
            val: f64,
            format_code: ::std::os::raw::c_char,
            precision: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            type_: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _Py_string_to_number_with_underscores: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            len: Py_ssize_t,
            what: *const ::std::os::raw::c_char,
            obj: *mut PyObject,
            arg: *mut ::std::os::raw::c_void,
            innerfunc: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_char,
                    arg2: Py_ssize_t,
                    arg3: *mut ::std::os::raw::c_void,
                ) -> *mut PyObject,
            >,
        ) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_parse_inf_or_nan: Result<
        unsafe extern "C" fn(
            p: *const ::std::os::raw::c_char,
            endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub PyOS_mystrnicmp: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: Py_ssize_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyOS_mystricmp: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub Py_DecodeLocale: Result<
        unsafe extern "C" fn(arg: *const ::std::os::raw::c_char, size: *mut size_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub Py_EncodeLocale: Result<
        unsafe extern "C" fn(
            text: *const wchar_t,
            error_pos: *mut size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _Py_EncodeLocaleRaw: Result<
        unsafe extern "C" fn(
            text: *const wchar_t,
            error_pos: *mut size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _Py_GetErrorHandler: Result<
        unsafe extern "C" fn(errors: *const ::std::os::raw::c_char) -> _Py_error_handler,
        ::libloading::Error,
    >,
    pub _Py_DecodeLocaleEx: Result<
        unsafe extern "C" fn(
            arg: *const ::std::os::raw::c_char,
            wstr: *mut *mut wchar_t,
            wlen: *mut size_t,
            reason: *mut *const ::std::os::raw::c_char,
            current_locale: ::std::os::raw::c_int,
            errors: _Py_error_handler,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_EncodeLocaleEx: Result<
        unsafe extern "C" fn(
            text: *const wchar_t,
            str_: *mut *mut ::std::os::raw::c_char,
            error_pos: *mut size_t,
            reason: *mut *const ::std::os::raw::c_char,
            current_locale: ::std::os::raw::c_int,
            errors: _Py_error_handler,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_device_encoding: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut PyObject,
        ::libloading::Error,
    >,
    pub _Py_fstat: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int, status: *mut stat) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_fstat_noraise: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int, status: *mut stat) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_stat: Result<
        unsafe extern "C" fn(path: *mut PyObject, status: *mut stat) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_open: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_open_noraise: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_wfopen: Result<
        unsafe extern "C" fn(path: *const wchar_t, mode: *const wchar_t) -> *mut FILE,
        ::libloading::Error,
    >,
    pub _Py_fopen: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub _Py_fopen_obj: Result<
        unsafe extern "C" fn(path: *mut PyObject, mode: *const ::std::os::raw::c_char) -> *mut FILE,
        ::libloading::Error,
    >,
    pub _Py_read: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            buf: *mut ::std::os::raw::c_void,
            count: size_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _Py_write: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            buf: *const ::std::os::raw::c_void,
            count: size_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _Py_write_noraise: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            buf: *const ::std::os::raw::c_void,
            count: size_t,
        ) -> Py_ssize_t,
        ::libloading::Error,
    >,
    pub _Py_wreadlink: Result<
        unsafe extern "C" fn(
            path: *const wchar_t,
            buf: *mut wchar_t,
            buflen: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_wrealpath: Result<
        unsafe extern "C" fn(
            path: *const wchar_t,
            resolved_path: *mut wchar_t,
            resolved_path_len: size_t,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _Py_isabs: Result<
        unsafe extern "C" fn(path: *const wchar_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_abspath: Result<
        unsafe extern "C" fn(
            path: *const wchar_t,
            abspath_p: *mut *mut wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_wgetcwd: Result<
        unsafe extern "C" fn(buf: *mut wchar_t, buflen: size_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _Py_get_inheritable: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_set_inheritable: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            inheritable: ::std::os::raw::c_int,
            atomic_flag_works: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_set_inheritable_async_safe: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            inheritable: ::std::os::raw::c_int,
            atomic_flag_works: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_dup: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_get_blocking: Result<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _Py_set_blocking: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            blocking: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyTraceMalloc_Track: Result<
        unsafe extern "C" fn(
            domain: ::std::os::raw::c_uint,
            ptr: usize,
            size: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PyTraceMalloc_Untrack: Result<
        unsafe extern "C" fn(domain: ::std::os::raw::c_uint, ptr: usize) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _PyTraceMalloc_GetTraceback: Result<
        unsafe extern "C" fn(domain: ::std::os::raw::c_uint, ptr: usize) -> *mut PyObject,
        ::libloading::Error,
    >,
}
impl PythonLib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let _Py_get_387controlword = __library.get(b"_Py_get_387controlword\0").map(|sym| *sym);
        let _Py_set_387controlword = __library.get(b"_Py_set_387controlword\0").map(|sym| *sym);
        let _Py_bit_length = __library.get(b"_Py_bit_length\0").map(|sym| *sym);
        let PyType_FromSpec = __library.get(b"PyType_FromSpec\0").map(|sym| *sym);
        let PyType_FromSpecWithBases = __library.get(b"PyType_FromSpecWithBases\0").map(|sym| *sym);
        let PyType_GetSlot = __library.get(b"PyType_GetSlot\0").map(|sym| *sym);
        let PyType_FromModuleAndSpec = __library.get(b"PyType_FromModuleAndSpec\0").map(|sym| *sym);
        let PyType_GetModule = __library.get(b"PyType_GetModule\0").map(|sym| *sym);
        let PyType_GetModuleState = __library.get(b"PyType_GetModuleState\0").map(|sym| *sym);
        let PyType_IsSubtype = __library.get(b"PyType_IsSubtype\0").map(|sym| *sym);
        let PyType_GetFlags = __library.get(b"PyType_GetFlags\0").map(|sym| *sym);
        let PyType_Ready = __library.get(b"PyType_Ready\0").map(|sym| *sym);
        let PyType_GenericAlloc = __library.get(b"PyType_GenericAlloc\0").map(|sym| *sym);
        let PyType_GenericNew = __library.get(b"PyType_GenericNew\0").map(|sym| *sym);
        let PyType_ClearCache = __library.get(b"PyType_ClearCache\0").map(|sym| *sym);
        let PyType_Modified = __library.get(b"PyType_Modified\0").map(|sym| *sym);
        let PyObject_Repr = __library.get(b"PyObject_Repr\0").map(|sym| *sym);
        let PyObject_Str = __library.get(b"PyObject_Str\0").map(|sym| *sym);
        let PyObject_ASCII = __library.get(b"PyObject_ASCII\0").map(|sym| *sym);
        let PyObject_Bytes = __library.get(b"PyObject_Bytes\0").map(|sym| *sym);
        let PyObject_RichCompare = __library.get(b"PyObject_RichCompare\0").map(|sym| *sym);
        let PyObject_RichCompareBool = __library.get(b"PyObject_RichCompareBool\0").map(|sym| *sym);
        let PyObject_GetAttrString = __library.get(b"PyObject_GetAttrString\0").map(|sym| *sym);
        let PyObject_SetAttrString = __library.get(b"PyObject_SetAttrString\0").map(|sym| *sym);
        let PyObject_HasAttrString = __library.get(b"PyObject_HasAttrString\0").map(|sym| *sym);
        let PyObject_GetAttr = __library.get(b"PyObject_GetAttr\0").map(|sym| *sym);
        let PyObject_SetAttr = __library.get(b"PyObject_SetAttr\0").map(|sym| *sym);
        let PyObject_HasAttr = __library.get(b"PyObject_HasAttr\0").map(|sym| *sym);
        let PyObject_SelfIter = __library.get(b"PyObject_SelfIter\0").map(|sym| *sym);
        let PyObject_GenericGetAttr = __library.get(b"PyObject_GenericGetAttr\0").map(|sym| *sym);
        let PyObject_GenericSetAttr = __library.get(b"PyObject_GenericSetAttr\0").map(|sym| *sym);
        let PyObject_GenericSetDict = __library.get(b"PyObject_GenericSetDict\0").map(|sym| *sym);
        let PyObject_Hash = __library.get(b"PyObject_Hash\0").map(|sym| *sym);
        let PyObject_HashNotImplemented = __library
            .get(b"PyObject_HashNotImplemented\0")
            .map(|sym| *sym);
        let PyObject_IsTrue = __library.get(b"PyObject_IsTrue\0").map(|sym| *sym);
        let PyObject_Not = __library.get(b"PyObject_Not\0").map(|sym| *sym);
        let PyCallable_Check = __library.get(b"PyCallable_Check\0").map(|sym| *sym);
        let PyObject_ClearWeakRefs = __library.get(b"PyObject_ClearWeakRefs\0").map(|sym| *sym);
        let PyObject_Dir = __library.get(b"PyObject_Dir\0").map(|sym| *sym);
        let Py_ReprEnter = __library.get(b"Py_ReprEnter\0").map(|sym| *sym);
        let Py_ReprLeave = __library.get(b"Py_ReprLeave\0").map(|sym| *sym);
        let _Py_Dealloc = __library.get(b"_Py_Dealloc\0").map(|sym| *sym);
        let Py_IncRef = __library.get(b"Py_IncRef\0").map(|sym| *sym);
        let Py_DecRef = __library.get(b"Py_DecRef\0").map(|sym| *sym);
        let _Py_NewReference = __library.get(b"_Py_NewReference\0").map(|sym| *sym);
        let _PyTraceMalloc_NewReference = __library
            .get(b"_PyTraceMalloc_NewReference\0")
            .map(|sym| *sym);
        let _PyType_Name = __library.get(b"_PyType_Name\0").map(|sym| *sym);
        let _PyType_Lookup = __library.get(b"_PyType_Lookup\0").map(|sym| *sym);
        let _PyType_LookupId = __library.get(b"_PyType_LookupId\0").map(|sym| *sym);
        let _PyObject_LookupSpecial = __library.get(b"_PyObject_LookupSpecial\0").map(|sym| *sym);
        let _PyType_CalculateMetaclass = __library
            .get(b"_PyType_CalculateMetaclass\0")
            .map(|sym| *sym);
        let _PyType_GetDocFromInternalDoc = __library
            .get(b"_PyType_GetDocFromInternalDoc\0")
            .map(|sym| *sym);
        let _PyType_GetTextSignatureFromInternalDoc = __library
            .get(b"_PyType_GetTextSignatureFromInternalDoc\0")
            .map(|sym| *sym);
        let PyObject_Print = __library.get(b"PyObject_Print\0").map(|sym| *sym);
        let _Py_BreakPoint = __library.get(b"_Py_BreakPoint\0").map(|sym| *sym);
        let _PyObject_Dump = __library.get(b"_PyObject_Dump\0").map(|sym| *sym);
        let _PyObject_IsFreed = __library.get(b"_PyObject_IsFreed\0").map(|sym| *sym);
        let _PyObject_IsAbstract = __library.get(b"_PyObject_IsAbstract\0").map(|sym| *sym);
        let _PyObject_GetAttrId = __library.get(b"_PyObject_GetAttrId\0").map(|sym| *sym);
        let _PyObject_SetAttrId = __library.get(b"_PyObject_SetAttrId\0").map(|sym| *sym);
        let _PyObject_HasAttrId = __library.get(b"_PyObject_HasAttrId\0").map(|sym| *sym);
        let _PyObject_LookupAttr = __library.get(b"_PyObject_LookupAttr\0").map(|sym| *sym);
        let _PyObject_LookupAttrId = __library.get(b"_PyObject_LookupAttrId\0").map(|sym| *sym);
        let _PyObject_GetMethod = __library.get(b"_PyObject_GetMethod\0").map(|sym| *sym);
        let _PyObject_GetDictPtr = __library.get(b"_PyObject_GetDictPtr\0").map(|sym| *sym);
        let _PyObject_NextNotImplemented = __library
            .get(b"_PyObject_NextNotImplemented\0")
            .map(|sym| *sym);
        let PyObject_CallFinalizer = __library.get(b"PyObject_CallFinalizer\0").map(|sym| *sym);
        let PyObject_CallFinalizerFromDealloc = __library
            .get(b"PyObject_CallFinalizerFromDealloc\0")
            .map(|sym| *sym);
        let _PyObject_GenericGetAttrWithDict = __library
            .get(b"_PyObject_GenericGetAttrWithDict\0")
            .map(|sym| *sym);
        let _PyObject_GenericSetAttrWithDict = __library
            .get(b"_PyObject_GenericSetAttrWithDict\0")
            .map(|sym| *sym);
        let _PyObject_FunctionStr = __library.get(b"_PyObject_FunctionStr\0").map(|sym| *sym);
        let _PyDebugAllocatorStats = __library.get(b"_PyDebugAllocatorStats\0").map(|sym| *sym);
        let _PyObject_DebugTypeStats = __library.get(b"_PyObject_DebugTypeStats\0").map(|sym| *sym);
        let _PyObject_AssertFailed = __library.get(b"_PyObject_AssertFailed\0").map(|sym| *sym);
        let _PyObject_CheckConsistency = __library
            .get(b"_PyObject_CheckConsistency\0")
            .map(|sym| *sym);
        let _PyTrash_deposit_object = __library.get(b"_PyTrash_deposit_object\0").map(|sym| *sym);
        let _PyTrash_destroy_chain = __library.get(b"_PyTrash_destroy_chain\0").map(|sym| *sym);
        let _PyTrash_thread_deposit_object = __library
            .get(b"_PyTrash_thread_deposit_object\0")
            .map(|sym| *sym);
        let _PyTrash_thread_destroy_chain = __library
            .get(b"_PyTrash_thread_destroy_chain\0")
            .map(|sym| *sym);
        let _PyTrash_begin = __library.get(b"_PyTrash_begin\0").map(|sym| *sym);
        let _PyTrash_end = __library.get(b"_PyTrash_end\0").map(|sym| *sym);
        let _PyLong_FromTime_t = __library.get(b"_PyLong_FromTime_t\0").map(|sym| *sym);
        let _PyLong_AsTime_t = __library.get(b"_PyLong_AsTime_t\0").map(|sym| *sym);
        let _PyTime_ObjectToTime_t = __library.get(b"_PyTime_ObjectToTime_t\0").map(|sym| *sym);
        let _PyTime_ObjectToTimeval = __library.get(b"_PyTime_ObjectToTimeval\0").map(|sym| *sym);
        let _PyTime_ObjectToTimespec = __library.get(b"_PyTime_ObjectToTimespec\0").map(|sym| *sym);
        let _PyTime_FromSeconds = __library.get(b"_PyTime_FromSeconds\0").map(|sym| *sym);
        let _PyTime_FromNanoseconds = __library.get(b"_PyTime_FromNanoseconds\0").map(|sym| *sym);
        let _PyTime_FromNanosecondsObject = __library
            .get(b"_PyTime_FromNanosecondsObject\0")
            .map(|sym| *sym);
        let _PyTime_FromSecondsObject = __library
            .get(b"_PyTime_FromSecondsObject\0")
            .map(|sym| *sym);
        let _PyTime_FromMillisecondsObject = __library
            .get(b"_PyTime_FromMillisecondsObject\0")
            .map(|sym| *sym);
        let _PyTime_AsSecondsDouble = __library.get(b"_PyTime_AsSecondsDouble\0").map(|sym| *sym);
        let _PyTime_AsMilliseconds = __library.get(b"_PyTime_AsMilliseconds\0").map(|sym| *sym);
        let _PyTime_AsMicroseconds = __library.get(b"_PyTime_AsMicroseconds\0").map(|sym| *sym);
        let _PyTime_AsNanosecondsObject = __library
            .get(b"_PyTime_AsNanosecondsObject\0")
            .map(|sym| *sym);
        let _PyTime_FromTimeval = __library.get(b"_PyTime_FromTimeval\0").map(|sym| *sym);
        let _PyTime_AsTimeval = __library.get(b"_PyTime_AsTimeval\0").map(|sym| *sym);
        let _PyTime_AsTimeval_noraise = __library
            .get(b"_PyTime_AsTimeval_noraise\0")
            .map(|sym| *sym);
        let _PyTime_AsTimevalTime_t = __library.get(b"_PyTime_AsTimevalTime_t\0").map(|sym| *sym);
        let _PyTime_FromTimespec = __library.get(b"_PyTime_FromTimespec\0").map(|sym| *sym);
        let _PyTime_AsTimespec = __library.get(b"_PyTime_AsTimespec\0").map(|sym| *sym);
        let _PyTime_MulDiv = __library.get(b"_PyTime_MulDiv\0").map(|sym| *sym);
        let _PyTime_GetSystemClock = __library.get(b"_PyTime_GetSystemClock\0").map(|sym| *sym);
        let _PyTime_GetMonotonicClock = __library
            .get(b"_PyTime_GetMonotonicClock\0")
            .map(|sym| *sym);
        let _PyTime_GetSystemClockWithInfo = __library
            .get(b"_PyTime_GetSystemClockWithInfo\0")
            .map(|sym| *sym);
        let _PyTime_GetMonotonicClockWithInfo = __library
            .get(b"_PyTime_GetMonotonicClockWithInfo\0")
            .map(|sym| *sym);
        let _PyTime_Init = __library.get(b"_PyTime_Init\0").map(|sym| *sym);
        let _PyTime_localtime = __library.get(b"_PyTime_localtime\0").map(|sym| *sym);
        let _PyTime_gmtime = __library.get(b"_PyTime_gmtime\0").map(|sym| *sym);
        let _PyTime_GetPerfCounter = __library.get(b"_PyTime_GetPerfCounter\0").map(|sym| *sym);
        let _PyTime_GetPerfCounterWithInfo = __library
            .get(b"_PyTime_GetPerfCounterWithInfo\0")
            .map(|sym| *sym);
        let PyMem_Malloc = __library.get(b"PyMem_Malloc\0").map(|sym| *sym);
        let PyMem_Realloc = __library.get(b"PyMem_Realloc\0").map(|sym| *sym);
        let PyMem_Free = __library.get(b"PyMem_Free\0").map(|sym| *sym);
        let PyMem_RawMalloc = __library.get(b"PyMem_RawMalloc\0").map(|sym| *sym);
        let PyMem_RawCalloc = __library.get(b"PyMem_RawCalloc\0").map(|sym| *sym);
        let PyMem_RawRealloc = __library.get(b"PyMem_RawRealloc\0").map(|sym| *sym);
        let PyMem_RawFree = __library.get(b"PyMem_RawFree\0").map(|sym| *sym);
        let _PyMem_GetCurrentAllocatorName = __library
            .get(b"_PyMem_GetCurrentAllocatorName\0")
            .map(|sym| *sym);
        let PyMem_Calloc = __library.get(b"PyMem_Calloc\0").map(|sym| *sym);
        let _PyMem_RawStrdup = __library.get(b"_PyMem_RawStrdup\0").map(|sym| *sym);
        let _PyMem_Strdup = __library.get(b"_PyMem_Strdup\0").map(|sym| *sym);
        let _PyMem_RawWcsdup = __library.get(b"_PyMem_RawWcsdup\0").map(|sym| *sym);
        let PyMem_GetAllocator = __library.get(b"PyMem_GetAllocator\0").map(|sym| *sym);
        let PyMem_SetAllocator = __library.get(b"PyMem_SetAllocator\0").map(|sym| *sym);
        let PyMem_SetupDebugHooks = __library.get(b"PyMem_SetupDebugHooks\0").map(|sym| *sym);
        let PyObject_Malloc = __library.get(b"PyObject_Malloc\0").map(|sym| *sym);
        let PyObject_Calloc = __library.get(b"PyObject_Calloc\0").map(|sym| *sym);
        let PyObject_Realloc = __library.get(b"PyObject_Realloc\0").map(|sym| *sym);
        let PyObject_Free = __library.get(b"PyObject_Free\0").map(|sym| *sym);
        let PyObject_Init = __library.get(b"PyObject_Init\0").map(|sym| *sym);
        let PyObject_InitVar = __library.get(b"PyObject_InitVar\0").map(|sym| *sym);
        let _PyObject_New = __library.get(b"_PyObject_New\0").map(|sym| *sym);
        let _PyObject_NewVar = __library.get(b"_PyObject_NewVar\0").map(|sym| *sym);
        let PyGC_Collect = __library.get(b"PyGC_Collect\0").map(|sym| *sym);
        let _PyObject_GC_Resize = __library.get(b"_PyObject_GC_Resize\0").map(|sym| *sym);
        let _PyObject_GC_New = __library.get(b"_PyObject_GC_New\0").map(|sym| *sym);
        let _PyObject_GC_NewVar = __library.get(b"_PyObject_GC_NewVar\0").map(|sym| *sym);
        let PyObject_GC_Track = __library.get(b"PyObject_GC_Track\0").map(|sym| *sym);
        let PyObject_GC_UnTrack = __library.get(b"PyObject_GC_UnTrack\0").map(|sym| *sym);
        let PyObject_GC_Del = __library.get(b"PyObject_GC_Del\0").map(|sym| *sym);
        let PyObject_GC_IsTracked = __library.get(b"PyObject_GC_IsTracked\0").map(|sym| *sym);
        let PyObject_GC_IsFinalized = __library.get(b"PyObject_GC_IsFinalized\0").map(|sym| *sym);
        let _Py_GetAllocatedBlocks = __library.get(b"_Py_GetAllocatedBlocks\0").map(|sym| *sym);
        let _PyObject_DebugMallocStats = __library
            .get(b"_PyObject_DebugMallocStats\0")
            .map(|sym| *sym);
        let PyObject_GetArenaAllocator = __library
            .get(b"PyObject_GetArenaAllocator\0")
            .map(|sym| *sym);
        let PyObject_SetArenaAllocator = __library
            .get(b"PyObject_SetArenaAllocator\0")
            .map(|sym| *sym);
        let _PyGC_CollectNoFail = __library.get(b"_PyGC_CollectNoFail\0").map(|sym| *sym);
        let _PyGC_CollectIfEnabled = __library.get(b"_PyGC_CollectIfEnabled\0").map(|sym| *sym);
        let PyObject_IS_GC = __library.get(b"PyObject_IS_GC\0").map(|sym| *sym);
        let _PyObject_GC_Malloc = __library.get(b"_PyObject_GC_Malloc\0").map(|sym| *sym);
        let _PyObject_GC_Calloc = __library.get(b"_PyObject_GC_Calloc\0").map(|sym| *sym);
        let PyObject_GET_WEAKREFS_LISTPTR = __library
            .get(b"PyObject_GET_WEAKREFS_LISTPTR\0")
            .map(|sym| *sym);
        let _Py_HashDouble = __library.get(b"_Py_HashDouble\0").map(|sym| *sym);
        let _Py_HashPointer = __library.get(b"_Py_HashPointer\0").map(|sym| *sym);
        let _Py_HashPointerRaw = __library.get(b"_Py_HashPointerRaw\0").map(|sym| *sym);
        let _Py_HashBytes = __library.get(b"_Py_HashBytes\0").map(|sym| *sym);
        let PyHash_GetFuncDef = __library.get(b"PyHash_GetFuncDef\0").map(|sym| *sym);
        let PyByteArray_FromObject = __library.get(b"PyByteArray_FromObject\0").map(|sym| *sym);
        let PyByteArray_Concat = __library.get(b"PyByteArray_Concat\0").map(|sym| *sym);
        let PyByteArray_FromStringAndSize = __library
            .get(b"PyByteArray_FromStringAndSize\0")
            .map(|sym| *sym);
        let PyByteArray_Size = __library.get(b"PyByteArray_Size\0").map(|sym| *sym);
        let PyByteArray_AsString = __library.get(b"PyByteArray_AsString\0").map(|sym| *sym);
        let PyByteArray_Resize = __library.get(b"PyByteArray_Resize\0").map(|sym| *sym);
        let PyBytes_FromStringAndSize = __library
            .get(b"PyBytes_FromStringAndSize\0")
            .map(|sym| *sym);
        let PyBytes_FromString = __library.get(b"PyBytes_FromString\0").map(|sym| *sym);
        let PyBytes_FromObject = __library.get(b"PyBytes_FromObject\0").map(|sym| *sym);
        let PyBytes_FromFormatV = __library.get(b"PyBytes_FromFormatV\0").map(|sym| *sym);
        let PyBytes_FromFormat = __library.get(b"PyBytes_FromFormat\0").map(|sym| *sym);
        let PyBytes_Size = __library.get(b"PyBytes_Size\0").map(|sym| *sym);
        let PyBytes_AsString = __library.get(b"PyBytes_AsString\0").map(|sym| *sym);
        let PyBytes_Repr = __library.get(b"PyBytes_Repr\0").map(|sym| *sym);
        let PyBytes_Concat = __library.get(b"PyBytes_Concat\0").map(|sym| *sym);
        let PyBytes_ConcatAndDel = __library.get(b"PyBytes_ConcatAndDel\0").map(|sym| *sym);
        let PyBytes_DecodeEscape = __library.get(b"PyBytes_DecodeEscape\0").map(|sym| *sym);
        let PyBytes_AsStringAndSize = __library.get(b"PyBytes_AsStringAndSize\0").map(|sym| *sym);
        let _PyBytes_Resize = __library.get(b"_PyBytes_Resize\0").map(|sym| *sym);
        let _PyBytes_FormatEx = __library.get(b"_PyBytes_FormatEx\0").map(|sym| *sym);
        let _PyBytes_FromHex = __library.get(b"_PyBytes_FromHex\0").map(|sym| *sym);
        let _PyBytes_DecodeEscape = __library.get(b"_PyBytes_DecodeEscape\0").map(|sym| *sym);
        let _PyBytes_Join = __library.get(b"_PyBytes_Join\0").map(|sym| *sym);
        let _PyBytesWriter_Init = __library.get(b"_PyBytesWriter_Init\0").map(|sym| *sym);
        let _PyBytesWriter_Finish = __library.get(b"_PyBytesWriter_Finish\0").map(|sym| *sym);
        let _PyBytesWriter_Dealloc = __library.get(b"_PyBytesWriter_Dealloc\0").map(|sym| *sym);
        let _PyBytesWriter_Alloc = __library.get(b"_PyBytesWriter_Alloc\0").map(|sym| *sym);
        let _PyBytesWriter_Prepare = __library.get(b"_PyBytesWriter_Prepare\0").map(|sym| *sym);
        let _PyBytesWriter_Resize = __library.get(b"_PyBytesWriter_Resize\0").map(|sym| *sym);
        let _PyBytesWriter_WriteBytes = __library
            .get(b"_PyBytesWriter_WriteBytes\0")
            .map(|sym| *sym);
        let PyUnicode_FromStringAndSize = __library
            .get(b"PyUnicode_FromStringAndSize\0")
            .map(|sym| *sym);
        let PyUnicode_FromString = __library.get(b"PyUnicode_FromString\0").map(|sym| *sym);
        let PyUnicode_Substring = __library.get(b"PyUnicode_Substring\0").map(|sym| *sym);
        let PyUnicode_AsUCS4 = __library.get(b"PyUnicode_AsUCS4\0").map(|sym| *sym);
        let PyUnicode_AsUCS4Copy = __library.get(b"PyUnicode_AsUCS4Copy\0").map(|sym| *sym);
        let PyUnicode_GetLength = __library.get(b"PyUnicode_GetLength\0").map(|sym| *sym);
        let PyUnicode_GetSize = __library.get(b"PyUnicode_GetSize\0").map(|sym| *sym);
        let PyUnicode_ReadChar = __library.get(b"PyUnicode_ReadChar\0").map(|sym| *sym);
        let PyUnicode_WriteChar = __library.get(b"PyUnicode_WriteChar\0").map(|sym| *sym);
        let PyUnicode_Resize = __library.get(b"PyUnicode_Resize\0").map(|sym| *sym);
        let PyUnicode_FromEncodedObject = __library
            .get(b"PyUnicode_FromEncodedObject\0")
            .map(|sym| *sym);
        let PyUnicode_FromObject = __library.get(b"PyUnicode_FromObject\0").map(|sym| *sym);
        let PyUnicode_FromFormatV = __library.get(b"PyUnicode_FromFormatV\0").map(|sym| *sym);
        let PyUnicode_FromFormat = __library.get(b"PyUnicode_FromFormat\0").map(|sym| *sym);
        let PyUnicode_InternInPlace = __library.get(b"PyUnicode_InternInPlace\0").map(|sym| *sym);
        let PyUnicode_InternImmortal = __library.get(b"PyUnicode_InternImmortal\0").map(|sym| *sym);
        let PyUnicode_InternFromString = __library
            .get(b"PyUnicode_InternFromString\0")
            .map(|sym| *sym);
        let PyUnicode_FromWideChar = __library.get(b"PyUnicode_FromWideChar\0").map(|sym| *sym);
        let PyUnicode_AsWideChar = __library.get(b"PyUnicode_AsWideChar\0").map(|sym| *sym);
        let PyUnicode_AsWideCharString = __library
            .get(b"PyUnicode_AsWideCharString\0")
            .map(|sym| *sym);
        let PyUnicode_FromOrdinal = __library.get(b"PyUnicode_FromOrdinal\0").map(|sym| *sym);
        let PyUnicode_GetDefaultEncoding = __library
            .get(b"PyUnicode_GetDefaultEncoding\0")
            .map(|sym| *sym);
        let PyUnicode_Decode = __library.get(b"PyUnicode_Decode\0").map(|sym| *sym);
        let PyUnicode_AsDecodedObject = __library
            .get(b"PyUnicode_AsDecodedObject\0")
            .map(|sym| *sym);
        let PyUnicode_AsDecodedUnicode = __library
            .get(b"PyUnicode_AsDecodedUnicode\0")
            .map(|sym| *sym);
        let PyUnicode_AsEncodedObject = __library
            .get(b"PyUnicode_AsEncodedObject\0")
            .map(|sym| *sym);
        let PyUnicode_AsEncodedString = __library
            .get(b"PyUnicode_AsEncodedString\0")
            .map(|sym| *sym);
        let PyUnicode_AsEncodedUnicode = __library
            .get(b"PyUnicode_AsEncodedUnicode\0")
            .map(|sym| *sym);
        let PyUnicode_BuildEncodingMap = __library
            .get(b"PyUnicode_BuildEncodingMap\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeUTF7 = __library.get(b"PyUnicode_DecodeUTF7\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF7Stateful = __library
            .get(b"PyUnicode_DecodeUTF7Stateful\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeUTF8 = __library.get(b"PyUnicode_DecodeUTF8\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF8Stateful = __library
            .get(b"PyUnicode_DecodeUTF8Stateful\0")
            .map(|sym| *sym);
        let PyUnicode_AsUTF8String = __library.get(b"PyUnicode_AsUTF8String\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF32 = __library.get(b"PyUnicode_DecodeUTF32\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF32Stateful = __library
            .get(b"PyUnicode_DecodeUTF32Stateful\0")
            .map(|sym| *sym);
        let PyUnicode_AsUTF32String = __library.get(b"PyUnicode_AsUTF32String\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF16 = __library.get(b"PyUnicode_DecodeUTF16\0").map(|sym| *sym);
        let PyUnicode_DecodeUTF16Stateful = __library
            .get(b"PyUnicode_DecodeUTF16Stateful\0")
            .map(|sym| *sym);
        let PyUnicode_AsUTF16String = __library.get(b"PyUnicode_AsUTF16String\0").map(|sym| *sym);
        let PyUnicode_DecodeUnicodeEscape = __library
            .get(b"PyUnicode_DecodeUnicodeEscape\0")
            .map(|sym| *sym);
        let PyUnicode_AsUnicodeEscapeString = __library
            .get(b"PyUnicode_AsUnicodeEscapeString\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeRawUnicodeEscape = __library
            .get(b"PyUnicode_DecodeRawUnicodeEscape\0")
            .map(|sym| *sym);
        let PyUnicode_AsRawUnicodeEscapeString = __library
            .get(b"PyUnicode_AsRawUnicodeEscapeString\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeLatin1 = __library.get(b"PyUnicode_DecodeLatin1\0").map(|sym| *sym);
        let PyUnicode_AsLatin1String = __library.get(b"PyUnicode_AsLatin1String\0").map(|sym| *sym);
        let PyUnicode_DecodeASCII = __library.get(b"PyUnicode_DecodeASCII\0").map(|sym| *sym);
        let PyUnicode_AsASCIIString = __library.get(b"PyUnicode_AsASCIIString\0").map(|sym| *sym);
        let PyUnicode_DecodeCharmap = __library.get(b"PyUnicode_DecodeCharmap\0").map(|sym| *sym);
        let PyUnicode_AsCharmapString = __library
            .get(b"PyUnicode_AsCharmapString\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeLocaleAndSize = __library
            .get(b"PyUnicode_DecodeLocaleAndSize\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeLocale = __library.get(b"PyUnicode_DecodeLocale\0").map(|sym| *sym);
        let PyUnicode_EncodeLocale = __library.get(b"PyUnicode_EncodeLocale\0").map(|sym| *sym);
        let PyUnicode_FSConverter = __library.get(b"PyUnicode_FSConverter\0").map(|sym| *sym);
        let PyUnicode_FSDecoder = __library.get(b"PyUnicode_FSDecoder\0").map(|sym| *sym);
        let PyUnicode_DecodeFSDefault = __library
            .get(b"PyUnicode_DecodeFSDefault\0")
            .map(|sym| *sym);
        let PyUnicode_DecodeFSDefaultAndSize = __library
            .get(b"PyUnicode_DecodeFSDefaultAndSize\0")
            .map(|sym| *sym);
        let PyUnicode_EncodeFSDefault = __library
            .get(b"PyUnicode_EncodeFSDefault\0")
            .map(|sym| *sym);
        let PyUnicode_Concat = __library.get(b"PyUnicode_Concat\0").map(|sym| *sym);
        let PyUnicode_Append = __library.get(b"PyUnicode_Append\0").map(|sym| *sym);
        let PyUnicode_AppendAndDel = __library.get(b"PyUnicode_AppendAndDel\0").map(|sym| *sym);
        let PyUnicode_Split = __library.get(b"PyUnicode_Split\0").map(|sym| *sym);
        let PyUnicode_Splitlines = __library.get(b"PyUnicode_Splitlines\0").map(|sym| *sym);
        let PyUnicode_Partition = __library.get(b"PyUnicode_Partition\0").map(|sym| *sym);
        let PyUnicode_RPartition = __library.get(b"PyUnicode_RPartition\0").map(|sym| *sym);
        let PyUnicode_RSplit = __library.get(b"PyUnicode_RSplit\0").map(|sym| *sym);
        let PyUnicode_Translate = __library.get(b"PyUnicode_Translate\0").map(|sym| *sym);
        let PyUnicode_Join = __library.get(b"PyUnicode_Join\0").map(|sym| *sym);
        let PyUnicode_Tailmatch = __library.get(b"PyUnicode_Tailmatch\0").map(|sym| *sym);
        let PyUnicode_Find = __library.get(b"PyUnicode_Find\0").map(|sym| *sym);
        let PyUnicode_FindChar = __library.get(b"PyUnicode_FindChar\0").map(|sym| *sym);
        let PyUnicode_Count = __library.get(b"PyUnicode_Count\0").map(|sym| *sym);
        let PyUnicode_Replace = __library.get(b"PyUnicode_Replace\0").map(|sym| *sym);
        let PyUnicode_Compare = __library.get(b"PyUnicode_Compare\0").map(|sym| *sym);
        let PyUnicode_CompareWithASCIIString = __library
            .get(b"PyUnicode_CompareWithASCIIString\0")
            .map(|sym| *sym);
        let PyUnicode_RichCompare = __library.get(b"PyUnicode_RichCompare\0").map(|sym| *sym);
        let PyUnicode_Format = __library.get(b"PyUnicode_Format\0").map(|sym| *sym);
        let PyUnicode_Contains = __library.get(b"PyUnicode_Contains\0").map(|sym| *sym);
        let PyUnicode_IsIdentifier = __library.get(b"PyUnicode_IsIdentifier\0").map(|sym| *sym);
        let _PyUnicode_CheckConsistency = __library
            .get(b"_PyUnicode_CheckConsistency\0")
            .map(|sym| *sym);
        let PyUnicode_New = __library.get(b"PyUnicode_New\0").map(|sym| *sym);
        let _PyUnicode_Ready = __library.get(b"_PyUnicode_Ready\0").map(|sym| *sym);
        let _PyUnicode_Copy = __library.get(b"_PyUnicode_Copy\0").map(|sym| *sym);
        let PyUnicode_CopyCharacters = __library.get(b"PyUnicode_CopyCharacters\0").map(|sym| *sym);
        let _PyUnicode_FastCopyCharacters = __library
            .get(b"_PyUnicode_FastCopyCharacters\0")
            .map(|sym| *sym);
        let PyUnicode_Fill = __library.get(b"PyUnicode_Fill\0").map(|sym| *sym);
        let _PyUnicode_FastFill = __library.get(b"_PyUnicode_FastFill\0").map(|sym| *sym);
        let PyUnicode_FromUnicode = __library.get(b"PyUnicode_FromUnicode\0").map(|sym| *sym);
        let PyUnicode_FromKindAndData = __library
            .get(b"PyUnicode_FromKindAndData\0")
            .map(|sym| *sym);
        let _PyUnicode_FromASCII = __library.get(b"_PyUnicode_FromASCII\0").map(|sym| *sym);
        let _PyUnicode_FindMaxChar = __library.get(b"_PyUnicode_FindMaxChar\0").map(|sym| *sym);
        let PyUnicode_AsUnicode = __library.get(b"PyUnicode_AsUnicode\0").map(|sym| *sym);
        let _PyUnicode_AsUnicode = __library.get(b"_PyUnicode_AsUnicode\0").map(|sym| *sym);
        let PyUnicode_AsUnicodeAndSize = __library
            .get(b"PyUnicode_AsUnicodeAndSize\0")
            .map(|sym| *sym);
        let PyUnicode_GetMax = __library.get(b"PyUnicode_GetMax\0").map(|sym| *sym);
        let _PyUnicodeWriter_Init = __library.get(b"_PyUnicodeWriter_Init\0").map(|sym| *sym);
        let _PyUnicodeWriter_PrepareInternal = __library
            .get(b"_PyUnicodeWriter_PrepareInternal\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_PrepareKindInternal = __library
            .get(b"_PyUnicodeWriter_PrepareKindInternal\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_WriteChar = __library
            .get(b"_PyUnicodeWriter_WriteChar\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_WriteStr = __library
            .get(b"_PyUnicodeWriter_WriteStr\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_WriteSubstring = __library
            .get(b"_PyUnicodeWriter_WriteSubstring\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_WriteASCIIString = __library
            .get(b"_PyUnicodeWriter_WriteASCIIString\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_WriteLatin1String = __library
            .get(b"_PyUnicodeWriter_WriteLatin1String\0")
            .map(|sym| *sym);
        let _PyUnicodeWriter_Finish = __library.get(b"_PyUnicodeWriter_Finish\0").map(|sym| *sym);
        let _PyUnicodeWriter_Dealloc = __library.get(b"_PyUnicodeWriter_Dealloc\0").map(|sym| *sym);
        let _PyUnicode_FormatAdvancedWriter = __library
            .get(b"_PyUnicode_FormatAdvancedWriter\0")
            .map(|sym| *sym);
        let PyUnicode_AsUTF8AndSize = __library.get(b"PyUnicode_AsUTF8AndSize\0").map(|sym| *sym);
        let PyUnicode_AsUTF8 = __library.get(b"PyUnicode_AsUTF8\0").map(|sym| *sym);
        let PyUnicode_Encode = __library.get(b"PyUnicode_Encode\0").map(|sym| *sym);
        let PyUnicode_EncodeUTF7 = __library.get(b"PyUnicode_EncodeUTF7\0").map(|sym| *sym);
        let _PyUnicode_EncodeUTF7 = __library.get(b"_PyUnicode_EncodeUTF7\0").map(|sym| *sym);
        let _PyUnicode_AsUTF8String = __library.get(b"_PyUnicode_AsUTF8String\0").map(|sym| *sym);
        let PyUnicode_EncodeUTF8 = __library.get(b"PyUnicode_EncodeUTF8\0").map(|sym| *sym);
        let PyUnicode_EncodeUTF32 = __library.get(b"PyUnicode_EncodeUTF32\0").map(|sym| *sym);
        let _PyUnicode_EncodeUTF32 = __library.get(b"_PyUnicode_EncodeUTF32\0").map(|sym| *sym);
        let PyUnicode_EncodeUTF16 = __library.get(b"PyUnicode_EncodeUTF16\0").map(|sym| *sym);
        let _PyUnicode_EncodeUTF16 = __library.get(b"_PyUnicode_EncodeUTF16\0").map(|sym| *sym);
        let _PyUnicode_DecodeUnicodeEscape = __library
            .get(b"_PyUnicode_DecodeUnicodeEscape\0")
            .map(|sym| *sym);
        let PyUnicode_EncodeUnicodeEscape = __library
            .get(b"PyUnicode_EncodeUnicodeEscape\0")
            .map(|sym| *sym);
        let PyUnicode_EncodeRawUnicodeEscape = __library
            .get(b"PyUnicode_EncodeRawUnicodeEscape\0")
            .map(|sym| *sym);
        let _PyUnicode_AsLatin1String = __library
            .get(b"_PyUnicode_AsLatin1String\0")
            .map(|sym| *sym);
        let PyUnicode_EncodeLatin1 = __library.get(b"PyUnicode_EncodeLatin1\0").map(|sym| *sym);
        let _PyUnicode_AsASCIIString = __library.get(b"_PyUnicode_AsASCIIString\0").map(|sym| *sym);
        let PyUnicode_EncodeASCII = __library.get(b"PyUnicode_EncodeASCII\0").map(|sym| *sym);
        let PyUnicode_EncodeCharmap = __library.get(b"PyUnicode_EncodeCharmap\0").map(|sym| *sym);
        let _PyUnicode_EncodeCharmap = __library.get(b"_PyUnicode_EncodeCharmap\0").map(|sym| *sym);
        let PyUnicode_TranslateCharmap = __library
            .get(b"PyUnicode_TranslateCharmap\0")
            .map(|sym| *sym);
        let PyUnicode_EncodeDecimal = __library.get(b"PyUnicode_EncodeDecimal\0").map(|sym| *sym);
        let PyUnicode_TransformDecimalToASCII = __library
            .get(b"PyUnicode_TransformDecimalToASCII\0")
            .map(|sym| *sym);
        let _PyUnicode_TransformDecimalAndSpaceToASCII = __library
            .get(b"_PyUnicode_TransformDecimalAndSpaceToASCII\0")
            .map(|sym| *sym);
        let _PyUnicode_JoinArray = __library.get(b"_PyUnicode_JoinArray\0").map(|sym| *sym);
        let _PyUnicode_EqualToASCIIId = __library
            .get(b"_PyUnicode_EqualToASCIIId\0")
            .map(|sym| *sym);
        let _PyUnicode_EqualToASCIIString = __library
            .get(b"_PyUnicode_EqualToASCIIString\0")
            .map(|sym| *sym);
        let _PyUnicode_XStrip = __library.get(b"_PyUnicode_XStrip\0").map(|sym| *sym);
        let _PyUnicode_InsertThousandsGrouping = __library
            .get(b"_PyUnicode_InsertThousandsGrouping\0")
            .map(|sym| *sym);
        let _PyUnicode_IsLowercase = __library.get(b"_PyUnicode_IsLowercase\0").map(|sym| *sym);
        let _PyUnicode_IsUppercase = __library.get(b"_PyUnicode_IsUppercase\0").map(|sym| *sym);
        let _PyUnicode_IsTitlecase = __library.get(b"_PyUnicode_IsTitlecase\0").map(|sym| *sym);
        let _PyUnicode_IsXidStart = __library.get(b"_PyUnicode_IsXidStart\0").map(|sym| *sym);
        let _PyUnicode_IsXidContinue = __library.get(b"_PyUnicode_IsXidContinue\0").map(|sym| *sym);
        let _PyUnicode_IsWhitespace = __library.get(b"_PyUnicode_IsWhitespace\0").map(|sym| *sym);
        let _PyUnicode_IsLinebreak = __library.get(b"_PyUnicode_IsLinebreak\0").map(|sym| *sym);
        let _PyUnicode_ToLowercase = __library.get(b"_PyUnicode_ToLowercase\0").map(|sym| *sym);
        let _PyUnicode_ToUppercase = __library.get(b"_PyUnicode_ToUppercase\0").map(|sym| *sym);
        let _PyUnicode_ToTitlecase = __library.get(b"_PyUnicode_ToTitlecase\0").map(|sym| *sym);
        let _PyUnicode_ToLowerFull = __library.get(b"_PyUnicode_ToLowerFull\0").map(|sym| *sym);
        let _PyUnicode_ToTitleFull = __library.get(b"_PyUnicode_ToTitleFull\0").map(|sym| *sym);
        let _PyUnicode_ToUpperFull = __library.get(b"_PyUnicode_ToUpperFull\0").map(|sym| *sym);
        let _PyUnicode_ToFoldedFull = __library.get(b"_PyUnicode_ToFoldedFull\0").map(|sym| *sym);
        let _PyUnicode_IsCaseIgnorable = __library
            .get(b"_PyUnicode_IsCaseIgnorable\0")
            .map(|sym| *sym);
        let _PyUnicode_IsCased = __library.get(b"_PyUnicode_IsCased\0").map(|sym| *sym);
        let _PyUnicode_ToDecimalDigit = __library
            .get(b"_PyUnicode_ToDecimalDigit\0")
            .map(|sym| *sym);
        let _PyUnicode_ToDigit = __library.get(b"_PyUnicode_ToDigit\0").map(|sym| *sym);
        let _PyUnicode_ToNumeric = __library.get(b"_PyUnicode_ToNumeric\0").map(|sym| *sym);
        let _PyUnicode_IsDecimalDigit = __library
            .get(b"_PyUnicode_IsDecimalDigit\0")
            .map(|sym| *sym);
        let _PyUnicode_IsDigit = __library.get(b"_PyUnicode_IsDigit\0").map(|sym| *sym);
        let _PyUnicode_IsNumeric = __library.get(b"_PyUnicode_IsNumeric\0").map(|sym| *sym);
        let _PyUnicode_IsPrintable = __library.get(b"_PyUnicode_IsPrintable\0").map(|sym| *sym);
        let _PyUnicode_IsAlpha = __library.get(b"_PyUnicode_IsAlpha\0").map(|sym| *sym);
        let Py_UNICODE_strlen = __library.get(b"Py_UNICODE_strlen\0").map(|sym| *sym);
        let Py_UNICODE_strcpy = __library.get(b"Py_UNICODE_strcpy\0").map(|sym| *sym);
        let Py_UNICODE_strcat = __library.get(b"Py_UNICODE_strcat\0").map(|sym| *sym);
        let Py_UNICODE_strncpy = __library.get(b"Py_UNICODE_strncpy\0").map(|sym| *sym);
        let Py_UNICODE_strcmp = __library.get(b"Py_UNICODE_strcmp\0").map(|sym| *sym);
        let Py_UNICODE_strncmp = __library.get(b"Py_UNICODE_strncmp\0").map(|sym| *sym);
        let Py_UNICODE_strchr = __library.get(b"Py_UNICODE_strchr\0").map(|sym| *sym);
        let Py_UNICODE_strrchr = __library.get(b"Py_UNICODE_strrchr\0").map(|sym| *sym);
        let _PyUnicode_FormatLong = __library.get(b"_PyUnicode_FormatLong\0").map(|sym| *sym);
        let PyUnicode_AsUnicodeCopy = __library.get(b"PyUnicode_AsUnicodeCopy\0").map(|sym| *sym);
        let _PyUnicode_FromId = __library.get(b"_PyUnicode_FromId\0").map(|sym| *sym);
        let _PyUnicode_EQ = __library.get(b"_PyUnicode_EQ\0").map(|sym| *sym);
        let _PyUnicode_ScanIdentifier = __library
            .get(b"_PyUnicode_ScanIdentifier\0")
            .map(|sym| *sym);
        let PyLong_FromLong = __library.get(b"PyLong_FromLong\0").map(|sym| *sym);
        let PyLong_FromUnsignedLong = __library.get(b"PyLong_FromUnsignedLong\0").map(|sym| *sym);
        let PyLong_FromSize_t = __library.get(b"PyLong_FromSize_t\0").map(|sym| *sym);
        let PyLong_FromSsize_t = __library.get(b"PyLong_FromSsize_t\0").map(|sym| *sym);
        let PyLong_FromDouble = __library.get(b"PyLong_FromDouble\0").map(|sym| *sym);
        let PyLong_AsLong = __library.get(b"PyLong_AsLong\0").map(|sym| *sym);
        let PyLong_AsLongAndOverflow = __library.get(b"PyLong_AsLongAndOverflow\0").map(|sym| *sym);
        let PyLong_AsSsize_t = __library.get(b"PyLong_AsSsize_t\0").map(|sym| *sym);
        let PyLong_AsSize_t = __library.get(b"PyLong_AsSize_t\0").map(|sym| *sym);
        let PyLong_AsUnsignedLong = __library.get(b"PyLong_AsUnsignedLong\0").map(|sym| *sym);
        let PyLong_AsUnsignedLongMask = __library
            .get(b"PyLong_AsUnsignedLongMask\0")
            .map(|sym| *sym);
        let _PyLong_AsInt = __library.get(b"_PyLong_AsInt\0").map(|sym| *sym);
        let PyLong_GetInfo = __library.get(b"PyLong_GetInfo\0").map(|sym| *sym);
        let _PyLong_UnsignedShort_Converter = __library
            .get(b"_PyLong_UnsignedShort_Converter\0")
            .map(|sym| *sym);
        let _PyLong_UnsignedInt_Converter = __library
            .get(b"_PyLong_UnsignedInt_Converter\0")
            .map(|sym| *sym);
        let _PyLong_UnsignedLong_Converter = __library
            .get(b"_PyLong_UnsignedLong_Converter\0")
            .map(|sym| *sym);
        let _PyLong_UnsignedLongLong_Converter = __library
            .get(b"_PyLong_UnsignedLongLong_Converter\0")
            .map(|sym| *sym);
        let _PyLong_Size_t_Converter = __library.get(b"_PyLong_Size_t_Converter\0").map(|sym| *sym);
        let _PyLong_Frexp = __library.get(b"_PyLong_Frexp\0").map(|sym| *sym);
        let PyLong_AsDouble = __library.get(b"PyLong_AsDouble\0").map(|sym| *sym);
        let PyLong_FromVoidPtr = __library.get(b"PyLong_FromVoidPtr\0").map(|sym| *sym);
        let PyLong_AsVoidPtr = __library.get(b"PyLong_AsVoidPtr\0").map(|sym| *sym);
        let PyLong_FromLongLong = __library.get(b"PyLong_FromLongLong\0").map(|sym| *sym);
        let PyLong_FromUnsignedLongLong = __library
            .get(b"PyLong_FromUnsignedLongLong\0")
            .map(|sym| *sym);
        let PyLong_AsLongLong = __library.get(b"PyLong_AsLongLong\0").map(|sym| *sym);
        let PyLong_AsUnsignedLongLong = __library
            .get(b"PyLong_AsUnsignedLongLong\0")
            .map(|sym| *sym);
        let PyLong_AsUnsignedLongLongMask = __library
            .get(b"PyLong_AsUnsignedLongLongMask\0")
            .map(|sym| *sym);
        let PyLong_AsLongLongAndOverflow = __library
            .get(b"PyLong_AsLongLongAndOverflow\0")
            .map(|sym| *sym);
        let PyLong_FromString = __library.get(b"PyLong_FromString\0").map(|sym| *sym);
        let PyLong_FromUnicode = __library.get(b"PyLong_FromUnicode\0").map(|sym| *sym);
        let PyLong_FromUnicodeObject = __library.get(b"PyLong_FromUnicodeObject\0").map(|sym| *sym);
        let _PyLong_FromBytes = __library.get(b"_PyLong_FromBytes\0").map(|sym| *sym);
        let _PyLong_Sign = __library.get(b"_PyLong_Sign\0").map(|sym| *sym);
        let _PyLong_NumBits = __library.get(b"_PyLong_NumBits\0").map(|sym| *sym);
        let _PyLong_DivmodNear = __library.get(b"_PyLong_DivmodNear\0").map(|sym| *sym);
        let _PyLong_FromByteArray = __library.get(b"_PyLong_FromByteArray\0").map(|sym| *sym);
        let _PyLong_AsByteArray = __library.get(b"_PyLong_AsByteArray\0").map(|sym| *sym);
        let _PyLong_FromNbInt = __library.get(b"_PyLong_FromNbInt\0").map(|sym| *sym);
        let _PyLong_FromNbIndexOrNbInt = __library
            .get(b"_PyLong_FromNbIndexOrNbInt\0")
            .map(|sym| *sym);
        let _PyLong_Format = __library.get(b"_PyLong_Format\0").map(|sym| *sym);
        let _PyLong_FormatWriter = __library.get(b"_PyLong_FormatWriter\0").map(|sym| *sym);
        let _PyLong_FormatBytesWriter = __library
            .get(b"_PyLong_FormatBytesWriter\0")
            .map(|sym| *sym);
        let _PyLong_FormatAdvancedWriter = __library
            .get(b"_PyLong_FormatAdvancedWriter\0")
            .map(|sym| *sym);
        let PyOS_strtoul = __library.get(b"PyOS_strtoul\0").map(|sym| *sym);
        let PyOS_strtol = __library.get(b"PyOS_strtol\0").map(|sym| *sym);
        let _PyLong_GCD = __library.get(b"_PyLong_GCD\0").map(|sym| *sym);
        let _PyLong_Rshift = __library.get(b"_PyLong_Rshift\0").map(|sym| *sym);
        let _PyLong_Lshift = __library.get(b"_PyLong_Lshift\0").map(|sym| *sym);
        let _PyLong_New = __library.get(b"_PyLong_New\0").map(|sym| *sym);
        let _PyLong_Copy = __library.get(b"_PyLong_Copy\0").map(|sym| *sym);
        let PyBool_FromLong = __library.get(b"PyBool_FromLong\0").map(|sym| *sym);
        let PyFloat_GetMax = __library.get(b"PyFloat_GetMax\0").map(|sym| *sym);
        let PyFloat_GetMin = __library.get(b"PyFloat_GetMin\0").map(|sym| *sym);
        let PyFloat_GetInfo = __library.get(b"PyFloat_GetInfo\0").map(|sym| *sym);
        let PyFloat_FromString = __library.get(b"PyFloat_FromString\0").map(|sym| *sym);
        let PyFloat_FromDouble = __library.get(b"PyFloat_FromDouble\0").map(|sym| *sym);
        let PyFloat_AsDouble = __library.get(b"PyFloat_AsDouble\0").map(|sym| *sym);
        let _PyFloat_Pack2 = __library.get(b"_PyFloat_Pack2\0").map(|sym| *sym);
        let _PyFloat_Pack4 = __library.get(b"_PyFloat_Pack4\0").map(|sym| *sym);
        let _PyFloat_Pack8 = __library.get(b"_PyFloat_Pack8\0").map(|sym| *sym);
        let _PyFloat_Unpack2 = __library.get(b"_PyFloat_Unpack2\0").map(|sym| *sym);
        let _PyFloat_Unpack4 = __library.get(b"_PyFloat_Unpack4\0").map(|sym| *sym);
        let _PyFloat_Unpack8 = __library.get(b"_PyFloat_Unpack8\0").map(|sym| *sym);
        let _PyFloat_DebugMallocStats = __library
            .get(b"_PyFloat_DebugMallocStats\0")
            .map(|sym| *sym);
        let _PyFloat_FormatAdvancedWriter = __library
            .get(b"_PyFloat_FormatAdvancedWriter\0")
            .map(|sym| *sym);
        let _Py_c_sum = __library.get(b"_Py_c_sum\0").map(|sym| *sym);
        let _Py_c_diff = __library.get(b"_Py_c_diff\0").map(|sym| *sym);
        let _Py_c_neg = __library.get(b"_Py_c_neg\0").map(|sym| *sym);
        let _Py_c_prod = __library.get(b"_Py_c_prod\0").map(|sym| *sym);
        let _Py_c_quot = __library.get(b"_Py_c_quot\0").map(|sym| *sym);
        let _Py_c_pow = __library.get(b"_Py_c_pow\0").map(|sym| *sym);
        let _Py_c_abs = __library.get(b"_Py_c_abs\0").map(|sym| *sym);
        let PyComplex_FromCComplex = __library.get(b"PyComplex_FromCComplex\0").map(|sym| *sym);
        let PyComplex_FromDoubles = __library.get(b"PyComplex_FromDoubles\0").map(|sym| *sym);
        let PyComplex_RealAsDouble = __library.get(b"PyComplex_RealAsDouble\0").map(|sym| *sym);
        let PyComplex_ImagAsDouble = __library.get(b"PyComplex_ImagAsDouble\0").map(|sym| *sym);
        let PyComplex_AsCComplex = __library.get(b"PyComplex_AsCComplex\0").map(|sym| *sym);
        let _PyComplex_FormatAdvancedWriter = __library
            .get(b"_PyComplex_FormatAdvancedWriter\0")
            .map(|sym| *sym);
        let PyMemoryView_FromObject = __library.get(b"PyMemoryView_FromObject\0").map(|sym| *sym);
        let PyMemoryView_FromMemory = __library.get(b"PyMemoryView_FromMemory\0").map(|sym| *sym);
        let PyMemoryView_FromBuffer = __library.get(b"PyMemoryView_FromBuffer\0").map(|sym| *sym);
        let PyMemoryView_GetContiguous = __library
            .get(b"PyMemoryView_GetContiguous\0")
            .map(|sym| *sym);
        let PyTuple_New = __library.get(b"PyTuple_New\0").map(|sym| *sym);
        let PyTuple_Size = __library.get(b"PyTuple_Size\0").map(|sym| *sym);
        let PyTuple_GetItem = __library.get(b"PyTuple_GetItem\0").map(|sym| *sym);
        let PyTuple_SetItem = __library.get(b"PyTuple_SetItem\0").map(|sym| *sym);
        let PyTuple_GetSlice = __library.get(b"PyTuple_GetSlice\0").map(|sym| *sym);
        let PyTuple_Pack = __library.get(b"PyTuple_Pack\0").map(|sym| *sym);
        let _PyTuple_Resize = __library.get(b"_PyTuple_Resize\0").map(|sym| *sym);
        let _PyTuple_MaybeUntrack = __library.get(b"_PyTuple_MaybeUntrack\0").map(|sym| *sym);
        let _PyTuple_DebugMallocStats = __library
            .get(b"_PyTuple_DebugMallocStats\0")
            .map(|sym| *sym);
        let PyList_New = __library.get(b"PyList_New\0").map(|sym| *sym);
        let PyList_Size = __library.get(b"PyList_Size\0").map(|sym| *sym);
        let PyList_GetItem = __library.get(b"PyList_GetItem\0").map(|sym| *sym);
        let PyList_SetItem = __library.get(b"PyList_SetItem\0").map(|sym| *sym);
        let PyList_Insert = __library.get(b"PyList_Insert\0").map(|sym| *sym);
        let PyList_Append = __library.get(b"PyList_Append\0").map(|sym| *sym);
        let PyList_GetSlice = __library.get(b"PyList_GetSlice\0").map(|sym| *sym);
        let PyList_SetSlice = __library.get(b"PyList_SetSlice\0").map(|sym| *sym);
        let PyList_Sort = __library.get(b"PyList_Sort\0").map(|sym| *sym);
        let PyList_Reverse = __library.get(b"PyList_Reverse\0").map(|sym| *sym);
        let PyList_AsTuple = __library.get(b"PyList_AsTuple\0").map(|sym| *sym);
        let _PyList_Extend = __library.get(b"_PyList_Extend\0").map(|sym| *sym);
        let _PyList_DebugMallocStats = __library.get(b"_PyList_DebugMallocStats\0").map(|sym| *sym);
        let PyDict_New = __library.get(b"PyDict_New\0").map(|sym| *sym);
        let PyDict_GetItem = __library.get(b"PyDict_GetItem\0").map(|sym| *sym);
        let PyDict_GetItemWithError = __library.get(b"PyDict_GetItemWithError\0").map(|sym| *sym);
        let PyDict_SetItem = __library.get(b"PyDict_SetItem\0").map(|sym| *sym);
        let PyDict_DelItem = __library.get(b"PyDict_DelItem\0").map(|sym| *sym);
        let PyDict_Clear = __library.get(b"PyDict_Clear\0").map(|sym| *sym);
        let PyDict_Next = __library.get(b"PyDict_Next\0").map(|sym| *sym);
        let PyDict_Keys = __library.get(b"PyDict_Keys\0").map(|sym| *sym);
        let PyDict_Values = __library.get(b"PyDict_Values\0").map(|sym| *sym);
        let PyDict_Items = __library.get(b"PyDict_Items\0").map(|sym| *sym);
        let PyDict_Size = __library.get(b"PyDict_Size\0").map(|sym| *sym);
        let PyDict_Copy = __library.get(b"PyDict_Copy\0").map(|sym| *sym);
        let PyDict_Contains = __library.get(b"PyDict_Contains\0").map(|sym| *sym);
        let PyDict_Update = __library.get(b"PyDict_Update\0").map(|sym| *sym);
        let PyDict_Merge = __library.get(b"PyDict_Merge\0").map(|sym| *sym);
        let PyDict_MergeFromSeq2 = __library.get(b"PyDict_MergeFromSeq2\0").map(|sym| *sym);
        let PyDict_GetItemString = __library.get(b"PyDict_GetItemString\0").map(|sym| *sym);
        let PyDict_SetItemString = __library.get(b"PyDict_SetItemString\0").map(|sym| *sym);
        let PyDict_DelItemString = __library.get(b"PyDict_DelItemString\0").map(|sym| *sym);
        let _PyDict_GetItem_KnownHash = __library
            .get(b"_PyDict_GetItem_KnownHash\0")
            .map(|sym| *sym);
        let _PyDict_GetItemIdWithError = __library
            .get(b"_PyDict_GetItemIdWithError\0")
            .map(|sym| *sym);
        let _PyDict_GetItemStringWithError = __library
            .get(b"_PyDict_GetItemStringWithError\0")
            .map(|sym| *sym);
        let PyDict_SetDefault = __library.get(b"PyDict_SetDefault\0").map(|sym| *sym);
        let _PyDict_SetItem_KnownHash = __library
            .get(b"_PyDict_SetItem_KnownHash\0")
            .map(|sym| *sym);
        let _PyDict_DelItem_KnownHash = __library
            .get(b"_PyDict_DelItem_KnownHash\0")
            .map(|sym| *sym);
        let _PyDict_DelItemIf = __library.get(b"_PyDict_DelItemIf\0").map(|sym| *sym);
        let _PyDict_NewKeysForClass = __library.get(b"_PyDict_NewKeysForClass\0").map(|sym| *sym);
        let PyObject_GenericGetDict = __library.get(b"PyObject_GenericGetDict\0").map(|sym| *sym);
        let _PyDict_Next = __library.get(b"_PyDict_Next\0").map(|sym| *sym);
        let _PyDict_Contains = __library.get(b"_PyDict_Contains\0").map(|sym| *sym);
        let _PyDict_NewPresized = __library.get(b"_PyDict_NewPresized\0").map(|sym| *sym);
        let _PyDict_MaybeUntrack = __library.get(b"_PyDict_MaybeUntrack\0").map(|sym| *sym);
        let _PyDict_HasOnlyStringKeys = __library
            .get(b"_PyDict_HasOnlyStringKeys\0")
            .map(|sym| *sym);
        let _PyDict_KeysSize = __library.get(b"_PyDict_KeysSize\0").map(|sym| *sym);
        let _PyDict_SizeOf = __library.get(b"_PyDict_SizeOf\0").map(|sym| *sym);
        let _PyDict_Pop = __library.get(b"_PyDict_Pop\0").map(|sym| *sym);
        let _PyDict_Pop_KnownHash = __library.get(b"_PyDict_Pop_KnownHash\0").map(|sym| *sym);
        let _PyDict_FromKeys = __library.get(b"_PyDict_FromKeys\0").map(|sym| *sym);
        let _PyDict_MergeEx = __library.get(b"_PyDict_MergeEx\0").map(|sym| *sym);
        let _PyDict_GetItemId = __library.get(b"_PyDict_GetItemId\0").map(|sym| *sym);
        let _PyDict_SetItemId = __library.get(b"_PyDict_SetItemId\0").map(|sym| *sym);
        let _PyDict_DelItemId = __library.get(b"_PyDict_DelItemId\0").map(|sym| *sym);
        let _PyDict_DebugMallocStats = __library.get(b"_PyDict_DebugMallocStats\0").map(|sym| *sym);
        let _PyObjectDict_SetItem = __library.get(b"_PyObjectDict_SetItem\0").map(|sym| *sym);
        let _PyDict_LoadGlobal = __library.get(b"_PyDict_LoadGlobal\0").map(|sym| *sym);
        let _PyDictView_New = __library.get(b"_PyDictView_New\0").map(|sym| *sym);
        let _PyDictView_Intersect = __library.get(b"_PyDictView_Intersect\0").map(|sym| *sym);
        let PyODict_New = __library.get(b"PyODict_New\0").map(|sym| *sym);
        let PyODict_SetItem = __library.get(b"PyODict_SetItem\0").map(|sym| *sym);
        let PyODict_DelItem = __library.get(b"PyODict_DelItem\0").map(|sym| *sym);
        let _PySet_NextEntry = __library.get(b"_PySet_NextEntry\0").map(|sym| *sym);
        let _PySet_Update = __library.get(b"_PySet_Update\0").map(|sym| *sym);
        let PySet_New = __library.get(b"PySet_New\0").map(|sym| *sym);
        let PyFrozenSet_New = __library.get(b"PyFrozenSet_New\0").map(|sym| *sym);
        let PySet_Add = __library.get(b"PySet_Add\0").map(|sym| *sym);
        let PySet_Clear = __library.get(b"PySet_Clear\0").map(|sym| *sym);
        let PySet_Contains = __library.get(b"PySet_Contains\0").map(|sym| *sym);
        let PySet_Discard = __library.get(b"PySet_Discard\0").map(|sym| *sym);
        let PySet_Pop = __library.get(b"PySet_Pop\0").map(|sym| *sym);
        let PySet_Size = __library.get(b"PySet_Size\0").map(|sym| *sym);
        let PyCFunction_GetFunction = __library.get(b"PyCFunction_GetFunction\0").map(|sym| *sym);
        let PyCFunction_GetSelf = __library.get(b"PyCFunction_GetSelf\0").map(|sym| *sym);
        let PyCFunction_GetFlags = __library.get(b"PyCFunction_GetFlags\0").map(|sym| *sym);
        let PyCFunction_Call = __library.get(b"PyCFunction_Call\0").map(|sym| *sym);
        let PyCFunction_NewEx = __library.get(b"PyCFunction_NewEx\0").map(|sym| *sym);
        let PyCMethod_New = __library.get(b"PyCMethod_New\0").map(|sym| *sym);
        let PyModule_NewObject = __library.get(b"PyModule_NewObject\0").map(|sym| *sym);
        let PyModule_New = __library.get(b"PyModule_New\0").map(|sym| *sym);
        let PyModule_GetDict = __library.get(b"PyModule_GetDict\0").map(|sym| *sym);
        let PyModule_GetNameObject = __library.get(b"PyModule_GetNameObject\0").map(|sym| *sym);
        let PyModule_GetName = __library.get(b"PyModule_GetName\0").map(|sym| *sym);
        let PyModule_GetFilename = __library.get(b"PyModule_GetFilename\0").map(|sym| *sym);
        let PyModule_GetFilenameObject = __library
            .get(b"PyModule_GetFilenameObject\0")
            .map(|sym| *sym);
        let _PyModule_Clear = __library.get(b"_PyModule_Clear\0").map(|sym| *sym);
        let _PyModule_ClearDict = __library.get(b"_PyModule_ClearDict\0").map(|sym| *sym);
        let _PyModuleSpec_IsInitializing = __library
            .get(b"_PyModuleSpec_IsInitializing\0")
            .map(|sym| *sym);
        let PyModule_GetDef = __library.get(b"PyModule_GetDef\0").map(|sym| *sym);
        let PyModule_GetState = __library.get(b"PyModule_GetState\0").map(|sym| *sym);
        let PyModuleDef_Init = __library.get(b"PyModuleDef_Init\0").map(|sym| *sym);
        let PyFunction_New = __library.get(b"PyFunction_New\0").map(|sym| *sym);
        let PyFunction_NewWithQualName = __library
            .get(b"PyFunction_NewWithQualName\0")
            .map(|sym| *sym);
        let PyFunction_GetCode = __library.get(b"PyFunction_GetCode\0").map(|sym| *sym);
        let PyFunction_GetGlobals = __library.get(b"PyFunction_GetGlobals\0").map(|sym| *sym);
        let PyFunction_GetModule = __library.get(b"PyFunction_GetModule\0").map(|sym| *sym);
        let PyFunction_GetDefaults = __library.get(b"PyFunction_GetDefaults\0").map(|sym| *sym);
        let PyFunction_SetDefaults = __library.get(b"PyFunction_SetDefaults\0").map(|sym| *sym);
        let PyFunction_GetKwDefaults = __library.get(b"PyFunction_GetKwDefaults\0").map(|sym| *sym);
        let PyFunction_SetKwDefaults = __library.get(b"PyFunction_SetKwDefaults\0").map(|sym| *sym);
        let PyFunction_GetClosure = __library.get(b"PyFunction_GetClosure\0").map(|sym| *sym);
        let PyFunction_SetClosure = __library.get(b"PyFunction_SetClosure\0").map(|sym| *sym);
        let PyFunction_GetAnnotations = __library
            .get(b"PyFunction_GetAnnotations\0")
            .map(|sym| *sym);
        let PyFunction_SetAnnotations = __library
            .get(b"PyFunction_SetAnnotations\0")
            .map(|sym| *sym);
        let _PyFunction_Vectorcall = __library.get(b"_PyFunction_Vectorcall\0").map(|sym| *sym);
        let PyClassMethod_New = __library.get(b"PyClassMethod_New\0").map(|sym| *sym);
        let PyStaticMethod_New = __library.get(b"PyStaticMethod_New\0").map(|sym| *sym);
        let PyMethod_New = __library.get(b"PyMethod_New\0").map(|sym| *sym);
        let PyMethod_Function = __library.get(b"PyMethod_Function\0").map(|sym| *sym);
        let PyMethod_Self = __library.get(b"PyMethod_Self\0").map(|sym| *sym);
        let PyInstanceMethod_New = __library.get(b"PyInstanceMethod_New\0").map(|sym| *sym);
        let PyInstanceMethod_Function = __library
            .get(b"PyInstanceMethod_Function\0")
            .map(|sym| *sym);
        let PyFile_FromFd = __library.get(b"PyFile_FromFd\0").map(|sym| *sym);
        let PyFile_GetLine = __library.get(b"PyFile_GetLine\0").map(|sym| *sym);
        let PyFile_WriteObject = __library.get(b"PyFile_WriteObject\0").map(|sym| *sym);
        let PyFile_WriteString = __library.get(b"PyFile_WriteString\0").map(|sym| *sym);
        let PyObject_AsFileDescriptor = __library
            .get(b"PyObject_AsFileDescriptor\0")
            .map(|sym| *sym);
        let Py_UniversalNewlineFgets = __library.get(b"Py_UniversalNewlineFgets\0").map(|sym| *sym);
        let PyFile_NewStdPrinter = __library.get(b"PyFile_NewStdPrinter\0").map(|sym| *sym);
        let PyFile_OpenCode = __library.get(b"PyFile_OpenCode\0").map(|sym| *sym);
        let PyFile_OpenCodeObject = __library.get(b"PyFile_OpenCodeObject\0").map(|sym| *sym);
        let PyFile_SetOpenCodeHook = __library.get(b"PyFile_SetOpenCodeHook\0").map(|sym| *sym);
        let PyCapsule_New = __library.get(b"PyCapsule_New\0").map(|sym| *sym);
        let PyCapsule_GetPointer = __library.get(b"PyCapsule_GetPointer\0").map(|sym| *sym);
        let PyCapsule_GetDestructor = __library.get(b"PyCapsule_GetDestructor\0").map(|sym| *sym);
        let PyCapsule_GetName = __library.get(b"PyCapsule_GetName\0").map(|sym| *sym);
        let PyCapsule_GetContext = __library.get(b"PyCapsule_GetContext\0").map(|sym| *sym);
        let PyCapsule_IsValid = __library.get(b"PyCapsule_IsValid\0").map(|sym| *sym);
        let PyCapsule_SetPointer = __library.get(b"PyCapsule_SetPointer\0").map(|sym| *sym);
        let PyCapsule_SetDestructor = __library.get(b"PyCapsule_SetDestructor\0").map(|sym| *sym);
        let PyCapsule_SetName = __library.get(b"PyCapsule_SetName\0").map(|sym| *sym);
        let PyCapsule_SetContext = __library.get(b"PyCapsule_SetContext\0").map(|sym| *sym);
        let PyCapsule_Import = __library.get(b"PyCapsule_Import\0").map(|sym| *sym);
        let PyCode_New = __library.get(b"PyCode_New\0").map(|sym| *sym);
        let PyCode_NewWithPosOnlyArgs = __library
            .get(b"PyCode_NewWithPosOnlyArgs\0")
            .map(|sym| *sym);
        let PyCode_NewEmpty = __library.get(b"PyCode_NewEmpty\0").map(|sym| *sym);
        let PyCode_Addr2Line = __library.get(b"PyCode_Addr2Line\0").map(|sym| *sym);
        let _PyCode_CheckLineNumber = __library.get(b"_PyCode_CheckLineNumber\0").map(|sym| *sym);
        let _PyCode_ConstantKey = __library.get(b"_PyCode_ConstantKey\0").map(|sym| *sym);
        let PyCode_Optimize = __library.get(b"PyCode_Optimize\0").map(|sym| *sym);
        let _PyCode_GetExtra = __library.get(b"_PyCode_GetExtra\0").map(|sym| *sym);
        let _PyCode_SetExtra = __library.get(b"_PyCode_SetExtra\0").map(|sym| *sym);
        let PyFrame_GetLineNumber = __library.get(b"PyFrame_GetLineNumber\0").map(|sym| *sym);
        let PyFrame_GetCode = __library.get(b"PyFrame_GetCode\0").map(|sym| *sym);
        let PyTraceBack_Here = __library.get(b"PyTraceBack_Here\0").map(|sym| *sym);
        let PyTraceBack_Print = __library.get(b"PyTraceBack_Print\0").map(|sym| *sym);
        let _Py_DisplaySourceLine = __library.get(b"_Py_DisplaySourceLine\0").map(|sym| *sym);
        let _PyTraceback_Add = __library.get(b"_PyTraceback_Add\0").map(|sym| *sym);
        let PySlice_New = __library.get(b"PySlice_New\0").map(|sym| *sym);
        let _PySlice_FromIndices = __library.get(b"_PySlice_FromIndices\0").map(|sym| *sym);
        let _PySlice_GetLongIndices = __library.get(b"_PySlice_GetLongIndices\0").map(|sym| *sym);
        let PySlice_GetIndices = __library.get(b"PySlice_GetIndices\0").map(|sym| *sym);
        let PySlice_GetIndicesEx = __library.get(b"PySlice_GetIndicesEx\0").map(|sym| *sym);
        let PySlice_Unpack = __library.get(b"PySlice_Unpack\0").map(|sym| *sym);
        let PySlice_AdjustIndices = __library.get(b"PySlice_AdjustIndices\0").map(|sym| *sym);
        let PyCell_New = __library.get(b"PyCell_New\0").map(|sym| *sym);
        let PyCell_Get = __library.get(b"PyCell_Get\0").map(|sym| *sym);
        let PyCell_Set = __library.get(b"PyCell_Set\0").map(|sym| *sym);
        let PySeqIter_New = __library.get(b"PySeqIter_New\0").map(|sym| *sym);
        let PyCallIter_New = __library.get(b"PyCallIter_New\0").map(|sym| *sym);
        let PyInterpreterState_New = __library.get(b"PyInterpreterState_New\0").map(|sym| *sym);
        let PyInterpreterState_Clear = __library.get(b"PyInterpreterState_Clear\0").map(|sym| *sym);
        let PyInterpreterState_Delete = __library
            .get(b"PyInterpreterState_Delete\0")
            .map(|sym| *sym);
        let PyInterpreterState_Get = __library.get(b"PyInterpreterState_Get\0").map(|sym| *sym);
        let PyInterpreterState_GetDict = __library
            .get(b"PyInterpreterState_GetDict\0")
            .map(|sym| *sym);
        let PyInterpreterState_GetID = __library.get(b"PyInterpreterState_GetID\0").map(|sym| *sym);
        let PyState_AddModule = __library.get(b"PyState_AddModule\0").map(|sym| *sym);
        let PyState_RemoveModule = __library.get(b"PyState_RemoveModule\0").map(|sym| *sym);
        let PyState_FindModule = __library.get(b"PyState_FindModule\0").map(|sym| *sym);
        let PyThreadState_New = __library.get(b"PyThreadState_New\0").map(|sym| *sym);
        let PyThreadState_Clear = __library.get(b"PyThreadState_Clear\0").map(|sym| *sym);
        let PyThreadState_Delete = __library.get(b"PyThreadState_Delete\0").map(|sym| *sym);
        let PyThreadState_Get = __library.get(b"PyThreadState_Get\0").map(|sym| *sym);
        let PyThreadState_Swap = __library.get(b"PyThreadState_Swap\0").map(|sym| *sym);
        let PyThreadState_GetDict = __library.get(b"PyThreadState_GetDict\0").map(|sym| *sym);
        let PyThreadState_SetAsyncExc = __library
            .get(b"PyThreadState_SetAsyncExc\0")
            .map(|sym| *sym);
        let PyThreadState_GetInterpreter = __library
            .get(b"PyThreadState_GetInterpreter\0")
            .map(|sym| *sym);
        let PyThreadState_GetFrame = __library.get(b"PyThreadState_GetFrame\0").map(|sym| *sym);
        let PyThreadState_GetID = __library.get(b"PyThreadState_GetID\0").map(|sym| *sym);
        let PyGILState_Ensure = __library.get(b"PyGILState_Ensure\0").map(|sym| *sym);
        let PyGILState_Release = __library.get(b"PyGILState_Release\0").map(|sym| *sym);
        let PyGILState_GetThisThreadState = __library
            .get(b"PyGILState_GetThisThreadState\0")
            .map(|sym| *sym);
        let PyStatus_Ok = __library.get(b"PyStatus_Ok\0").map(|sym| *sym);
        let PyStatus_Error = __library.get(b"PyStatus_Error\0").map(|sym| *sym);
        let PyStatus_NoMemory = __library.get(b"PyStatus_NoMemory\0").map(|sym| *sym);
        let PyStatus_Exit = __library.get(b"PyStatus_Exit\0").map(|sym| *sym);
        let PyStatus_IsError = __library.get(b"PyStatus_IsError\0").map(|sym| *sym);
        let PyStatus_IsExit = __library.get(b"PyStatus_IsExit\0").map(|sym| *sym);
        let PyStatus_Exception = __library.get(b"PyStatus_Exception\0").map(|sym| *sym);
        let PyWideStringList_Append = __library.get(b"PyWideStringList_Append\0").map(|sym| *sym);
        let PyWideStringList_Insert = __library.get(b"PyWideStringList_Insert\0").map(|sym| *sym);
        let PyPreConfig_InitPythonConfig = __library
            .get(b"PyPreConfig_InitPythonConfig\0")
            .map(|sym| *sym);
        let PyPreConfig_InitIsolatedConfig = __library
            .get(b"PyPreConfig_InitIsolatedConfig\0")
            .map(|sym| *sym);
        let PyConfig_InitPythonConfig = __library
            .get(b"PyConfig_InitPythonConfig\0")
            .map(|sym| *sym);
        let PyConfig_InitIsolatedConfig = __library
            .get(b"PyConfig_InitIsolatedConfig\0")
            .map(|sym| *sym);
        let PyConfig_Clear = __library.get(b"PyConfig_Clear\0").map(|sym| *sym);
        let PyConfig_SetString = __library.get(b"PyConfig_SetString\0").map(|sym| *sym);
        let PyConfig_SetBytesString = __library.get(b"PyConfig_SetBytesString\0").map(|sym| *sym);
        let PyConfig_Read = __library.get(b"PyConfig_Read\0").map(|sym| *sym);
        let PyConfig_SetBytesArgv = __library.get(b"PyConfig_SetBytesArgv\0").map(|sym| *sym);
        let PyConfig_SetArgv = __library.get(b"PyConfig_SetArgv\0").map(|sym| *sym);
        let PyConfig_SetWideStringList = __library
            .get(b"PyConfig_SetWideStringList\0")
            .map(|sym| *sym);
        let Py_GetArgcArgv = __library.get(b"Py_GetArgcArgv\0").map(|sym| *sym);
        let _PyInterpreterState_RequiresIDRef = __library
            .get(b"_PyInterpreterState_RequiresIDRef\0")
            .map(|sym| *sym);
        let _PyInterpreterState_RequireIDRef = __library
            .get(b"_PyInterpreterState_RequireIDRef\0")
            .map(|sym| *sym);
        let _PyInterpreterState_GetMainModule = __library
            .get(b"_PyInterpreterState_GetMainModule\0")
            .map(|sym| *sym);
        let _PyThreadState_Prealloc = __library.get(b"_PyThreadState_Prealloc\0").map(|sym| *sym);
        let _PyThreadState_UncheckedGet = __library
            .get(b"_PyThreadState_UncheckedGet\0")
            .map(|sym| *sym);
        let _PyThreadState_GetDict = __library.get(b"_PyThreadState_GetDict\0").map(|sym| *sym);
        let PyGILState_Check = __library.get(b"PyGILState_Check\0").map(|sym| *sym);
        let _PyGILState_GetInterpreterStateUnsafe = __library
            .get(b"_PyGILState_GetInterpreterStateUnsafe\0")
            .map(|sym| *sym);
        let _PyThread_CurrentFrames = __library.get(b"_PyThread_CurrentFrames\0").map(|sym| *sym);
        let PyInterpreterState_Main = __library.get(b"PyInterpreterState_Main\0").map(|sym| *sym);
        let PyInterpreterState_Head = __library.get(b"PyInterpreterState_Head\0").map(|sym| *sym);
        let PyInterpreterState_Next = __library.get(b"PyInterpreterState_Next\0").map(|sym| *sym);
        let PyInterpreterState_ThreadHead = __library
            .get(b"PyInterpreterState_ThreadHead\0")
            .map(|sym| *sym);
        let PyThreadState_Next = __library.get(b"PyThreadState_Next\0").map(|sym| *sym);
        let PyThreadState_DeleteCurrent = __library
            .get(b"PyThreadState_DeleteCurrent\0")
            .map(|sym| *sym);
        let _PyInterpreterState_GetEvalFrameFunc = __library
            .get(b"_PyInterpreterState_GetEvalFrameFunc\0")
            .map(|sym| *sym);
        let _PyInterpreterState_SetEvalFrameFunc = __library
            .get(b"_PyInterpreterState_SetEvalFrameFunc\0")
            .map(|sym| *sym);
        let _PyInterpreterState_GetConfig = __library
            .get(b"_PyInterpreterState_GetConfig\0")
            .map(|sym| *sym);
        let _Py_GetConfig = __library.get(b"_Py_GetConfig\0").map(|sym| *sym);
        let _PyObject_GetCrossInterpreterData = __library
            .get(b"_PyObject_GetCrossInterpreterData\0")
            .map(|sym| *sym);
        let _PyCrossInterpreterData_NewObject = __library
            .get(b"_PyCrossInterpreterData_NewObject\0")
            .map(|sym| *sym);
        let _PyCrossInterpreterData_Release = __library
            .get(b"_PyCrossInterpreterData_Release\0")
            .map(|sym| *sym);
        let _PyObject_CheckCrossInterpreterData = __library
            .get(b"_PyObject_CheckCrossInterpreterData\0")
            .map(|sym| *sym);
        let _PyCrossInterpreterData_RegisterClass = __library
            .get(b"_PyCrossInterpreterData_RegisterClass\0")
            .map(|sym| *sym);
        let _PyCrossInterpreterData_Lookup = __library
            .get(b"_PyCrossInterpreterData_Lookup\0")
            .map(|sym| *sym);
        let PyGen_New = __library.get(b"PyGen_New\0").map(|sym| *sym);
        let PyGen_NewWithQualName = __library.get(b"PyGen_NewWithQualName\0").map(|sym| *sym);
        let _PyGen_SetStopIterationValue = __library
            .get(b"_PyGen_SetStopIterationValue\0")
            .map(|sym| *sym);
        let _PyGen_FetchStopIterationValue = __library
            .get(b"_PyGen_FetchStopIterationValue\0")
            .map(|sym| *sym);
        let _PyGen_Send = __library.get(b"_PyGen_Send\0").map(|sym| *sym);
        let _PyGen_yf = __library.get(b"_PyGen_yf\0").map(|sym| *sym);
        let _PyGen_Finalize = __library.get(b"_PyGen_Finalize\0").map(|sym| *sym);
        let _PyCoro_GetAwaitableIter = __library.get(b"_PyCoro_GetAwaitableIter\0").map(|sym| *sym);
        let PyCoro_New = __library.get(b"PyCoro_New\0").map(|sym| *sym);
        let PyAsyncGen_New = __library.get(b"PyAsyncGen_New\0").map(|sym| *sym);
        let _PyAsyncGenValueWrapperNew = __library
            .get(b"_PyAsyncGenValueWrapperNew\0")
            .map(|sym| *sym);
        let PyDescr_NewMethod = __library.get(b"PyDescr_NewMethod\0").map(|sym| *sym);
        let PyDescr_NewClassMethod = __library.get(b"PyDescr_NewClassMethod\0").map(|sym| *sym);
        let PyDescr_NewMember = __library.get(b"PyDescr_NewMember\0").map(|sym| *sym);
        let PyDescr_NewGetSet = __library.get(b"PyDescr_NewGetSet\0").map(|sym| *sym);
        let PyDescr_NewWrapper = __library.get(b"PyDescr_NewWrapper\0").map(|sym| *sym);
        let PyDictProxy_New = __library.get(b"PyDictProxy_New\0").map(|sym| *sym);
        let PyWrapper_New = __library.get(b"PyWrapper_New\0").map(|sym| *sym);
        let Py_GenericAlias = __library.get(b"Py_GenericAlias\0").map(|sym| *sym);
        let _PyWarnings_Init = __library.get(b"_PyWarnings_Init\0").map(|sym| *sym);
        let PyErr_WarnEx = __library.get(b"PyErr_WarnEx\0").map(|sym| *sym);
        let PyErr_WarnFormat = __library.get(b"PyErr_WarnFormat\0").map(|sym| *sym);
        let PyErr_ResourceWarning = __library.get(b"PyErr_ResourceWarning\0").map(|sym| *sym);
        let PyErr_WarnExplicitObject = __library.get(b"PyErr_WarnExplicitObject\0").map(|sym| *sym);
        let PyErr_WarnExplicit = __library.get(b"PyErr_WarnExplicit\0").map(|sym| *sym);
        let PyErr_WarnExplicitFormat = __library.get(b"PyErr_WarnExplicitFormat\0").map(|sym| *sym);
        let _PyErr_WarnUnawaitedCoroutine = __library
            .get(b"_PyErr_WarnUnawaitedCoroutine\0")
            .map(|sym| *sym);
        let PyWeakref_NewRef = __library.get(b"PyWeakref_NewRef\0").map(|sym| *sym);
        let PyWeakref_NewProxy = __library.get(b"PyWeakref_NewProxy\0").map(|sym| *sym);
        let PyWeakref_GetObject = __library.get(b"PyWeakref_GetObject\0").map(|sym| *sym);
        let _PyWeakref_GetWeakrefCount = __library
            .get(b"_PyWeakref_GetWeakrefCount\0")
            .map(|sym| *sym);
        let _PyWeakref_ClearRef = __library.get(b"_PyWeakref_ClearRef\0").map(|sym| *sym);
        let PyStructSequence_InitType = __library
            .get(b"PyStructSequence_InitType\0")
            .map(|sym| *sym);
        let PyStructSequence_InitType2 = __library
            .get(b"PyStructSequence_InitType2\0")
            .map(|sym| *sym);
        let PyStructSequence_NewType = __library.get(b"PyStructSequence_NewType\0").map(|sym| *sym);
        let PyStructSequence_New = __library.get(b"PyStructSequence_New\0").map(|sym| *sym);
        let PyStructSequence_SetItem = __library.get(b"PyStructSequence_SetItem\0").map(|sym| *sym);
        let PyStructSequence_GetItem = __library.get(b"PyStructSequence_GetItem\0").map(|sym| *sym);
        let _PyNamespace_New = __library.get(b"_PyNamespace_New\0").map(|sym| *sym);
        let PyPickleBuffer_FromObject = __library
            .get(b"PyPickleBuffer_FromObject\0")
            .map(|sym| *sym);
        let PyPickleBuffer_GetBuffer = __library.get(b"PyPickleBuffer_GetBuffer\0").map(|sym| *sym);
        let PyPickleBuffer_Release = __library.get(b"PyPickleBuffer_Release\0").map(|sym| *sym);
        let PyCodec_Register = __library.get(b"PyCodec_Register\0").map(|sym| *sym);
        let _PyCodec_Lookup = __library.get(b"_PyCodec_Lookup\0").map(|sym| *sym);
        let _PyCodec_Forget = __library.get(b"_PyCodec_Forget\0").map(|sym| *sym);
        let PyCodec_KnownEncoding = __library.get(b"PyCodec_KnownEncoding\0").map(|sym| *sym);
        let PyCodec_Encode = __library.get(b"PyCodec_Encode\0").map(|sym| *sym);
        let PyCodec_Decode = __library.get(b"PyCodec_Decode\0").map(|sym| *sym);
        let _PyCodec_LookupTextEncoding = __library
            .get(b"_PyCodec_LookupTextEncoding\0")
            .map(|sym| *sym);
        let _PyCodec_EncodeText = __library.get(b"_PyCodec_EncodeText\0").map(|sym| *sym);
        let _PyCodec_DecodeText = __library.get(b"_PyCodec_DecodeText\0").map(|sym| *sym);
        let _PyCodecInfo_GetIncrementalDecoder = __library
            .get(b"_PyCodecInfo_GetIncrementalDecoder\0")
            .map(|sym| *sym);
        let _PyCodecInfo_GetIncrementalEncoder = __library
            .get(b"_PyCodecInfo_GetIncrementalEncoder\0")
            .map(|sym| *sym);
        let PyCodec_Encoder = __library.get(b"PyCodec_Encoder\0").map(|sym| *sym);
        let PyCodec_Decoder = __library.get(b"PyCodec_Decoder\0").map(|sym| *sym);
        let PyCodec_IncrementalEncoder = __library
            .get(b"PyCodec_IncrementalEncoder\0")
            .map(|sym| *sym);
        let PyCodec_IncrementalDecoder = __library
            .get(b"PyCodec_IncrementalDecoder\0")
            .map(|sym| *sym);
        let PyCodec_StreamReader = __library.get(b"PyCodec_StreamReader\0").map(|sym| *sym);
        let PyCodec_StreamWriter = __library.get(b"PyCodec_StreamWriter\0").map(|sym| *sym);
        let PyCodec_RegisterError = __library.get(b"PyCodec_RegisterError\0").map(|sym| *sym);
        let PyCodec_LookupError = __library.get(b"PyCodec_LookupError\0").map(|sym| *sym);
        let PyCodec_StrictErrors = __library.get(b"PyCodec_StrictErrors\0").map(|sym| *sym);
        let PyCodec_IgnoreErrors = __library.get(b"PyCodec_IgnoreErrors\0").map(|sym| *sym);
        let PyCodec_ReplaceErrors = __library.get(b"PyCodec_ReplaceErrors\0").map(|sym| *sym);
        let PyCodec_XMLCharRefReplaceErrors = __library
            .get(b"PyCodec_XMLCharRefReplaceErrors\0")
            .map(|sym| *sym);
        let PyCodec_BackslashReplaceErrors = __library
            .get(b"PyCodec_BackslashReplaceErrors\0")
            .map(|sym| *sym);
        let PyCodec_NameReplaceErrors = __library
            .get(b"PyCodec_NameReplaceErrors\0")
            .map(|sym| *sym);
        let PyErr_SetNone = __library.get(b"PyErr_SetNone\0").map(|sym| *sym);
        let PyErr_SetObject = __library.get(b"PyErr_SetObject\0").map(|sym| *sym);
        let PyErr_SetString = __library.get(b"PyErr_SetString\0").map(|sym| *sym);
        let PyErr_Occurred = __library.get(b"PyErr_Occurred\0").map(|sym| *sym);
        let PyErr_Clear = __library.get(b"PyErr_Clear\0").map(|sym| *sym);
        let PyErr_Fetch = __library.get(b"PyErr_Fetch\0").map(|sym| *sym);
        let PyErr_Restore = __library.get(b"PyErr_Restore\0").map(|sym| *sym);
        let PyErr_GetExcInfo = __library.get(b"PyErr_GetExcInfo\0").map(|sym| *sym);
        let PyErr_SetExcInfo = __library.get(b"PyErr_SetExcInfo\0").map(|sym| *sym);
        let Py_FatalError = __library.get(b"Py_FatalError\0").map(|sym| *sym);
        let PyErr_GivenExceptionMatches = __library
            .get(b"PyErr_GivenExceptionMatches\0")
            .map(|sym| *sym);
        let PyErr_ExceptionMatches = __library.get(b"PyErr_ExceptionMatches\0").map(|sym| *sym);
        let PyErr_NormalizeException = __library.get(b"PyErr_NormalizeException\0").map(|sym| *sym);
        let PyException_SetTraceback = __library.get(b"PyException_SetTraceback\0").map(|sym| *sym);
        let PyException_GetTraceback = __library.get(b"PyException_GetTraceback\0").map(|sym| *sym);
        let PyException_GetCause = __library.get(b"PyException_GetCause\0").map(|sym| *sym);
        let PyException_SetCause = __library.get(b"PyException_SetCause\0").map(|sym| *sym);
        let PyException_GetContext = __library.get(b"PyException_GetContext\0").map(|sym| *sym);
        let PyException_SetContext = __library.get(b"PyException_SetContext\0").map(|sym| *sym);
        let PyExceptionClass_Name = __library.get(b"PyExceptionClass_Name\0").map(|sym| *sym);
        let PyErr_BadArgument = __library.get(b"PyErr_BadArgument\0").map(|sym| *sym);
        let PyErr_NoMemory = __library.get(b"PyErr_NoMemory\0").map(|sym| *sym);
        let PyErr_SetFromErrno = __library.get(b"PyErr_SetFromErrno\0").map(|sym| *sym);
        let PyErr_SetFromErrnoWithFilenameObject = __library
            .get(b"PyErr_SetFromErrnoWithFilenameObject\0")
            .map(|sym| *sym);
        let PyErr_SetFromErrnoWithFilenameObjects = __library
            .get(b"PyErr_SetFromErrnoWithFilenameObjects\0")
            .map(|sym| *sym);
        let PyErr_SetFromErrnoWithFilename = __library
            .get(b"PyErr_SetFromErrnoWithFilename\0")
            .map(|sym| *sym);
        let PyErr_Format = __library.get(b"PyErr_Format\0").map(|sym| *sym);
        let PyErr_FormatV = __library.get(b"PyErr_FormatV\0").map(|sym| *sym);
        let PyErr_SetImportErrorSubclass = __library
            .get(b"PyErr_SetImportErrorSubclass\0")
            .map(|sym| *sym);
        let PyErr_SetImportError = __library.get(b"PyErr_SetImportError\0").map(|sym| *sym);
        let PyErr_BadInternalCall = __library.get(b"PyErr_BadInternalCall\0").map(|sym| *sym);
        let _PyErr_BadInternalCall = __library.get(b"_PyErr_BadInternalCall\0").map(|sym| *sym);
        let PyErr_NewException = __library.get(b"PyErr_NewException\0").map(|sym| *sym);
        let PyErr_NewExceptionWithDoc = __library
            .get(b"PyErr_NewExceptionWithDoc\0")
            .map(|sym| *sym);
        let PyErr_WriteUnraisable = __library.get(b"PyErr_WriteUnraisable\0").map(|sym| *sym);
        let PyErr_CheckSignals = __library.get(b"PyErr_CheckSignals\0").map(|sym| *sym);
        let PyErr_SetInterrupt = __library.get(b"PyErr_SetInterrupt\0").map(|sym| *sym);
        let PyErr_SyntaxLocation = __library.get(b"PyErr_SyntaxLocation\0").map(|sym| *sym);
        let PyErr_SyntaxLocationEx = __library.get(b"PyErr_SyntaxLocationEx\0").map(|sym| *sym);
        let PyErr_ProgramText = __library.get(b"PyErr_ProgramText\0").map(|sym| *sym);
        let PyUnicodeDecodeError_Create = __library
            .get(b"PyUnicodeDecodeError_Create\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_GetEncoding = __library
            .get(b"PyUnicodeEncodeError_GetEncoding\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_GetEncoding = __library
            .get(b"PyUnicodeDecodeError_GetEncoding\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_GetObject = __library
            .get(b"PyUnicodeEncodeError_GetObject\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_GetObject = __library
            .get(b"PyUnicodeDecodeError_GetObject\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_GetObject = __library
            .get(b"PyUnicodeTranslateError_GetObject\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_GetStart = __library
            .get(b"PyUnicodeEncodeError_GetStart\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_GetStart = __library
            .get(b"PyUnicodeDecodeError_GetStart\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_GetStart = __library
            .get(b"PyUnicodeTranslateError_GetStart\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_SetStart = __library
            .get(b"PyUnicodeEncodeError_SetStart\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_SetStart = __library
            .get(b"PyUnicodeDecodeError_SetStart\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_SetStart = __library
            .get(b"PyUnicodeTranslateError_SetStart\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_GetEnd = __library
            .get(b"PyUnicodeEncodeError_GetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_GetEnd = __library
            .get(b"PyUnicodeDecodeError_GetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_GetEnd = __library
            .get(b"PyUnicodeTranslateError_GetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_SetEnd = __library
            .get(b"PyUnicodeEncodeError_SetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_SetEnd = __library
            .get(b"PyUnicodeDecodeError_SetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_SetEnd = __library
            .get(b"PyUnicodeTranslateError_SetEnd\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_GetReason = __library
            .get(b"PyUnicodeEncodeError_GetReason\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_GetReason = __library
            .get(b"PyUnicodeDecodeError_GetReason\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_GetReason = __library
            .get(b"PyUnicodeTranslateError_GetReason\0")
            .map(|sym| *sym);
        let PyUnicodeEncodeError_SetReason = __library
            .get(b"PyUnicodeEncodeError_SetReason\0")
            .map(|sym| *sym);
        let PyUnicodeDecodeError_SetReason = __library
            .get(b"PyUnicodeDecodeError_SetReason\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_SetReason = __library
            .get(b"PyUnicodeTranslateError_SetReason\0")
            .map(|sym| *sym);
        let PyOS_snprintf = __library.get(b"PyOS_snprintf\0").map(|sym| *sym);
        let PyOS_vsnprintf = __library.get(b"PyOS_vsnprintf\0").map(|sym| *sym);
        let _PyErr_SetKeyError = __library.get(b"_PyErr_SetKeyError\0").map(|sym| *sym);
        let _PyErr_GetTopmostException = __library
            .get(b"_PyErr_GetTopmostException\0")
            .map(|sym| *sym);
        let _PyErr_GetExcInfo = __library.get(b"_PyErr_GetExcInfo\0").map(|sym| *sym);
        let _PyErr_ChainExceptions = __library.get(b"_PyErr_ChainExceptions\0").map(|sym| *sym);
        let _PyErr_FormatFromCause = __library.get(b"_PyErr_FormatFromCause\0").map(|sym| *sym);
        let _PyErr_TrySetFromCause = __library.get(b"_PyErr_TrySetFromCause\0").map(|sym| *sym);
        let PySignal_SetWakeupFd = __library.get(b"PySignal_SetWakeupFd\0").map(|sym| *sym);
        let _PyErr_CheckSignals = __library.get(b"_PyErr_CheckSignals\0").map(|sym| *sym);
        let PyErr_SyntaxLocationObject = __library
            .get(b"PyErr_SyntaxLocationObject\0")
            .map(|sym| *sym);
        let PyErr_ProgramTextObject = __library.get(b"PyErr_ProgramTextObject\0").map(|sym| *sym);
        let PyUnicodeEncodeError_Create = __library
            .get(b"PyUnicodeEncodeError_Create\0")
            .map(|sym| *sym);
        let PyUnicodeTranslateError_Create = __library
            .get(b"PyUnicodeTranslateError_Create\0")
            .map(|sym| *sym);
        let _PyUnicodeTranslateError_Create = __library
            .get(b"_PyUnicodeTranslateError_Create\0")
            .map(|sym| *sym);
        let _PyErr_WriteUnraisableMsg = __library
            .get(b"_PyErr_WriteUnraisableMsg\0")
            .map(|sym| *sym);
        let _Py_FatalErrorFunc = __library.get(b"_Py_FatalErrorFunc\0").map(|sym| *sym);
        let _Py_FatalErrorFormat = __library.get(b"_Py_FatalErrorFormat\0").map(|sym| *sym);
        let PyThread_init_thread = __library.get(b"PyThread_init_thread\0").map(|sym| *sym);
        let PyThread_start_new_thread = __library
            .get(b"PyThread_start_new_thread\0")
            .map(|sym| *sym);
        let PyThread_exit_thread = __library.get(b"PyThread_exit_thread\0").map(|sym| *sym);
        let PyThread_get_thread_ident = __library
            .get(b"PyThread_get_thread_ident\0")
            .map(|sym| *sym);
        let PyThread_get_thread_native_id = __library
            .get(b"PyThread_get_thread_native_id\0")
            .map(|sym| *sym);
        let PyThread_allocate_lock = __library.get(b"PyThread_allocate_lock\0").map(|sym| *sym);
        let PyThread_free_lock = __library.get(b"PyThread_free_lock\0").map(|sym| *sym);
        let PyThread_acquire_lock = __library.get(b"PyThread_acquire_lock\0").map(|sym| *sym);
        let _PyThread_at_fork_reinit = __library.get(b"_PyThread_at_fork_reinit\0").map(|sym| *sym);
        let PyThread_acquire_lock_timed = __library
            .get(b"PyThread_acquire_lock_timed\0")
            .map(|sym| *sym);
        let PyThread_release_lock = __library.get(b"PyThread_release_lock\0").map(|sym| *sym);
        let PyThread_get_stacksize = __library.get(b"PyThread_get_stacksize\0").map(|sym| *sym);
        let PyThread_set_stacksize = __library.get(b"PyThread_set_stacksize\0").map(|sym| *sym);
        let PyThread_GetInfo = __library.get(b"PyThread_GetInfo\0").map(|sym| *sym);
        let PyThread_create_key = __library.get(b"PyThread_create_key\0").map(|sym| *sym);
        let PyThread_delete_key = __library.get(b"PyThread_delete_key\0").map(|sym| *sym);
        let PyThread_set_key_value = __library.get(b"PyThread_set_key_value\0").map(|sym| *sym);
        let PyThread_get_key_value = __library.get(b"PyThread_get_key_value\0").map(|sym| *sym);
        let PyThread_delete_key_value = __library
            .get(b"PyThread_delete_key_value\0")
            .map(|sym| *sym);
        let PyThread_ReInitTLS = __library.get(b"PyThread_ReInitTLS\0").map(|sym| *sym);
        let PyThread_tss_alloc = __library.get(b"PyThread_tss_alloc\0").map(|sym| *sym);
        let PyThread_tss_free = __library.get(b"PyThread_tss_free\0").map(|sym| *sym);
        let PyThread_tss_is_created = __library.get(b"PyThread_tss_is_created\0").map(|sym| *sym);
        let PyThread_tss_create = __library.get(b"PyThread_tss_create\0").map(|sym| *sym);
        let PyThread_tss_delete = __library.get(b"PyThread_tss_delete\0").map(|sym| *sym);
        let PyThread_tss_set = __library.get(b"PyThread_tss_set\0").map(|sym| *sym);
        let PyThread_tss_get = __library.get(b"PyThread_tss_get\0").map(|sym| *sym);
        let PyContext_New = __library.get(b"PyContext_New\0").map(|sym| *sym);
        let PyContext_Copy = __library.get(b"PyContext_Copy\0").map(|sym| *sym);
        let PyContext_CopyCurrent = __library.get(b"PyContext_CopyCurrent\0").map(|sym| *sym);
        let PyContext_Enter = __library.get(b"PyContext_Enter\0").map(|sym| *sym);
        let PyContext_Exit = __library.get(b"PyContext_Exit\0").map(|sym| *sym);
        let PyContextVar_New = __library.get(b"PyContextVar_New\0").map(|sym| *sym);
        let PyContextVar_Get = __library.get(b"PyContextVar_Get\0").map(|sym| *sym);
        let PyContextVar_Set = __library.get(b"PyContextVar_Set\0").map(|sym| *sym);
        let PyContextVar_Reset = __library.get(b"PyContextVar_Reset\0").map(|sym| *sym);
        let _PyContext_NewHamtForTests = __library
            .get(b"_PyContext_NewHamtForTests\0")
            .map(|sym| *sym);
        let PyArena_New = __library.get(b"PyArena_New\0").map(|sym| *sym);
        let PyArena_Free = __library.get(b"PyArena_Free\0").map(|sym| *sym);
        let PyArena_Malloc = __library.get(b"PyArena_Malloc\0").map(|sym| *sym);
        let PyArena_AddPyObject = __library.get(b"PyArena_AddPyObject\0").map(|sym| *sym);
        let _Py_VaBuildValue_SizeT = __library.get(b"_Py_VaBuildValue_SizeT\0").map(|sym| *sym);
        let _Py_VaBuildStack_SizeT = __library.get(b"_Py_VaBuildStack_SizeT\0").map(|sym| *sym);
        let PyArg_Parse = __library.get(b"PyArg_Parse\0").map(|sym| *sym);
        let PyArg_ParseTuple = __library.get(b"PyArg_ParseTuple\0").map(|sym| *sym);
        let PyArg_ParseTupleAndKeywords = __library
            .get(b"PyArg_ParseTupleAndKeywords\0")
            .map(|sym| *sym);
        let PyArg_VaParse = __library.get(b"PyArg_VaParse\0").map(|sym| *sym);
        let PyArg_VaParseTupleAndKeywords = __library
            .get(b"PyArg_VaParseTupleAndKeywords\0")
            .map(|sym| *sym);
        let PyArg_ValidateKeywordArguments = __library
            .get(b"PyArg_ValidateKeywordArguments\0")
            .map(|sym| *sym);
        let PyArg_UnpackTuple = __library.get(b"PyArg_UnpackTuple\0").map(|sym| *sym);
        let Py_BuildValue = __library.get(b"Py_BuildValue\0").map(|sym| *sym);
        let _Py_BuildValue_SizeT = __library.get(b"_Py_BuildValue_SizeT\0").map(|sym| *sym);
        let _PyArg_UnpackStack = __library.get(b"_PyArg_UnpackStack\0").map(|sym| *sym);
        let _PyArg_NoKeywords = __library.get(b"_PyArg_NoKeywords\0").map(|sym| *sym);
        let _PyArg_NoKwnames = __library.get(b"_PyArg_NoKwnames\0").map(|sym| *sym);
        let _PyArg_NoPositional = __library.get(b"_PyArg_NoPositional\0").map(|sym| *sym);
        let _PyArg_BadArgument = __library.get(b"_PyArg_BadArgument\0").map(|sym| *sym);
        let _PyArg_CheckPositional = __library.get(b"_PyArg_CheckPositional\0").map(|sym| *sym);
        let Py_VaBuildValue = __library.get(b"Py_VaBuildValue\0").map(|sym| *sym);
        let _Py_VaBuildStack = __library.get(b"_Py_VaBuildStack\0").map(|sym| *sym);
        let _PyArg_ParseTupleAndKeywordsFast = __library
            .get(b"_PyArg_ParseTupleAndKeywordsFast\0")
            .map(|sym| *sym);
        let _PyArg_ParseStack = __library.get(b"_PyArg_ParseStack\0").map(|sym| *sym);
        let _PyArg_ParseStackAndKeywords = __library
            .get(b"_PyArg_ParseStackAndKeywords\0")
            .map(|sym| *sym);
        let _PyArg_VaParseTupleAndKeywordsFast = __library
            .get(b"_PyArg_VaParseTupleAndKeywordsFast\0")
            .map(|sym| *sym);
        let _PyArg_UnpackKeywords = __library.get(b"_PyArg_UnpackKeywords\0").map(|sym| *sym);
        let _PyArg_Fini = __library.get(b"_PyArg_Fini\0").map(|sym| *sym);
        let PyModule_AddObject = __library.get(b"PyModule_AddObject\0").map(|sym| *sym);
        let PyModule_AddIntConstant = __library.get(b"PyModule_AddIntConstant\0").map(|sym| *sym);
        let PyModule_AddStringConstant = __library
            .get(b"PyModule_AddStringConstant\0")
            .map(|sym| *sym);
        let PyModule_AddType = __library.get(b"PyModule_AddType\0").map(|sym| *sym);
        let PyModule_SetDocString = __library.get(b"PyModule_SetDocString\0").map(|sym| *sym);
        let PyModule_AddFunctions = __library.get(b"PyModule_AddFunctions\0").map(|sym| *sym);
        let PyModule_ExecDef = __library.get(b"PyModule_ExecDef\0").map(|sym| *sym);
        let PyModule_Create2 = __library.get(b"PyModule_Create2\0").map(|sym| *sym);
        let _PyModule_CreateInitialized = __library
            .get(b"_PyModule_CreateInitialized\0")
            .map(|sym| *sym);
        let PyModule_FromDefAndSpec2 = __library.get(b"PyModule_FromDefAndSpec2\0").map(|sym| *sym);
        let PyNode_Compile = __library.get(b"PyNode_Compile\0").map(|sym| *sym);
        let PyAST_CompileEx = __library.get(b"PyAST_CompileEx\0").map(|sym| *sym);
        let PyAST_CompileObject = __library.get(b"PyAST_CompileObject\0").map(|sym| *sym);
        let PyFuture_FromAST = __library.get(b"PyFuture_FromAST\0").map(|sym| *sym);
        let PyFuture_FromASTObject = __library.get(b"PyFuture_FromASTObject\0").map(|sym| *sym);
        let _Py_Mangle = __library.get(b"_Py_Mangle\0").map(|sym| *sym);
        let PyCompile_OpcodeStackEffect = __library
            .get(b"PyCompile_OpcodeStackEffect\0")
            .map(|sym| *sym);
        let PyCompile_OpcodeStackEffectWithJump = __library
            .get(b"PyCompile_OpcodeStackEffectWithJump\0")
            .map(|sym| *sym);
        let _PyAST_Optimize = __library.get(b"_PyAST_Optimize\0").map(|sym| *sym);
        let PyRun_SimpleStringFlags = __library.get(b"PyRun_SimpleStringFlags\0").map(|sym| *sym);
        let PyRun_AnyFileExFlags = __library.get(b"PyRun_AnyFileExFlags\0").map(|sym| *sym);
        let PyRun_SimpleFileExFlags = __library.get(b"PyRun_SimpleFileExFlags\0").map(|sym| *sym);
        let PyRun_InteractiveOneFlags = __library
            .get(b"PyRun_InteractiveOneFlags\0")
            .map(|sym| *sym);
        let PyRun_InteractiveOneObject = __library
            .get(b"PyRun_InteractiveOneObject\0")
            .map(|sym| *sym);
        let PyRun_InteractiveLoopFlags = __library
            .get(b"PyRun_InteractiveLoopFlags\0")
            .map(|sym| *sym);
        let PyParser_ASTFromString = __library.get(b"PyParser_ASTFromString\0").map(|sym| *sym);
        let PyParser_ASTFromStringObject = __library
            .get(b"PyParser_ASTFromStringObject\0")
            .map(|sym| *sym);
        let PyParser_ASTFromFile = __library.get(b"PyParser_ASTFromFile\0").map(|sym| *sym);
        let PyParser_ASTFromFileObject = __library
            .get(b"PyParser_ASTFromFileObject\0")
            .map(|sym| *sym);
        let PyParser_SimpleParseStringFlags = __library
            .get(b"PyParser_SimpleParseStringFlags\0")
            .map(|sym| *sym);
        let PyParser_SimpleParseStringFlagsFilename = __library
            .get(b"PyParser_SimpleParseStringFlagsFilename\0")
            .map(|sym| *sym);
        let PyParser_SimpleParseFileFlags = __library
            .get(b"PyParser_SimpleParseFileFlags\0")
            .map(|sym| *sym);
        let PyRun_StringFlags = __library.get(b"PyRun_StringFlags\0").map(|sym| *sym);
        let PyRun_FileExFlags = __library.get(b"PyRun_FileExFlags\0").map(|sym| *sym);
        let Py_CompileStringExFlags = __library.get(b"Py_CompileStringExFlags\0").map(|sym| *sym);
        let Py_CompileStringObject = __library.get(b"Py_CompileStringObject\0").map(|sym| *sym);
        let Py_SymtableString = __library.get(b"Py_SymtableString\0").map(|sym| *sym);
        let _Py_SourceAsString = __library.get(b"_Py_SourceAsString\0").map(|sym| *sym);
        let Py_SymtableStringObject = __library.get(b"Py_SymtableStringObject\0").map(|sym| *sym);
        let _Py_SymtableStringObjectFlags = __library
            .get(b"_Py_SymtableStringObjectFlags\0")
            .map(|sym| *sym);
        let PyErr_Print = __library.get(b"PyErr_Print\0").map(|sym| *sym);
        let PyErr_PrintEx = __library.get(b"PyErr_PrintEx\0").map(|sym| *sym);
        let PyErr_Display = __library.get(b"PyErr_Display\0").map(|sym| *sym);
        let PyRun_String = __library.get(b"PyRun_String\0").map(|sym| *sym);
        let PyRun_AnyFile = __library.get(b"PyRun_AnyFile\0").map(|sym| *sym);
        let PyRun_AnyFileEx = __library.get(b"PyRun_AnyFileEx\0").map(|sym| *sym);
        let PyRun_AnyFileFlags = __library.get(b"PyRun_AnyFileFlags\0").map(|sym| *sym);
        let PyRun_SimpleString = __library.get(b"PyRun_SimpleString\0").map(|sym| *sym);
        let PyRun_SimpleFile = __library.get(b"PyRun_SimpleFile\0").map(|sym| *sym);
        let PyRun_SimpleFileEx = __library.get(b"PyRun_SimpleFileEx\0").map(|sym| *sym);
        let PyRun_InteractiveOne = __library.get(b"PyRun_InteractiveOne\0").map(|sym| *sym);
        let PyRun_InteractiveLoop = __library.get(b"PyRun_InteractiveLoop\0").map(|sym| *sym);
        let PyRun_File = __library.get(b"PyRun_File\0").map(|sym| *sym);
        let PyRun_FileEx = __library.get(b"PyRun_FileEx\0").map(|sym| *sym);
        let PyRun_FileFlags = __library.get(b"PyRun_FileFlags\0").map(|sym| *sym);
        let PyOS_Readline = __library.get(b"PyOS_Readline\0").map(|sym| *sym);
        let Py_Initialize = __library.get(b"Py_Initialize\0").map(|sym| *sym);
        let Py_InitializeEx = __library.get(b"Py_InitializeEx\0").map(|sym| *sym);
        let Py_Finalize = __library.get(b"Py_Finalize\0").map(|sym| *sym);
        let Py_FinalizeEx = __library.get(b"Py_FinalizeEx\0").map(|sym| *sym);
        let Py_IsInitialized = __library.get(b"Py_IsInitialized\0").map(|sym| *sym);
        let Py_NewInterpreter = __library.get(b"Py_NewInterpreter\0").map(|sym| *sym);
        let Py_EndInterpreter = __library.get(b"Py_EndInterpreter\0").map(|sym| *sym);
        let Py_AtExit = __library.get(b"Py_AtExit\0").map(|sym| *sym);
        let Py_Exit = __library.get(b"Py_Exit\0").map(|sym| *sym);
        let Py_Main = __library.get(b"Py_Main\0").map(|sym| *sym);
        let Py_FrozenMain = __library.get(b"Py_FrozenMain\0").map(|sym| *sym);
        let Py_BytesMain = __library.get(b"Py_BytesMain\0").map(|sym| *sym);
        let Py_SetProgramName = __library.get(b"Py_SetProgramName\0").map(|sym| *sym);
        let Py_GetProgramName = __library.get(b"Py_GetProgramName\0").map(|sym| *sym);
        let Py_SetPythonHome = __library.get(b"Py_SetPythonHome\0").map(|sym| *sym);
        let Py_GetPythonHome = __library.get(b"Py_GetPythonHome\0").map(|sym| *sym);
        let Py_GetProgramFullPath = __library.get(b"Py_GetProgramFullPath\0").map(|sym| *sym);
        let Py_GetPrefix = __library.get(b"Py_GetPrefix\0").map(|sym| *sym);
        let Py_GetExecPrefix = __library.get(b"Py_GetExecPrefix\0").map(|sym| *sym);
        let Py_GetPath = __library.get(b"Py_GetPath\0").map(|sym| *sym);
        let Py_SetPath = __library.get(b"Py_SetPath\0").map(|sym| *sym);
        let Py_GetVersion = __library.get(b"Py_GetVersion\0").map(|sym| *sym);
        let Py_GetPlatform = __library.get(b"Py_GetPlatform\0").map(|sym| *sym);
        let Py_GetCopyright = __library.get(b"Py_GetCopyright\0").map(|sym| *sym);
        let Py_GetCompiler = __library.get(b"Py_GetCompiler\0").map(|sym| *sym);
        let Py_GetBuildInfo = __library.get(b"Py_GetBuildInfo\0").map(|sym| *sym);
        let PyOS_getsig = __library.get(b"PyOS_getsig\0").map(|sym| *sym);
        let PyOS_setsig = __library.get(b"PyOS_setsig\0").map(|sym| *sym);
        let Py_SetStandardStreamEncoding = __library
            .get(b"Py_SetStandardStreamEncoding\0")
            .map(|sym| *sym);
        let Py_PreInitialize = __library.get(b"Py_PreInitialize\0").map(|sym| *sym);
        let Py_PreInitializeFromBytesArgs = __library
            .get(b"Py_PreInitializeFromBytesArgs\0")
            .map(|sym| *sym);
        let Py_PreInitializeFromArgs = __library.get(b"Py_PreInitializeFromArgs\0").map(|sym| *sym);
        let _Py_IsCoreInitialized = __library.get(b"_Py_IsCoreInitialized\0").map(|sym| *sym);
        let Py_InitializeFromConfig = __library.get(b"Py_InitializeFromConfig\0").map(|sym| *sym);
        let _Py_InitializeMain = __library.get(b"_Py_InitializeMain\0").map(|sym| *sym);
        let Py_RunMain = __library.get(b"Py_RunMain\0").map(|sym| *sym);
        let Py_ExitStatusException = __library.get(b"Py_ExitStatusException\0").map(|sym| *sym);
        let _Py_PyAtExit = __library.get(b"_Py_PyAtExit\0").map(|sym| *sym);
        let _Py_RestoreSignals = __library.get(b"_Py_RestoreSignals\0").map(|sym| *sym);
        let Py_FdIsInteractive = __library.get(b"Py_FdIsInteractive\0").map(|sym| *sym);
        let _Py_SetProgramFullPath = __library.get(b"_Py_SetProgramFullPath\0").map(|sym| *sym);
        let _Py_gitidentifier = __library.get(b"_Py_gitidentifier\0").map(|sym| *sym);
        let _Py_gitversion = __library.get(b"_Py_gitversion\0").map(|sym| *sym);
        let _Py_IsFinalizing = __library.get(b"_Py_IsFinalizing\0").map(|sym| *sym);
        let _PyOS_URandom = __library.get(b"_PyOS_URandom\0").map(|sym| *sym);
        let _PyOS_URandomNonblock = __library.get(b"_PyOS_URandomNonblock\0").map(|sym| *sym);
        let _Py_CoerceLegacyLocale = __library.get(b"_Py_CoerceLegacyLocale\0").map(|sym| *sym);
        let _Py_LegacyLocaleDetected = __library.get(b"_Py_LegacyLocaleDetected\0").map(|sym| *sym);
        let _Py_SetLocaleFromEnv = __library.get(b"_Py_SetLocaleFromEnv\0").map(|sym| *sym);
        let _Py_NewInterpreter = __library.get(b"_Py_NewInterpreter\0").map(|sym| *sym);
        let PyEval_CallObjectWithKeywords = __library
            .get(b"PyEval_CallObjectWithKeywords\0")
            .map(|sym| *sym);
        let PyEval_CallFunction = __library.get(b"PyEval_CallFunction\0").map(|sym| *sym);
        let PyEval_CallMethod = __library.get(b"PyEval_CallMethod\0").map(|sym| *sym);
        let PyEval_GetBuiltins = __library.get(b"PyEval_GetBuiltins\0").map(|sym| *sym);
        let PyEval_GetGlobals = __library.get(b"PyEval_GetGlobals\0").map(|sym| *sym);
        let PyEval_GetLocals = __library.get(b"PyEval_GetLocals\0").map(|sym| *sym);
        let PyEval_GetFrame = __library.get(b"PyEval_GetFrame\0").map(|sym| *sym);
        let Py_AddPendingCall = __library.get(b"Py_AddPendingCall\0").map(|sym| *sym);
        let Py_MakePendingCalls = __library.get(b"Py_MakePendingCalls\0").map(|sym| *sym);
        let Py_SetRecursionLimit = __library.get(b"Py_SetRecursionLimit\0").map(|sym| *sym);
        let Py_GetRecursionLimit = __library.get(b"Py_GetRecursionLimit\0").map(|sym| *sym);
        let Py_EnterRecursiveCall = __library.get(b"Py_EnterRecursiveCall\0").map(|sym| *sym);
        let Py_LeaveRecursiveCall = __library.get(b"Py_LeaveRecursiveCall\0").map(|sym| *sym);
        let PyEval_GetFuncName = __library.get(b"PyEval_GetFuncName\0").map(|sym| *sym);
        let PyEval_GetFuncDesc = __library.get(b"PyEval_GetFuncDesc\0").map(|sym| *sym);
        let PyEval_EvalFrame = __library.get(b"PyEval_EvalFrame\0").map(|sym| *sym);
        let PyEval_EvalFrameEx = __library.get(b"PyEval_EvalFrameEx\0").map(|sym| *sym);
        let PyEval_SaveThread = __library.get(b"PyEval_SaveThread\0").map(|sym| *sym);
        let PyEval_RestoreThread = __library.get(b"PyEval_RestoreThread\0").map(|sym| *sym);
        let PyEval_ThreadsInitialized = __library
            .get(b"PyEval_ThreadsInitialized\0")
            .map(|sym| *sym);
        let PyEval_InitThreads = __library.get(b"PyEval_InitThreads\0").map(|sym| *sym);
        let PyEval_AcquireLock = __library.get(b"PyEval_AcquireLock\0").map(|sym| *sym);
        let PyEval_ReleaseLock = __library.get(b"PyEval_ReleaseLock\0").map(|sym| *sym);
        let PyEval_AcquireThread = __library.get(b"PyEval_AcquireThread\0").map(|sym| *sym);
        let PyEval_ReleaseThread = __library.get(b"PyEval_ReleaseThread\0").map(|sym| *sym);
        let PyEval_SetProfile = __library.get(b"PyEval_SetProfile\0").map(|sym| *sym);
        let _PyEval_SetProfile = __library.get(b"_PyEval_SetProfile\0").map(|sym| *sym);
        let PyEval_SetTrace = __library.get(b"PyEval_SetTrace\0").map(|sym| *sym);
        let _PyEval_SetTrace = __library.get(b"_PyEval_SetTrace\0").map(|sym| *sym);
        let _PyEval_GetCoroutineOriginTrackingDepth = __library
            .get(b"_PyEval_GetCoroutineOriginTrackingDepth\0")
            .map(|sym| *sym);
        let _PyEval_SetAsyncGenFirstiter = __library
            .get(b"_PyEval_SetAsyncGenFirstiter\0")
            .map(|sym| *sym);
        let _PyEval_GetAsyncGenFirstiter = __library
            .get(b"_PyEval_GetAsyncGenFirstiter\0")
            .map(|sym| *sym);
        let _PyEval_SetAsyncGenFinalizer = __library
            .get(b"_PyEval_SetAsyncGenFinalizer\0")
            .map(|sym| *sym);
        let _PyEval_GetAsyncGenFinalizer = __library
            .get(b"_PyEval_GetAsyncGenFinalizer\0")
            .map(|sym| *sym);
        let _PyEval_GetBuiltinId = __library.get(b"_PyEval_GetBuiltinId\0").map(|sym| *sym);
        let PyEval_MergeCompilerFlags = __library
            .get(b"PyEval_MergeCompilerFlags\0")
            .map(|sym| *sym);
        let _PyEval_EvalFrameDefault = __library.get(b"_PyEval_EvalFrameDefault\0").map(|sym| *sym);
        let _PyEval_SetSwitchInterval = __library
            .get(b"_PyEval_SetSwitchInterval\0")
            .map(|sym| *sym);
        let _PyEval_GetSwitchInterval = __library
            .get(b"_PyEval_GetSwitchInterval\0")
            .map(|sym| *sym);
        let _PyEval_RequestCodeExtraIndex = __library
            .get(b"_PyEval_RequestCodeExtraIndex\0")
            .map(|sym| *sym);
        let _PyEval_SliceIndex = __library.get(b"_PyEval_SliceIndex\0").map(|sym| *sym);
        let _PyEval_SliceIndexNotNone = __library
            .get(b"_PyEval_SliceIndexNotNone\0")
            .map(|sym| *sym);
        let PySys_GetObject = __library.get(b"PySys_GetObject\0").map(|sym| *sym);
        let PySys_SetObject = __library.get(b"PySys_SetObject\0").map(|sym| *sym);
        let PySys_SetArgv = __library.get(b"PySys_SetArgv\0").map(|sym| *sym);
        let PySys_SetArgvEx = __library.get(b"PySys_SetArgvEx\0").map(|sym| *sym);
        let PySys_SetPath = __library.get(b"PySys_SetPath\0").map(|sym| *sym);
        let PySys_WriteStdout = __library.get(b"PySys_WriteStdout\0").map(|sym| *sym);
        let PySys_WriteStderr = __library.get(b"PySys_WriteStderr\0").map(|sym| *sym);
        let PySys_FormatStdout = __library.get(b"PySys_FormatStdout\0").map(|sym| *sym);
        let PySys_FormatStderr = __library.get(b"PySys_FormatStderr\0").map(|sym| *sym);
        let PySys_ResetWarnOptions = __library.get(b"PySys_ResetWarnOptions\0").map(|sym| *sym);
        let PySys_AddWarnOption = __library.get(b"PySys_AddWarnOption\0").map(|sym| *sym);
        let PySys_AddWarnOptionUnicode = __library
            .get(b"PySys_AddWarnOptionUnicode\0")
            .map(|sym| *sym);
        let PySys_HasWarnOptions = __library.get(b"PySys_HasWarnOptions\0").map(|sym| *sym);
        let PySys_AddXOption = __library.get(b"PySys_AddXOption\0").map(|sym| *sym);
        let PySys_GetXOptions = __library.get(b"PySys_GetXOptions\0").map(|sym| *sym);
        let _PySys_GetObjectId = __library.get(b"_PySys_GetObjectId\0").map(|sym| *sym);
        let _PySys_SetObjectId = __library.get(b"_PySys_SetObjectId\0").map(|sym| *sym);
        let _PySys_GetSizeOf = __library.get(b"_PySys_GetSizeOf\0").map(|sym| *sym);
        let PySys_Audit = __library.get(b"PySys_Audit\0").map(|sym| *sym);
        let PySys_AddAuditHook = __library.get(b"PySys_AddAuditHook\0").map(|sym| *sym);
        let PyOS_FSPath = __library.get(b"PyOS_FSPath\0").map(|sym| *sym);
        let PyOS_InterruptOccurred = __library.get(b"PyOS_InterruptOccurred\0").map(|sym| *sym);
        let PyOS_InitInterrupts = __library.get(b"PyOS_InitInterrupts\0").map(|sym| *sym);
        let PyOS_BeforeFork = __library.get(b"PyOS_BeforeFork\0").map(|sym| *sym);
        let PyOS_AfterFork_Parent = __library.get(b"PyOS_AfterFork_Parent\0").map(|sym| *sym);
        let PyOS_AfterFork_Child = __library.get(b"PyOS_AfterFork_Child\0").map(|sym| *sym);
        let PyOS_AfterFork = __library.get(b"PyOS_AfterFork\0").map(|sym| *sym);
        let _PyOS_IsMainThread = __library.get(b"_PyOS_IsMainThread\0").map(|sym| *sym);
        let _PySignal_AfterFork = __library.get(b"_PySignal_AfterFork\0").map(|sym| *sym);
        let PyImport_GetMagicNumber = __library.get(b"PyImport_GetMagicNumber\0").map(|sym| *sym);
        let PyImport_GetMagicTag = __library.get(b"PyImport_GetMagicTag\0").map(|sym| *sym);
        let PyImport_ExecCodeModule = __library.get(b"PyImport_ExecCodeModule\0").map(|sym| *sym);
        let PyImport_ExecCodeModuleEx = __library
            .get(b"PyImport_ExecCodeModuleEx\0")
            .map(|sym| *sym);
        let PyImport_ExecCodeModuleWithPathnames = __library
            .get(b"PyImport_ExecCodeModuleWithPathnames\0")
            .map(|sym| *sym);
        let PyImport_ExecCodeModuleObject = __library
            .get(b"PyImport_ExecCodeModuleObject\0")
            .map(|sym| *sym);
        let PyImport_GetModuleDict = __library.get(b"PyImport_GetModuleDict\0").map(|sym| *sym);
        let PyImport_GetModule = __library.get(b"PyImport_GetModule\0").map(|sym| *sym);
        let PyImport_AddModuleObject = __library.get(b"PyImport_AddModuleObject\0").map(|sym| *sym);
        let PyImport_AddModule = __library.get(b"PyImport_AddModule\0").map(|sym| *sym);
        let PyImport_ImportModule = __library.get(b"PyImport_ImportModule\0").map(|sym| *sym);
        let PyImport_ImportModuleNoBlock = __library
            .get(b"PyImport_ImportModuleNoBlock\0")
            .map(|sym| *sym);
        let PyImport_ImportModuleLevel = __library
            .get(b"PyImport_ImportModuleLevel\0")
            .map(|sym| *sym);
        let PyImport_ImportModuleLevelObject = __library
            .get(b"PyImport_ImportModuleLevelObject\0")
            .map(|sym| *sym);
        let PyImport_GetImporter = __library.get(b"PyImport_GetImporter\0").map(|sym| *sym);
        let PyImport_Import = __library.get(b"PyImport_Import\0").map(|sym| *sym);
        let PyImport_ReloadModule = __library.get(b"PyImport_ReloadModule\0").map(|sym| *sym);
        let PyImport_ImportFrozenModuleObject = __library
            .get(b"PyImport_ImportFrozenModuleObject\0")
            .map(|sym| *sym);
        let PyImport_ImportFrozenModule = __library
            .get(b"PyImport_ImportFrozenModule\0")
            .map(|sym| *sym);
        let PyImport_AppendInittab = __library.get(b"PyImport_AppendInittab\0").map(|sym| *sym);
        let PyInit__imp = __library.get(b"PyInit__imp\0").map(|sym| *sym);
        let _PyImport_IsInitialized = __library.get(b"_PyImport_IsInitialized\0").map(|sym| *sym);
        let _PyImport_GetModuleId = __library.get(b"_PyImport_GetModuleId\0").map(|sym| *sym);
        let _PyImport_SetModule = __library.get(b"_PyImport_SetModule\0").map(|sym| *sym);
        let _PyImport_SetModuleString = __library
            .get(b"_PyImport_SetModuleString\0")
            .map(|sym| *sym);
        let _PyImport_AcquireLock = __library.get(b"_PyImport_AcquireLock\0").map(|sym| *sym);
        let _PyImport_ReleaseLock = __library.get(b"_PyImport_ReleaseLock\0").map(|sym| *sym);
        let _PyImport_FindExtensionObject = __library
            .get(b"_PyImport_FindExtensionObject\0")
            .map(|sym| *sym);
        let _PyImport_FixupBuiltin = __library.get(b"_PyImport_FixupBuiltin\0").map(|sym| *sym);
        let _PyImport_FixupExtensionObject = __library
            .get(b"_PyImport_FixupExtensionObject\0")
            .map(|sym| *sym);
        let PyImport_ExtendInittab = __library.get(b"PyImport_ExtendInittab\0").map(|sym| *sym);
        let PyObject_CallNoArgs = __library.get(b"PyObject_CallNoArgs\0").map(|sym| *sym);
        let PyObject_Call = __library.get(b"PyObject_Call\0").map(|sym| *sym);
        let PyObject_CallObject = __library.get(b"PyObject_CallObject\0").map(|sym| *sym);
        let PyObject_CallFunction = __library.get(b"PyObject_CallFunction\0").map(|sym| *sym);
        let PyObject_CallMethod = __library.get(b"PyObject_CallMethod\0").map(|sym| *sym);
        let _PyObject_CallFunction_SizeT = __library
            .get(b"_PyObject_CallFunction_SizeT\0")
            .map(|sym| *sym);
        let _PyObject_CallMethod_SizeT = __library
            .get(b"_PyObject_CallMethod_SizeT\0")
            .map(|sym| *sym);
        let PyObject_CallFunctionObjArgs = __library
            .get(b"PyObject_CallFunctionObjArgs\0")
            .map(|sym| *sym);
        let PyObject_CallMethodObjArgs = __library
            .get(b"PyObject_CallMethodObjArgs\0")
            .map(|sym| *sym);
        let PyObject_Type = __library.get(b"PyObject_Type\0").map(|sym| *sym);
        let PyObject_Size = __library.get(b"PyObject_Size\0").map(|sym| *sym);
        let PyObject_Length = __library.get(b"PyObject_Length\0").map(|sym| *sym);
        let PyObject_GetItem = __library.get(b"PyObject_GetItem\0").map(|sym| *sym);
        let PyObject_SetItem = __library.get(b"PyObject_SetItem\0").map(|sym| *sym);
        let PyObject_DelItemString = __library.get(b"PyObject_DelItemString\0").map(|sym| *sym);
        let PyObject_DelItem = __library.get(b"PyObject_DelItem\0").map(|sym| *sym);
        let PyObject_AsCharBuffer = __library.get(b"PyObject_AsCharBuffer\0").map(|sym| *sym);
        let PyObject_CheckReadBuffer = __library.get(b"PyObject_CheckReadBuffer\0").map(|sym| *sym);
        let PyObject_AsReadBuffer = __library.get(b"PyObject_AsReadBuffer\0").map(|sym| *sym);
        let PyObject_AsWriteBuffer = __library.get(b"PyObject_AsWriteBuffer\0").map(|sym| *sym);
        let PyObject_Format = __library.get(b"PyObject_Format\0").map(|sym| *sym);
        let PyObject_GetIter = __library.get(b"PyObject_GetIter\0").map(|sym| *sym);
        let PyIter_Check = __library.get(b"PyIter_Check\0").map(|sym| *sym);
        let PyIter_Next = __library.get(b"PyIter_Next\0").map(|sym| *sym);
        let PyNumber_Check = __library.get(b"PyNumber_Check\0").map(|sym| *sym);
        let PyNumber_Add = __library.get(b"PyNumber_Add\0").map(|sym| *sym);
        let PyNumber_Subtract = __library.get(b"PyNumber_Subtract\0").map(|sym| *sym);
        let PyNumber_Multiply = __library.get(b"PyNumber_Multiply\0").map(|sym| *sym);
        let PyNumber_MatrixMultiply = __library.get(b"PyNumber_MatrixMultiply\0").map(|sym| *sym);
        let PyNumber_FloorDivide = __library.get(b"PyNumber_FloorDivide\0").map(|sym| *sym);
        let PyNumber_TrueDivide = __library.get(b"PyNumber_TrueDivide\0").map(|sym| *sym);
        let PyNumber_Remainder = __library.get(b"PyNumber_Remainder\0").map(|sym| *sym);
        let PyNumber_Divmod = __library.get(b"PyNumber_Divmod\0").map(|sym| *sym);
        let PyNumber_Power = __library.get(b"PyNumber_Power\0").map(|sym| *sym);
        let PyNumber_Negative = __library.get(b"PyNumber_Negative\0").map(|sym| *sym);
        let PyNumber_Positive = __library.get(b"PyNumber_Positive\0").map(|sym| *sym);
        let PyNumber_Absolute = __library.get(b"PyNumber_Absolute\0").map(|sym| *sym);
        let PyNumber_Invert = __library.get(b"PyNumber_Invert\0").map(|sym| *sym);
        let PyNumber_Lshift = __library.get(b"PyNumber_Lshift\0").map(|sym| *sym);
        let PyNumber_Rshift = __library.get(b"PyNumber_Rshift\0").map(|sym| *sym);
        let PyNumber_And = __library.get(b"PyNumber_And\0").map(|sym| *sym);
        let PyNumber_Xor = __library.get(b"PyNumber_Xor\0").map(|sym| *sym);
        let PyNumber_Or = __library.get(b"PyNumber_Or\0").map(|sym| *sym);
        let PyIndex_Check = __library.get(b"PyIndex_Check\0").map(|sym| *sym);
        let PyNumber_Index = __library.get(b"PyNumber_Index\0").map(|sym| *sym);
        let PyNumber_AsSsize_t = __library.get(b"PyNumber_AsSsize_t\0").map(|sym| *sym);
        let PyNumber_Long = __library.get(b"PyNumber_Long\0").map(|sym| *sym);
        let PyNumber_Float = __library.get(b"PyNumber_Float\0").map(|sym| *sym);
        let PyNumber_InPlaceAdd = __library.get(b"PyNumber_InPlaceAdd\0").map(|sym| *sym);
        let PyNumber_InPlaceSubtract = __library.get(b"PyNumber_InPlaceSubtract\0").map(|sym| *sym);
        let PyNumber_InPlaceMultiply = __library.get(b"PyNumber_InPlaceMultiply\0").map(|sym| *sym);
        let PyNumber_InPlaceMatrixMultiply = __library
            .get(b"PyNumber_InPlaceMatrixMultiply\0")
            .map(|sym| *sym);
        let PyNumber_InPlaceFloorDivide = __library
            .get(b"PyNumber_InPlaceFloorDivide\0")
            .map(|sym| *sym);
        let PyNumber_InPlaceTrueDivide = __library
            .get(b"PyNumber_InPlaceTrueDivide\0")
            .map(|sym| *sym);
        let PyNumber_InPlaceRemainder = __library
            .get(b"PyNumber_InPlaceRemainder\0")
            .map(|sym| *sym);
        let PyNumber_InPlacePower = __library.get(b"PyNumber_InPlacePower\0").map(|sym| *sym);
        let PyNumber_InPlaceLshift = __library.get(b"PyNumber_InPlaceLshift\0").map(|sym| *sym);
        let PyNumber_InPlaceRshift = __library.get(b"PyNumber_InPlaceRshift\0").map(|sym| *sym);
        let PyNumber_InPlaceAnd = __library.get(b"PyNumber_InPlaceAnd\0").map(|sym| *sym);
        let PyNumber_InPlaceXor = __library.get(b"PyNumber_InPlaceXor\0").map(|sym| *sym);
        let PyNumber_InPlaceOr = __library.get(b"PyNumber_InPlaceOr\0").map(|sym| *sym);
        let PyNumber_ToBase = __library.get(b"PyNumber_ToBase\0").map(|sym| *sym);
        let PySequence_Check = __library.get(b"PySequence_Check\0").map(|sym| *sym);
        let PySequence_Size = __library.get(b"PySequence_Size\0").map(|sym| *sym);
        let PySequence_Length = __library.get(b"PySequence_Length\0").map(|sym| *sym);
        let PySequence_Concat = __library.get(b"PySequence_Concat\0").map(|sym| *sym);
        let PySequence_Repeat = __library.get(b"PySequence_Repeat\0").map(|sym| *sym);
        let PySequence_GetItem = __library.get(b"PySequence_GetItem\0").map(|sym| *sym);
        let PySequence_GetSlice = __library.get(b"PySequence_GetSlice\0").map(|sym| *sym);
        let PySequence_SetItem = __library.get(b"PySequence_SetItem\0").map(|sym| *sym);
        let PySequence_DelItem = __library.get(b"PySequence_DelItem\0").map(|sym| *sym);
        let PySequence_SetSlice = __library.get(b"PySequence_SetSlice\0").map(|sym| *sym);
        let PySequence_DelSlice = __library.get(b"PySequence_DelSlice\0").map(|sym| *sym);
        let PySequence_Tuple = __library.get(b"PySequence_Tuple\0").map(|sym| *sym);
        let PySequence_List = __library.get(b"PySequence_List\0").map(|sym| *sym);
        let PySequence_Fast = __library.get(b"PySequence_Fast\0").map(|sym| *sym);
        let PySequence_Count = __library.get(b"PySequence_Count\0").map(|sym| *sym);
        let PySequence_Contains = __library.get(b"PySequence_Contains\0").map(|sym| *sym);
        let PySequence_In = __library.get(b"PySequence_In\0").map(|sym| *sym);
        let PySequence_Index = __library.get(b"PySequence_Index\0").map(|sym| *sym);
        let PySequence_InPlaceConcat = __library.get(b"PySequence_InPlaceConcat\0").map(|sym| *sym);
        let PySequence_InPlaceRepeat = __library.get(b"PySequence_InPlaceRepeat\0").map(|sym| *sym);
        let PyMapping_Check = __library.get(b"PyMapping_Check\0").map(|sym| *sym);
        let PyMapping_Size = __library.get(b"PyMapping_Size\0").map(|sym| *sym);
        let PyMapping_Length = __library.get(b"PyMapping_Length\0").map(|sym| *sym);
        let PyMapping_HasKeyString = __library.get(b"PyMapping_HasKeyString\0").map(|sym| *sym);
        let PyMapping_HasKey = __library.get(b"PyMapping_HasKey\0").map(|sym| *sym);
        let PyMapping_Keys = __library.get(b"PyMapping_Keys\0").map(|sym| *sym);
        let PyMapping_Values = __library.get(b"PyMapping_Values\0").map(|sym| *sym);
        let PyMapping_Items = __library.get(b"PyMapping_Items\0").map(|sym| *sym);
        let PyMapping_GetItemString = __library.get(b"PyMapping_GetItemString\0").map(|sym| *sym);
        let PyMapping_SetItemString = __library.get(b"PyMapping_SetItemString\0").map(|sym| *sym);
        let PyObject_IsInstance = __library.get(b"PyObject_IsInstance\0").map(|sym| *sym);
        let PyObject_IsSubclass = __library.get(b"PyObject_IsSubclass\0").map(|sym| *sym);
        let _PyStack_AsDict = __library.get(b"_PyStack_AsDict\0").map(|sym| *sym);
        let _Py_CheckFunctionResult = __library.get(b"_Py_CheckFunctionResult\0").map(|sym| *sym);
        let _PyObject_MakeTpCall = __library.get(b"_PyObject_MakeTpCall\0").map(|sym| *sym);
        let PyObject_VectorcallDict = __library.get(b"PyObject_VectorcallDict\0").map(|sym| *sym);
        let PyVectorcall_Call = __library.get(b"PyVectorcall_Call\0").map(|sym| *sym);
        let PyObject_VectorcallMethod = __library
            .get(b"PyObject_VectorcallMethod\0")
            .map(|sym| *sym);
        let _PyObject_CallMethodId = __library.get(b"_PyObject_CallMethodId\0").map(|sym| *sym);
        let _PyObject_CallMethodId_SizeT = __library
            .get(b"_PyObject_CallMethodId_SizeT\0")
            .map(|sym| *sym);
        let _PyObject_CallMethodIdObjArgs = __library
            .get(b"_PyObject_CallMethodIdObjArgs\0")
            .map(|sym| *sym);
        let _PyObject_HasLen = __library.get(b"_PyObject_HasLen\0").map(|sym| *sym);
        let PyObject_LengthHint = __library.get(b"PyObject_LengthHint\0").map(|sym| *sym);
        let PyObject_CheckBuffer = __library.get(b"PyObject_CheckBuffer\0").map(|sym| *sym);
        let PyObject_GetBuffer = __library.get(b"PyObject_GetBuffer\0").map(|sym| *sym);
        let PyBuffer_GetPointer = __library.get(b"PyBuffer_GetPointer\0").map(|sym| *sym);
        let PyBuffer_SizeFromFormat = __library.get(b"PyBuffer_SizeFromFormat\0").map(|sym| *sym);
        let PyBuffer_ToContiguous = __library.get(b"PyBuffer_ToContiguous\0").map(|sym| *sym);
        let PyBuffer_FromContiguous = __library.get(b"PyBuffer_FromContiguous\0").map(|sym| *sym);
        let PyObject_CopyData = __library.get(b"PyObject_CopyData\0").map(|sym| *sym);
        let PyBuffer_IsContiguous = __library.get(b"PyBuffer_IsContiguous\0").map(|sym| *sym);
        let PyBuffer_FillContiguousStrides = __library
            .get(b"PyBuffer_FillContiguousStrides\0")
            .map(|sym| *sym);
        let PyBuffer_FillInfo = __library.get(b"PyBuffer_FillInfo\0").map(|sym| *sym);
        let PyBuffer_Release = __library.get(b"PyBuffer_Release\0").map(|sym| *sym);
        let _PySequence_IterSearch = __library.get(b"_PySequence_IterSearch\0").map(|sym| *sym);
        let _PyObject_RealIsInstance = __library.get(b"_PyObject_RealIsInstance\0").map(|sym| *sym);
        let _PyObject_RealIsSubclass = __library.get(b"_PyObject_RealIsSubclass\0").map(|sym| *sym);
        let _PySequence_BytesToCharpArray = __library
            .get(b"_PySequence_BytesToCharpArray\0")
            .map(|sym| *sym);
        let _Py_FreeCharPArray = __library.get(b"_Py_FreeCharPArray\0").map(|sym| *sym);
        let _Py_add_one_to_index_F = __library.get(b"_Py_add_one_to_index_F\0").map(|sym| *sym);
        let _Py_add_one_to_index_C = __library.get(b"_Py_add_one_to_index_C\0").map(|sym| *sym);
        let _Py_convert_optional_to_ssize_t = __library
            .get(b"_Py_convert_optional_to_ssize_t\0")
            .map(|sym| *sym);
        let PyEval_EvalCode = __library.get(b"PyEval_EvalCode\0").map(|sym| *sym);
        let PyEval_EvalCodeEx = __library.get(b"PyEval_EvalCodeEx\0").map(|sym| *sym);
        let _PyEval_EvalCodeWithName = __library.get(b"_PyEval_EvalCodeWithName\0").map(|sym| *sym);
        let _PyEval_CallTracing = __library.get(b"_PyEval_CallTracing\0").map(|sym| *sym);
        let PyOS_string_to_double = __library.get(b"PyOS_string_to_double\0").map(|sym| *sym);
        let PyOS_double_to_string = __library.get(b"PyOS_double_to_string\0").map(|sym| *sym);
        let _Py_string_to_number_with_underscores = __library
            .get(b"_Py_string_to_number_with_underscores\0")
            .map(|sym| *sym);
        let _Py_parse_inf_or_nan = __library.get(b"_Py_parse_inf_or_nan\0").map(|sym| *sym);
        let PyOS_mystrnicmp = __library.get(b"PyOS_mystrnicmp\0").map(|sym| *sym);
        let PyOS_mystricmp = __library.get(b"PyOS_mystricmp\0").map(|sym| *sym);
        let Py_DecodeLocale = __library.get(b"Py_DecodeLocale\0").map(|sym| *sym);
        let Py_EncodeLocale = __library.get(b"Py_EncodeLocale\0").map(|sym| *sym);
        let _Py_EncodeLocaleRaw = __library.get(b"_Py_EncodeLocaleRaw\0").map(|sym| *sym);
        let _Py_GetErrorHandler = __library.get(b"_Py_GetErrorHandler\0").map(|sym| *sym);
        let _Py_DecodeLocaleEx = __library.get(b"_Py_DecodeLocaleEx\0").map(|sym| *sym);
        let _Py_EncodeLocaleEx = __library.get(b"_Py_EncodeLocaleEx\0").map(|sym| *sym);
        let _Py_device_encoding = __library.get(b"_Py_device_encoding\0").map(|sym| *sym);
        let _Py_fstat = __library.get(b"_Py_fstat\0").map(|sym| *sym);
        let _Py_fstat_noraise = __library.get(b"_Py_fstat_noraise\0").map(|sym| *sym);
        let _Py_stat = __library.get(b"_Py_stat\0").map(|sym| *sym);
        let _Py_open = __library.get(b"_Py_open\0").map(|sym| *sym);
        let _Py_open_noraise = __library.get(b"_Py_open_noraise\0").map(|sym| *sym);
        let _Py_wfopen = __library.get(b"_Py_wfopen\0").map(|sym| *sym);
        let _Py_fopen = __library.get(b"_Py_fopen\0").map(|sym| *sym);
        let _Py_fopen_obj = __library.get(b"_Py_fopen_obj\0").map(|sym| *sym);
        let _Py_read = __library.get(b"_Py_read\0").map(|sym| *sym);
        let _Py_write = __library.get(b"_Py_write\0").map(|sym| *sym);
        let _Py_write_noraise = __library.get(b"_Py_write_noraise\0").map(|sym| *sym);
        let _Py_wreadlink = __library.get(b"_Py_wreadlink\0").map(|sym| *sym);
        let _Py_wrealpath = __library.get(b"_Py_wrealpath\0").map(|sym| *sym);
        let _Py_isabs = __library.get(b"_Py_isabs\0").map(|sym| *sym);
        let _Py_abspath = __library.get(b"_Py_abspath\0").map(|sym| *sym);
        let _Py_wgetcwd = __library.get(b"_Py_wgetcwd\0").map(|sym| *sym);
        let _Py_get_inheritable = __library.get(b"_Py_get_inheritable\0").map(|sym| *sym);
        let _Py_set_inheritable = __library.get(b"_Py_set_inheritable\0").map(|sym| *sym);
        let _Py_set_inheritable_async_safe = __library
            .get(b"_Py_set_inheritable_async_safe\0")
            .map(|sym| *sym);
        let _Py_dup = __library.get(b"_Py_dup\0").map(|sym| *sym);
        let _Py_get_blocking = __library.get(b"_Py_get_blocking\0").map(|sym| *sym);
        let _Py_set_blocking = __library.get(b"_Py_set_blocking\0").map(|sym| *sym);
        let PyTraceMalloc_Track = __library.get(b"PyTraceMalloc_Track\0").map(|sym| *sym);
        let PyTraceMalloc_Untrack = __library.get(b"PyTraceMalloc_Untrack\0").map(|sym| *sym);
        let _PyTraceMalloc_GetTraceback = __library
            .get(b"_PyTraceMalloc_GetTraceback\0")
            .map(|sym| *sym);
        Ok(PythonLib {
            __library,
            _Py_get_387controlword,
            _Py_set_387controlword,
            _Py_bit_length,
            PyType_FromSpec,
            PyType_FromSpecWithBases,
            PyType_GetSlot,
            PyType_FromModuleAndSpec,
            PyType_GetModule,
            PyType_GetModuleState,
            PyType_IsSubtype,
            PyType_GetFlags,
            PyType_Ready,
            PyType_GenericAlloc,
            PyType_GenericNew,
            PyType_ClearCache,
            PyType_Modified,
            PyObject_Repr,
            PyObject_Str,
            PyObject_ASCII,
            PyObject_Bytes,
            PyObject_RichCompare,
            PyObject_RichCompareBool,
            PyObject_GetAttrString,
            PyObject_SetAttrString,
            PyObject_HasAttrString,
            PyObject_GetAttr,
            PyObject_SetAttr,
            PyObject_HasAttr,
            PyObject_SelfIter,
            PyObject_GenericGetAttr,
            PyObject_GenericSetAttr,
            PyObject_GenericSetDict,
            PyObject_Hash,
            PyObject_HashNotImplemented,
            PyObject_IsTrue,
            PyObject_Not,
            PyCallable_Check,
            PyObject_ClearWeakRefs,
            PyObject_Dir,
            Py_ReprEnter,
            Py_ReprLeave,
            _Py_Dealloc,
            Py_IncRef,
            Py_DecRef,
            _Py_NewReference,
            _PyTraceMalloc_NewReference,
            _PyType_Name,
            _PyType_Lookup,
            _PyType_LookupId,
            _PyObject_LookupSpecial,
            _PyType_CalculateMetaclass,
            _PyType_GetDocFromInternalDoc,
            _PyType_GetTextSignatureFromInternalDoc,
            PyObject_Print,
            _Py_BreakPoint,
            _PyObject_Dump,
            _PyObject_IsFreed,
            _PyObject_IsAbstract,
            _PyObject_GetAttrId,
            _PyObject_SetAttrId,
            _PyObject_HasAttrId,
            _PyObject_LookupAttr,
            _PyObject_LookupAttrId,
            _PyObject_GetMethod,
            _PyObject_GetDictPtr,
            _PyObject_NextNotImplemented,
            PyObject_CallFinalizer,
            PyObject_CallFinalizerFromDealloc,
            _PyObject_GenericGetAttrWithDict,
            _PyObject_GenericSetAttrWithDict,
            _PyObject_FunctionStr,
            _PyDebugAllocatorStats,
            _PyObject_DebugTypeStats,
            _PyObject_AssertFailed,
            _PyObject_CheckConsistency,
            _PyTrash_deposit_object,
            _PyTrash_destroy_chain,
            _PyTrash_thread_deposit_object,
            _PyTrash_thread_destroy_chain,
            _PyTrash_begin,
            _PyTrash_end,
            _PyLong_FromTime_t,
            _PyLong_AsTime_t,
            _PyTime_ObjectToTime_t,
            _PyTime_ObjectToTimeval,
            _PyTime_ObjectToTimespec,
            _PyTime_FromSeconds,
            _PyTime_FromNanoseconds,
            _PyTime_FromNanosecondsObject,
            _PyTime_FromSecondsObject,
            _PyTime_FromMillisecondsObject,
            _PyTime_AsSecondsDouble,
            _PyTime_AsMilliseconds,
            _PyTime_AsMicroseconds,
            _PyTime_AsNanosecondsObject,
            _PyTime_FromTimeval,
            _PyTime_AsTimeval,
            _PyTime_AsTimeval_noraise,
            _PyTime_AsTimevalTime_t,
            _PyTime_FromTimespec,
            _PyTime_AsTimespec,
            _PyTime_MulDiv,
            _PyTime_GetSystemClock,
            _PyTime_GetMonotonicClock,
            _PyTime_GetSystemClockWithInfo,
            _PyTime_GetMonotonicClockWithInfo,
            _PyTime_Init,
            _PyTime_localtime,
            _PyTime_gmtime,
            _PyTime_GetPerfCounter,
            _PyTime_GetPerfCounterWithInfo,
            PyMem_Malloc,
            PyMem_Realloc,
            PyMem_Free,
            PyMem_RawMalloc,
            PyMem_RawCalloc,
            PyMem_RawRealloc,
            PyMem_RawFree,
            _PyMem_GetCurrentAllocatorName,
            PyMem_Calloc,
            _PyMem_RawStrdup,
            _PyMem_Strdup,
            _PyMem_RawWcsdup,
            PyMem_GetAllocator,
            PyMem_SetAllocator,
            PyMem_SetupDebugHooks,
            PyObject_Malloc,
            PyObject_Calloc,
            PyObject_Realloc,
            PyObject_Free,
            PyObject_Init,
            PyObject_InitVar,
            _PyObject_New,
            _PyObject_NewVar,
            PyGC_Collect,
            _PyObject_GC_Resize,
            _PyObject_GC_New,
            _PyObject_GC_NewVar,
            PyObject_GC_Track,
            PyObject_GC_UnTrack,
            PyObject_GC_Del,
            PyObject_GC_IsTracked,
            PyObject_GC_IsFinalized,
            _Py_GetAllocatedBlocks,
            _PyObject_DebugMallocStats,
            PyObject_GetArenaAllocator,
            PyObject_SetArenaAllocator,
            _PyGC_CollectNoFail,
            _PyGC_CollectIfEnabled,
            PyObject_IS_GC,
            _PyObject_GC_Malloc,
            _PyObject_GC_Calloc,
            PyObject_GET_WEAKREFS_LISTPTR,
            _Py_HashDouble,
            _Py_HashPointer,
            _Py_HashPointerRaw,
            _Py_HashBytes,
            PyHash_GetFuncDef,
            PyByteArray_FromObject,
            PyByteArray_Concat,
            PyByteArray_FromStringAndSize,
            PyByteArray_Size,
            PyByteArray_AsString,
            PyByteArray_Resize,
            PyBytes_FromStringAndSize,
            PyBytes_FromString,
            PyBytes_FromObject,
            PyBytes_FromFormatV,
            PyBytes_FromFormat,
            PyBytes_Size,
            PyBytes_AsString,
            PyBytes_Repr,
            PyBytes_Concat,
            PyBytes_ConcatAndDel,
            PyBytes_DecodeEscape,
            PyBytes_AsStringAndSize,
            _PyBytes_Resize,
            _PyBytes_FormatEx,
            _PyBytes_FromHex,
            _PyBytes_DecodeEscape,
            _PyBytes_Join,
            _PyBytesWriter_Init,
            _PyBytesWriter_Finish,
            _PyBytesWriter_Dealloc,
            _PyBytesWriter_Alloc,
            _PyBytesWriter_Prepare,
            _PyBytesWriter_Resize,
            _PyBytesWriter_WriteBytes,
            PyUnicode_FromStringAndSize,
            PyUnicode_FromString,
            PyUnicode_Substring,
            PyUnicode_AsUCS4,
            PyUnicode_AsUCS4Copy,
            PyUnicode_GetLength,
            PyUnicode_GetSize,
            PyUnicode_ReadChar,
            PyUnicode_WriteChar,
            PyUnicode_Resize,
            PyUnicode_FromEncodedObject,
            PyUnicode_FromObject,
            PyUnicode_FromFormatV,
            PyUnicode_FromFormat,
            PyUnicode_InternInPlace,
            PyUnicode_InternImmortal,
            PyUnicode_InternFromString,
            PyUnicode_FromWideChar,
            PyUnicode_AsWideChar,
            PyUnicode_AsWideCharString,
            PyUnicode_FromOrdinal,
            PyUnicode_GetDefaultEncoding,
            PyUnicode_Decode,
            PyUnicode_AsDecodedObject,
            PyUnicode_AsDecodedUnicode,
            PyUnicode_AsEncodedObject,
            PyUnicode_AsEncodedString,
            PyUnicode_AsEncodedUnicode,
            PyUnicode_BuildEncodingMap,
            PyUnicode_DecodeUTF7,
            PyUnicode_DecodeUTF7Stateful,
            PyUnicode_DecodeUTF8,
            PyUnicode_DecodeUTF8Stateful,
            PyUnicode_AsUTF8String,
            PyUnicode_DecodeUTF32,
            PyUnicode_DecodeUTF32Stateful,
            PyUnicode_AsUTF32String,
            PyUnicode_DecodeUTF16,
            PyUnicode_DecodeUTF16Stateful,
            PyUnicode_AsUTF16String,
            PyUnicode_DecodeUnicodeEscape,
            PyUnicode_AsUnicodeEscapeString,
            PyUnicode_DecodeRawUnicodeEscape,
            PyUnicode_AsRawUnicodeEscapeString,
            PyUnicode_DecodeLatin1,
            PyUnicode_AsLatin1String,
            PyUnicode_DecodeASCII,
            PyUnicode_AsASCIIString,
            PyUnicode_DecodeCharmap,
            PyUnicode_AsCharmapString,
            PyUnicode_DecodeLocaleAndSize,
            PyUnicode_DecodeLocale,
            PyUnicode_EncodeLocale,
            PyUnicode_FSConverter,
            PyUnicode_FSDecoder,
            PyUnicode_DecodeFSDefault,
            PyUnicode_DecodeFSDefaultAndSize,
            PyUnicode_EncodeFSDefault,
            PyUnicode_Concat,
            PyUnicode_Append,
            PyUnicode_AppendAndDel,
            PyUnicode_Split,
            PyUnicode_Splitlines,
            PyUnicode_Partition,
            PyUnicode_RPartition,
            PyUnicode_RSplit,
            PyUnicode_Translate,
            PyUnicode_Join,
            PyUnicode_Tailmatch,
            PyUnicode_Find,
            PyUnicode_FindChar,
            PyUnicode_Count,
            PyUnicode_Replace,
            PyUnicode_Compare,
            PyUnicode_CompareWithASCIIString,
            PyUnicode_RichCompare,
            PyUnicode_Format,
            PyUnicode_Contains,
            PyUnicode_IsIdentifier,
            _PyUnicode_CheckConsistency,
            PyUnicode_New,
            _PyUnicode_Ready,
            _PyUnicode_Copy,
            PyUnicode_CopyCharacters,
            _PyUnicode_FastCopyCharacters,
            PyUnicode_Fill,
            _PyUnicode_FastFill,
            PyUnicode_FromUnicode,
            PyUnicode_FromKindAndData,
            _PyUnicode_FromASCII,
            _PyUnicode_FindMaxChar,
            PyUnicode_AsUnicode,
            _PyUnicode_AsUnicode,
            PyUnicode_AsUnicodeAndSize,
            PyUnicode_GetMax,
            _PyUnicodeWriter_Init,
            _PyUnicodeWriter_PrepareInternal,
            _PyUnicodeWriter_PrepareKindInternal,
            _PyUnicodeWriter_WriteChar,
            _PyUnicodeWriter_WriteStr,
            _PyUnicodeWriter_WriteSubstring,
            _PyUnicodeWriter_WriteASCIIString,
            _PyUnicodeWriter_WriteLatin1String,
            _PyUnicodeWriter_Finish,
            _PyUnicodeWriter_Dealloc,
            _PyUnicode_FormatAdvancedWriter,
            PyUnicode_AsUTF8AndSize,
            PyUnicode_AsUTF8,
            PyUnicode_Encode,
            PyUnicode_EncodeUTF7,
            _PyUnicode_EncodeUTF7,
            _PyUnicode_AsUTF8String,
            PyUnicode_EncodeUTF8,
            PyUnicode_EncodeUTF32,
            _PyUnicode_EncodeUTF32,
            PyUnicode_EncodeUTF16,
            _PyUnicode_EncodeUTF16,
            _PyUnicode_DecodeUnicodeEscape,
            PyUnicode_EncodeUnicodeEscape,
            PyUnicode_EncodeRawUnicodeEscape,
            _PyUnicode_AsLatin1String,
            PyUnicode_EncodeLatin1,
            _PyUnicode_AsASCIIString,
            PyUnicode_EncodeASCII,
            PyUnicode_EncodeCharmap,
            _PyUnicode_EncodeCharmap,
            PyUnicode_TranslateCharmap,
            PyUnicode_EncodeDecimal,
            PyUnicode_TransformDecimalToASCII,
            _PyUnicode_TransformDecimalAndSpaceToASCII,
            _PyUnicode_JoinArray,
            _PyUnicode_EqualToASCIIId,
            _PyUnicode_EqualToASCIIString,
            _PyUnicode_XStrip,
            _PyUnicode_InsertThousandsGrouping,
            _PyUnicode_IsLowercase,
            _PyUnicode_IsUppercase,
            _PyUnicode_IsTitlecase,
            _PyUnicode_IsXidStart,
            _PyUnicode_IsXidContinue,
            _PyUnicode_IsWhitespace,
            _PyUnicode_IsLinebreak,
            _PyUnicode_ToLowercase,
            _PyUnicode_ToUppercase,
            _PyUnicode_ToTitlecase,
            _PyUnicode_ToLowerFull,
            _PyUnicode_ToTitleFull,
            _PyUnicode_ToUpperFull,
            _PyUnicode_ToFoldedFull,
            _PyUnicode_IsCaseIgnorable,
            _PyUnicode_IsCased,
            _PyUnicode_ToDecimalDigit,
            _PyUnicode_ToDigit,
            _PyUnicode_ToNumeric,
            _PyUnicode_IsDecimalDigit,
            _PyUnicode_IsDigit,
            _PyUnicode_IsNumeric,
            _PyUnicode_IsPrintable,
            _PyUnicode_IsAlpha,
            Py_UNICODE_strlen,
            Py_UNICODE_strcpy,
            Py_UNICODE_strcat,
            Py_UNICODE_strncpy,
            Py_UNICODE_strcmp,
            Py_UNICODE_strncmp,
            Py_UNICODE_strchr,
            Py_UNICODE_strrchr,
            _PyUnicode_FormatLong,
            PyUnicode_AsUnicodeCopy,
            _PyUnicode_FromId,
            _PyUnicode_EQ,
            _PyUnicode_ScanIdentifier,
            PyLong_FromLong,
            PyLong_FromUnsignedLong,
            PyLong_FromSize_t,
            PyLong_FromSsize_t,
            PyLong_FromDouble,
            PyLong_AsLong,
            PyLong_AsLongAndOverflow,
            PyLong_AsSsize_t,
            PyLong_AsSize_t,
            PyLong_AsUnsignedLong,
            PyLong_AsUnsignedLongMask,
            _PyLong_AsInt,
            PyLong_GetInfo,
            _PyLong_UnsignedShort_Converter,
            _PyLong_UnsignedInt_Converter,
            _PyLong_UnsignedLong_Converter,
            _PyLong_UnsignedLongLong_Converter,
            _PyLong_Size_t_Converter,
            _PyLong_Frexp,
            PyLong_AsDouble,
            PyLong_FromVoidPtr,
            PyLong_AsVoidPtr,
            PyLong_FromLongLong,
            PyLong_FromUnsignedLongLong,
            PyLong_AsLongLong,
            PyLong_AsUnsignedLongLong,
            PyLong_AsUnsignedLongLongMask,
            PyLong_AsLongLongAndOverflow,
            PyLong_FromString,
            PyLong_FromUnicode,
            PyLong_FromUnicodeObject,
            _PyLong_FromBytes,
            _PyLong_Sign,
            _PyLong_NumBits,
            _PyLong_DivmodNear,
            _PyLong_FromByteArray,
            _PyLong_AsByteArray,
            _PyLong_FromNbInt,
            _PyLong_FromNbIndexOrNbInt,
            _PyLong_Format,
            _PyLong_FormatWriter,
            _PyLong_FormatBytesWriter,
            _PyLong_FormatAdvancedWriter,
            PyOS_strtoul,
            PyOS_strtol,
            _PyLong_GCD,
            _PyLong_Rshift,
            _PyLong_Lshift,
            _PyLong_New,
            _PyLong_Copy,
            PyBool_FromLong,
            PyFloat_GetMax,
            PyFloat_GetMin,
            PyFloat_GetInfo,
            PyFloat_FromString,
            PyFloat_FromDouble,
            PyFloat_AsDouble,
            _PyFloat_Pack2,
            _PyFloat_Pack4,
            _PyFloat_Pack8,
            _PyFloat_Unpack2,
            _PyFloat_Unpack4,
            _PyFloat_Unpack8,
            _PyFloat_DebugMallocStats,
            _PyFloat_FormatAdvancedWriter,
            _Py_c_sum,
            _Py_c_diff,
            _Py_c_neg,
            _Py_c_prod,
            _Py_c_quot,
            _Py_c_pow,
            _Py_c_abs,
            PyComplex_FromCComplex,
            PyComplex_FromDoubles,
            PyComplex_RealAsDouble,
            PyComplex_ImagAsDouble,
            PyComplex_AsCComplex,
            _PyComplex_FormatAdvancedWriter,
            PyMemoryView_FromObject,
            PyMemoryView_FromMemory,
            PyMemoryView_FromBuffer,
            PyMemoryView_GetContiguous,
            PyTuple_New,
            PyTuple_Size,
            PyTuple_GetItem,
            PyTuple_SetItem,
            PyTuple_GetSlice,
            PyTuple_Pack,
            _PyTuple_Resize,
            _PyTuple_MaybeUntrack,
            _PyTuple_DebugMallocStats,
            PyList_New,
            PyList_Size,
            PyList_GetItem,
            PyList_SetItem,
            PyList_Insert,
            PyList_Append,
            PyList_GetSlice,
            PyList_SetSlice,
            PyList_Sort,
            PyList_Reverse,
            PyList_AsTuple,
            _PyList_Extend,
            _PyList_DebugMallocStats,
            PyDict_New,
            PyDict_GetItem,
            PyDict_GetItemWithError,
            PyDict_SetItem,
            PyDict_DelItem,
            PyDict_Clear,
            PyDict_Next,
            PyDict_Keys,
            PyDict_Values,
            PyDict_Items,
            PyDict_Size,
            PyDict_Copy,
            PyDict_Contains,
            PyDict_Update,
            PyDict_Merge,
            PyDict_MergeFromSeq2,
            PyDict_GetItemString,
            PyDict_SetItemString,
            PyDict_DelItemString,
            _PyDict_GetItem_KnownHash,
            _PyDict_GetItemIdWithError,
            _PyDict_GetItemStringWithError,
            PyDict_SetDefault,
            _PyDict_SetItem_KnownHash,
            _PyDict_DelItem_KnownHash,
            _PyDict_DelItemIf,
            _PyDict_NewKeysForClass,
            PyObject_GenericGetDict,
            _PyDict_Next,
            _PyDict_Contains,
            _PyDict_NewPresized,
            _PyDict_MaybeUntrack,
            _PyDict_HasOnlyStringKeys,
            _PyDict_KeysSize,
            _PyDict_SizeOf,
            _PyDict_Pop,
            _PyDict_Pop_KnownHash,
            _PyDict_FromKeys,
            _PyDict_MergeEx,
            _PyDict_GetItemId,
            _PyDict_SetItemId,
            _PyDict_DelItemId,
            _PyDict_DebugMallocStats,
            _PyObjectDict_SetItem,
            _PyDict_LoadGlobal,
            _PyDictView_New,
            _PyDictView_Intersect,
            PyODict_New,
            PyODict_SetItem,
            PyODict_DelItem,
            _PySet_NextEntry,
            _PySet_Update,
            PySet_New,
            PyFrozenSet_New,
            PySet_Add,
            PySet_Clear,
            PySet_Contains,
            PySet_Discard,
            PySet_Pop,
            PySet_Size,
            PyCFunction_GetFunction,
            PyCFunction_GetSelf,
            PyCFunction_GetFlags,
            PyCFunction_Call,
            PyCFunction_NewEx,
            PyCMethod_New,
            PyModule_NewObject,
            PyModule_New,
            PyModule_GetDict,
            PyModule_GetNameObject,
            PyModule_GetName,
            PyModule_GetFilename,
            PyModule_GetFilenameObject,
            _PyModule_Clear,
            _PyModule_ClearDict,
            _PyModuleSpec_IsInitializing,
            PyModule_GetDef,
            PyModule_GetState,
            PyModuleDef_Init,
            PyFunction_New,
            PyFunction_NewWithQualName,
            PyFunction_GetCode,
            PyFunction_GetGlobals,
            PyFunction_GetModule,
            PyFunction_GetDefaults,
            PyFunction_SetDefaults,
            PyFunction_GetKwDefaults,
            PyFunction_SetKwDefaults,
            PyFunction_GetClosure,
            PyFunction_SetClosure,
            PyFunction_GetAnnotations,
            PyFunction_SetAnnotations,
            _PyFunction_Vectorcall,
            PyClassMethod_New,
            PyStaticMethod_New,
            PyMethod_New,
            PyMethod_Function,
            PyMethod_Self,
            PyInstanceMethod_New,
            PyInstanceMethod_Function,
            PyFile_FromFd,
            PyFile_GetLine,
            PyFile_WriteObject,
            PyFile_WriteString,
            PyObject_AsFileDescriptor,
            Py_UniversalNewlineFgets,
            PyFile_NewStdPrinter,
            PyFile_OpenCode,
            PyFile_OpenCodeObject,
            PyFile_SetOpenCodeHook,
            PyCapsule_New,
            PyCapsule_GetPointer,
            PyCapsule_GetDestructor,
            PyCapsule_GetName,
            PyCapsule_GetContext,
            PyCapsule_IsValid,
            PyCapsule_SetPointer,
            PyCapsule_SetDestructor,
            PyCapsule_SetName,
            PyCapsule_SetContext,
            PyCapsule_Import,
            PyCode_New,
            PyCode_NewWithPosOnlyArgs,
            PyCode_NewEmpty,
            PyCode_Addr2Line,
            _PyCode_CheckLineNumber,
            _PyCode_ConstantKey,
            PyCode_Optimize,
            _PyCode_GetExtra,
            _PyCode_SetExtra,
            PyFrame_GetLineNumber,
            PyFrame_GetCode,
            PyTraceBack_Here,
            PyTraceBack_Print,
            _Py_DisplaySourceLine,
            _PyTraceback_Add,
            PySlice_New,
            _PySlice_FromIndices,
            _PySlice_GetLongIndices,
            PySlice_GetIndices,
            PySlice_GetIndicesEx,
            PySlice_Unpack,
            PySlice_AdjustIndices,
            PyCell_New,
            PyCell_Get,
            PyCell_Set,
            PySeqIter_New,
            PyCallIter_New,
            PyInterpreterState_New,
            PyInterpreterState_Clear,
            PyInterpreterState_Delete,
            PyInterpreterState_Get,
            PyInterpreterState_GetDict,
            PyInterpreterState_GetID,
            PyState_AddModule,
            PyState_RemoveModule,
            PyState_FindModule,
            PyThreadState_New,
            PyThreadState_Clear,
            PyThreadState_Delete,
            PyThreadState_Get,
            PyThreadState_Swap,
            PyThreadState_GetDict,
            PyThreadState_SetAsyncExc,
            PyThreadState_GetInterpreter,
            PyThreadState_GetFrame,
            PyThreadState_GetID,
            PyGILState_Ensure,
            PyGILState_Release,
            PyGILState_GetThisThreadState,
            PyStatus_Ok,
            PyStatus_Error,
            PyStatus_NoMemory,
            PyStatus_Exit,
            PyStatus_IsError,
            PyStatus_IsExit,
            PyStatus_Exception,
            PyWideStringList_Append,
            PyWideStringList_Insert,
            PyPreConfig_InitPythonConfig,
            PyPreConfig_InitIsolatedConfig,
            PyConfig_InitPythonConfig,
            PyConfig_InitIsolatedConfig,
            PyConfig_Clear,
            PyConfig_SetString,
            PyConfig_SetBytesString,
            PyConfig_Read,
            PyConfig_SetBytesArgv,
            PyConfig_SetArgv,
            PyConfig_SetWideStringList,
            Py_GetArgcArgv,
            _PyInterpreterState_RequiresIDRef,
            _PyInterpreterState_RequireIDRef,
            _PyInterpreterState_GetMainModule,
            _PyThreadState_Prealloc,
            _PyThreadState_UncheckedGet,
            _PyThreadState_GetDict,
            PyGILState_Check,
            _PyGILState_GetInterpreterStateUnsafe,
            _PyThread_CurrentFrames,
            PyInterpreterState_Main,
            PyInterpreterState_Head,
            PyInterpreterState_Next,
            PyInterpreterState_ThreadHead,
            PyThreadState_Next,
            PyThreadState_DeleteCurrent,
            _PyInterpreterState_GetEvalFrameFunc,
            _PyInterpreterState_SetEvalFrameFunc,
            _PyInterpreterState_GetConfig,
            _Py_GetConfig,
            _PyObject_GetCrossInterpreterData,
            _PyCrossInterpreterData_NewObject,
            _PyCrossInterpreterData_Release,
            _PyObject_CheckCrossInterpreterData,
            _PyCrossInterpreterData_RegisterClass,
            _PyCrossInterpreterData_Lookup,
            PyGen_New,
            PyGen_NewWithQualName,
            _PyGen_SetStopIterationValue,
            _PyGen_FetchStopIterationValue,
            _PyGen_Send,
            _PyGen_yf,
            _PyGen_Finalize,
            _PyCoro_GetAwaitableIter,
            PyCoro_New,
            PyAsyncGen_New,
            _PyAsyncGenValueWrapperNew,
            PyDescr_NewMethod,
            PyDescr_NewClassMethod,
            PyDescr_NewMember,
            PyDescr_NewGetSet,
            PyDescr_NewWrapper,
            PyDictProxy_New,
            PyWrapper_New,
            Py_GenericAlias,
            _PyWarnings_Init,
            PyErr_WarnEx,
            PyErr_WarnFormat,
            PyErr_ResourceWarning,
            PyErr_WarnExplicitObject,
            PyErr_WarnExplicit,
            PyErr_WarnExplicitFormat,
            _PyErr_WarnUnawaitedCoroutine,
            PyWeakref_NewRef,
            PyWeakref_NewProxy,
            PyWeakref_GetObject,
            _PyWeakref_GetWeakrefCount,
            _PyWeakref_ClearRef,
            PyStructSequence_InitType,
            PyStructSequence_InitType2,
            PyStructSequence_NewType,
            PyStructSequence_New,
            PyStructSequence_SetItem,
            PyStructSequence_GetItem,
            _PyNamespace_New,
            PyPickleBuffer_FromObject,
            PyPickleBuffer_GetBuffer,
            PyPickleBuffer_Release,
            PyCodec_Register,
            _PyCodec_Lookup,
            _PyCodec_Forget,
            PyCodec_KnownEncoding,
            PyCodec_Encode,
            PyCodec_Decode,
            _PyCodec_LookupTextEncoding,
            _PyCodec_EncodeText,
            _PyCodec_DecodeText,
            _PyCodecInfo_GetIncrementalDecoder,
            _PyCodecInfo_GetIncrementalEncoder,
            PyCodec_Encoder,
            PyCodec_Decoder,
            PyCodec_IncrementalEncoder,
            PyCodec_IncrementalDecoder,
            PyCodec_StreamReader,
            PyCodec_StreamWriter,
            PyCodec_RegisterError,
            PyCodec_LookupError,
            PyCodec_StrictErrors,
            PyCodec_IgnoreErrors,
            PyCodec_ReplaceErrors,
            PyCodec_XMLCharRefReplaceErrors,
            PyCodec_BackslashReplaceErrors,
            PyCodec_NameReplaceErrors,
            PyErr_SetNone,
            PyErr_SetObject,
            PyErr_SetString,
            PyErr_Occurred,
            PyErr_Clear,
            PyErr_Fetch,
            PyErr_Restore,
            PyErr_GetExcInfo,
            PyErr_SetExcInfo,
            Py_FatalError,
            PyErr_GivenExceptionMatches,
            PyErr_ExceptionMatches,
            PyErr_NormalizeException,
            PyException_SetTraceback,
            PyException_GetTraceback,
            PyException_GetCause,
            PyException_SetCause,
            PyException_GetContext,
            PyException_SetContext,
            PyExceptionClass_Name,
            PyErr_BadArgument,
            PyErr_NoMemory,
            PyErr_SetFromErrno,
            PyErr_SetFromErrnoWithFilenameObject,
            PyErr_SetFromErrnoWithFilenameObjects,
            PyErr_SetFromErrnoWithFilename,
            PyErr_Format,
            PyErr_FormatV,
            PyErr_SetImportErrorSubclass,
            PyErr_SetImportError,
            PyErr_BadInternalCall,
            _PyErr_BadInternalCall,
            PyErr_NewException,
            PyErr_NewExceptionWithDoc,
            PyErr_WriteUnraisable,
            PyErr_CheckSignals,
            PyErr_SetInterrupt,
            PyErr_SyntaxLocation,
            PyErr_SyntaxLocationEx,
            PyErr_ProgramText,
            PyUnicodeDecodeError_Create,
            PyUnicodeEncodeError_GetEncoding,
            PyUnicodeDecodeError_GetEncoding,
            PyUnicodeEncodeError_GetObject,
            PyUnicodeDecodeError_GetObject,
            PyUnicodeTranslateError_GetObject,
            PyUnicodeEncodeError_GetStart,
            PyUnicodeDecodeError_GetStart,
            PyUnicodeTranslateError_GetStart,
            PyUnicodeEncodeError_SetStart,
            PyUnicodeDecodeError_SetStart,
            PyUnicodeTranslateError_SetStart,
            PyUnicodeEncodeError_GetEnd,
            PyUnicodeDecodeError_GetEnd,
            PyUnicodeTranslateError_GetEnd,
            PyUnicodeEncodeError_SetEnd,
            PyUnicodeDecodeError_SetEnd,
            PyUnicodeTranslateError_SetEnd,
            PyUnicodeEncodeError_GetReason,
            PyUnicodeDecodeError_GetReason,
            PyUnicodeTranslateError_GetReason,
            PyUnicodeEncodeError_SetReason,
            PyUnicodeDecodeError_SetReason,
            PyUnicodeTranslateError_SetReason,
            PyOS_snprintf,
            PyOS_vsnprintf,
            _PyErr_SetKeyError,
            _PyErr_GetTopmostException,
            _PyErr_GetExcInfo,
            _PyErr_ChainExceptions,
            _PyErr_FormatFromCause,
            _PyErr_TrySetFromCause,
            PySignal_SetWakeupFd,
            _PyErr_CheckSignals,
            PyErr_SyntaxLocationObject,
            PyErr_ProgramTextObject,
            PyUnicodeEncodeError_Create,
            PyUnicodeTranslateError_Create,
            _PyUnicodeTranslateError_Create,
            _PyErr_WriteUnraisableMsg,
            _Py_FatalErrorFunc,
            _Py_FatalErrorFormat,
            PyThread_init_thread,
            PyThread_start_new_thread,
            PyThread_exit_thread,
            PyThread_get_thread_ident,
            PyThread_get_thread_native_id,
            PyThread_allocate_lock,
            PyThread_free_lock,
            PyThread_acquire_lock,
            _PyThread_at_fork_reinit,
            PyThread_acquire_lock_timed,
            PyThread_release_lock,
            PyThread_get_stacksize,
            PyThread_set_stacksize,
            PyThread_GetInfo,
            PyThread_create_key,
            PyThread_delete_key,
            PyThread_set_key_value,
            PyThread_get_key_value,
            PyThread_delete_key_value,
            PyThread_ReInitTLS,
            PyThread_tss_alloc,
            PyThread_tss_free,
            PyThread_tss_is_created,
            PyThread_tss_create,
            PyThread_tss_delete,
            PyThread_tss_set,
            PyThread_tss_get,
            PyContext_New,
            PyContext_Copy,
            PyContext_CopyCurrent,
            PyContext_Enter,
            PyContext_Exit,
            PyContextVar_New,
            PyContextVar_Get,
            PyContextVar_Set,
            PyContextVar_Reset,
            _PyContext_NewHamtForTests,
            PyArena_New,
            PyArena_Free,
            PyArena_Malloc,
            PyArena_AddPyObject,
            _Py_VaBuildValue_SizeT,
            _Py_VaBuildStack_SizeT,
            PyArg_Parse,
            PyArg_ParseTuple,
            PyArg_ParseTupleAndKeywords,
            PyArg_VaParse,
            PyArg_VaParseTupleAndKeywords,
            PyArg_ValidateKeywordArguments,
            PyArg_UnpackTuple,
            Py_BuildValue,
            _Py_BuildValue_SizeT,
            _PyArg_UnpackStack,
            _PyArg_NoKeywords,
            _PyArg_NoKwnames,
            _PyArg_NoPositional,
            _PyArg_BadArgument,
            _PyArg_CheckPositional,
            Py_VaBuildValue,
            _Py_VaBuildStack,
            _PyArg_ParseTupleAndKeywordsFast,
            _PyArg_ParseStack,
            _PyArg_ParseStackAndKeywords,
            _PyArg_VaParseTupleAndKeywordsFast,
            _PyArg_UnpackKeywords,
            _PyArg_Fini,
            PyModule_AddObject,
            PyModule_AddIntConstant,
            PyModule_AddStringConstant,
            PyModule_AddType,
            PyModule_SetDocString,
            PyModule_AddFunctions,
            PyModule_ExecDef,
            PyModule_Create2,
            _PyModule_CreateInitialized,
            PyModule_FromDefAndSpec2,
            PyNode_Compile,
            PyAST_CompileEx,
            PyAST_CompileObject,
            PyFuture_FromAST,
            PyFuture_FromASTObject,
            _Py_Mangle,
            PyCompile_OpcodeStackEffect,
            PyCompile_OpcodeStackEffectWithJump,
            _PyAST_Optimize,
            PyRun_SimpleStringFlags,
            PyRun_AnyFileExFlags,
            PyRun_SimpleFileExFlags,
            PyRun_InteractiveOneFlags,
            PyRun_InteractiveOneObject,
            PyRun_InteractiveLoopFlags,
            PyParser_ASTFromString,
            PyParser_ASTFromStringObject,
            PyParser_ASTFromFile,
            PyParser_ASTFromFileObject,
            PyParser_SimpleParseStringFlags,
            PyParser_SimpleParseStringFlagsFilename,
            PyParser_SimpleParseFileFlags,
            PyRun_StringFlags,
            PyRun_FileExFlags,
            Py_CompileStringExFlags,
            Py_CompileStringObject,
            Py_SymtableString,
            _Py_SourceAsString,
            Py_SymtableStringObject,
            _Py_SymtableStringObjectFlags,
            PyErr_Print,
            PyErr_PrintEx,
            PyErr_Display,
            PyRun_String,
            PyRun_AnyFile,
            PyRun_AnyFileEx,
            PyRun_AnyFileFlags,
            PyRun_SimpleString,
            PyRun_SimpleFile,
            PyRun_SimpleFileEx,
            PyRun_InteractiveOne,
            PyRun_InteractiveLoop,
            PyRun_File,
            PyRun_FileEx,
            PyRun_FileFlags,
            PyOS_Readline,
            Py_Initialize,
            Py_InitializeEx,
            Py_Finalize,
            Py_FinalizeEx,
            Py_IsInitialized,
            Py_NewInterpreter,
            Py_EndInterpreter,
            Py_AtExit,
            Py_Exit,
            Py_Main,
            Py_FrozenMain,
            Py_BytesMain,
            Py_SetProgramName,
            Py_GetProgramName,
            Py_SetPythonHome,
            Py_GetPythonHome,
            Py_GetProgramFullPath,
            Py_GetPrefix,
            Py_GetExecPrefix,
            Py_GetPath,
            Py_SetPath,
            Py_GetVersion,
            Py_GetPlatform,
            Py_GetCopyright,
            Py_GetCompiler,
            Py_GetBuildInfo,
            PyOS_getsig,
            PyOS_setsig,
            Py_SetStandardStreamEncoding,
            Py_PreInitialize,
            Py_PreInitializeFromBytesArgs,
            Py_PreInitializeFromArgs,
            _Py_IsCoreInitialized,
            Py_InitializeFromConfig,
            _Py_InitializeMain,
            Py_RunMain,
            Py_ExitStatusException,
            _Py_PyAtExit,
            _Py_RestoreSignals,
            Py_FdIsInteractive,
            _Py_SetProgramFullPath,
            _Py_gitidentifier,
            _Py_gitversion,
            _Py_IsFinalizing,
            _PyOS_URandom,
            _PyOS_URandomNonblock,
            _Py_CoerceLegacyLocale,
            _Py_LegacyLocaleDetected,
            _Py_SetLocaleFromEnv,
            _Py_NewInterpreter,
            PyEval_CallObjectWithKeywords,
            PyEval_CallFunction,
            PyEval_CallMethod,
            PyEval_GetBuiltins,
            PyEval_GetGlobals,
            PyEval_GetLocals,
            PyEval_GetFrame,
            Py_AddPendingCall,
            Py_MakePendingCalls,
            Py_SetRecursionLimit,
            Py_GetRecursionLimit,
            Py_EnterRecursiveCall,
            Py_LeaveRecursiveCall,
            PyEval_GetFuncName,
            PyEval_GetFuncDesc,
            PyEval_EvalFrame,
            PyEval_EvalFrameEx,
            PyEval_SaveThread,
            PyEval_RestoreThread,
            PyEval_ThreadsInitialized,
            PyEval_InitThreads,
            PyEval_AcquireLock,
            PyEval_ReleaseLock,
            PyEval_AcquireThread,
            PyEval_ReleaseThread,
            PyEval_SetProfile,
            _PyEval_SetProfile,
            PyEval_SetTrace,
            _PyEval_SetTrace,
            _PyEval_GetCoroutineOriginTrackingDepth,
            _PyEval_SetAsyncGenFirstiter,
            _PyEval_GetAsyncGenFirstiter,
            _PyEval_SetAsyncGenFinalizer,
            _PyEval_GetAsyncGenFinalizer,
            _PyEval_GetBuiltinId,
            PyEval_MergeCompilerFlags,
            _PyEval_EvalFrameDefault,
            _PyEval_SetSwitchInterval,
            _PyEval_GetSwitchInterval,
            _PyEval_RequestCodeExtraIndex,
            _PyEval_SliceIndex,
            _PyEval_SliceIndexNotNone,
            PySys_GetObject,
            PySys_SetObject,
            PySys_SetArgv,
            PySys_SetArgvEx,
            PySys_SetPath,
            PySys_WriteStdout,
            PySys_WriteStderr,
            PySys_FormatStdout,
            PySys_FormatStderr,
            PySys_ResetWarnOptions,
            PySys_AddWarnOption,
            PySys_AddWarnOptionUnicode,
            PySys_HasWarnOptions,
            PySys_AddXOption,
            PySys_GetXOptions,
            _PySys_GetObjectId,
            _PySys_SetObjectId,
            _PySys_GetSizeOf,
            PySys_Audit,
            PySys_AddAuditHook,
            PyOS_FSPath,
            PyOS_InterruptOccurred,
            PyOS_InitInterrupts,
            PyOS_BeforeFork,
            PyOS_AfterFork_Parent,
            PyOS_AfterFork_Child,
            PyOS_AfterFork,
            _PyOS_IsMainThread,
            _PySignal_AfterFork,
            PyImport_GetMagicNumber,
            PyImport_GetMagicTag,
            PyImport_ExecCodeModule,
            PyImport_ExecCodeModuleEx,
            PyImport_ExecCodeModuleWithPathnames,
            PyImport_ExecCodeModuleObject,
            PyImport_GetModuleDict,
            PyImport_GetModule,
            PyImport_AddModuleObject,
            PyImport_AddModule,
            PyImport_ImportModule,
            PyImport_ImportModuleNoBlock,
            PyImport_ImportModuleLevel,
            PyImport_ImportModuleLevelObject,
            PyImport_GetImporter,
            PyImport_Import,
            PyImport_ReloadModule,
            PyImport_ImportFrozenModuleObject,
            PyImport_ImportFrozenModule,
            PyImport_AppendInittab,
            PyInit__imp,
            _PyImport_IsInitialized,
            _PyImport_GetModuleId,
            _PyImport_SetModule,
            _PyImport_SetModuleString,
            _PyImport_AcquireLock,
            _PyImport_ReleaseLock,
            _PyImport_FindExtensionObject,
            _PyImport_FixupBuiltin,
            _PyImport_FixupExtensionObject,
            PyImport_ExtendInittab,
            PyObject_CallNoArgs,
            PyObject_Call,
            PyObject_CallObject,
            PyObject_CallFunction,
            PyObject_CallMethod,
            _PyObject_CallFunction_SizeT,
            _PyObject_CallMethod_SizeT,
            PyObject_CallFunctionObjArgs,
            PyObject_CallMethodObjArgs,
            PyObject_Type,
            PyObject_Size,
            PyObject_Length,
            PyObject_GetItem,
            PyObject_SetItem,
            PyObject_DelItemString,
            PyObject_DelItem,
            PyObject_AsCharBuffer,
            PyObject_CheckReadBuffer,
            PyObject_AsReadBuffer,
            PyObject_AsWriteBuffer,
            PyObject_Format,
            PyObject_GetIter,
            PyIter_Check,
            PyIter_Next,
            PyNumber_Check,
            PyNumber_Add,
            PyNumber_Subtract,
            PyNumber_Multiply,
            PyNumber_MatrixMultiply,
            PyNumber_FloorDivide,
            PyNumber_TrueDivide,
            PyNumber_Remainder,
            PyNumber_Divmod,
            PyNumber_Power,
            PyNumber_Negative,
            PyNumber_Positive,
            PyNumber_Absolute,
            PyNumber_Invert,
            PyNumber_Lshift,
            PyNumber_Rshift,
            PyNumber_And,
            PyNumber_Xor,
            PyNumber_Or,
            PyIndex_Check,
            PyNumber_Index,
            PyNumber_AsSsize_t,
            PyNumber_Long,
            PyNumber_Float,
            PyNumber_InPlaceAdd,
            PyNumber_InPlaceSubtract,
            PyNumber_InPlaceMultiply,
            PyNumber_InPlaceMatrixMultiply,
            PyNumber_InPlaceFloorDivide,
            PyNumber_InPlaceTrueDivide,
            PyNumber_InPlaceRemainder,
            PyNumber_InPlacePower,
            PyNumber_InPlaceLshift,
            PyNumber_InPlaceRshift,
            PyNumber_InPlaceAnd,
            PyNumber_InPlaceXor,
            PyNumber_InPlaceOr,
            PyNumber_ToBase,
            PySequence_Check,
            PySequence_Size,
            PySequence_Length,
            PySequence_Concat,
            PySequence_Repeat,
            PySequence_GetItem,
            PySequence_GetSlice,
            PySequence_SetItem,
            PySequence_DelItem,
            PySequence_SetSlice,
            PySequence_DelSlice,
            PySequence_Tuple,
            PySequence_List,
            PySequence_Fast,
            PySequence_Count,
            PySequence_Contains,
            PySequence_In,
            PySequence_Index,
            PySequence_InPlaceConcat,
            PySequence_InPlaceRepeat,
            PyMapping_Check,
            PyMapping_Size,
            PyMapping_Length,
            PyMapping_HasKeyString,
            PyMapping_HasKey,
            PyMapping_Keys,
            PyMapping_Values,
            PyMapping_Items,
            PyMapping_GetItemString,
            PyMapping_SetItemString,
            PyObject_IsInstance,
            PyObject_IsSubclass,
            _PyStack_AsDict,
            _Py_CheckFunctionResult,
            _PyObject_MakeTpCall,
            PyObject_VectorcallDict,
            PyVectorcall_Call,
            PyObject_VectorcallMethod,
            _PyObject_CallMethodId,
            _PyObject_CallMethodId_SizeT,
            _PyObject_CallMethodIdObjArgs,
            _PyObject_HasLen,
            PyObject_LengthHint,
            PyObject_CheckBuffer,
            PyObject_GetBuffer,
            PyBuffer_GetPointer,
            PyBuffer_SizeFromFormat,
            PyBuffer_ToContiguous,
            PyBuffer_FromContiguous,
            PyObject_CopyData,
            PyBuffer_IsContiguous,
            PyBuffer_FillContiguousStrides,
            PyBuffer_FillInfo,
            PyBuffer_Release,
            _PySequence_IterSearch,
            _PyObject_RealIsInstance,
            _PyObject_RealIsSubclass,
            _PySequence_BytesToCharpArray,
            _Py_FreeCharPArray,
            _Py_add_one_to_index_F,
            _Py_add_one_to_index_C,
            _Py_convert_optional_to_ssize_t,
            PyEval_EvalCode,
            PyEval_EvalCodeEx,
            _PyEval_EvalCodeWithName,
            _PyEval_CallTracing,
            PyOS_string_to_double,
            PyOS_double_to_string,
            _Py_string_to_number_with_underscores,
            _Py_parse_inf_or_nan,
            PyOS_mystrnicmp,
            PyOS_mystricmp,
            Py_DecodeLocale,
            Py_EncodeLocale,
            _Py_EncodeLocaleRaw,
            _Py_GetErrorHandler,
            _Py_DecodeLocaleEx,
            _Py_EncodeLocaleEx,
            _Py_device_encoding,
            _Py_fstat,
            _Py_fstat_noraise,
            _Py_stat,
            _Py_open,
            _Py_open_noraise,
            _Py_wfopen,
            _Py_fopen,
            _Py_fopen_obj,
            _Py_read,
            _Py_write,
            _Py_write_noraise,
            _Py_wreadlink,
            _Py_wrealpath,
            _Py_isabs,
            _Py_abspath,
            _Py_wgetcwd,
            _Py_get_inheritable,
            _Py_set_inheritable,
            _Py_set_inheritable_async_safe,
            _Py_dup,
            _Py_get_blocking,
            _Py_set_blocking,
            PyTraceMalloc_Track,
            PyTraceMalloc_Untrack,
            _PyTraceMalloc_GetTraceback,
        })
    }
    pub unsafe fn _Py_get_387controlword(&self) -> ::std::os::raw::c_ushort {
        (self
            ._Py_get_387controlword
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _Py_set_387controlword(&self, arg1: ::std::os::raw::c_ushort) -> () {
        (self
            ._Py_set_387controlword
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_bit_length(&self, d: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uint {
        (self
            ._Py_bit_length
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn PyType_FromSpec(&self, arg1: *mut PyType_Spec) -> *mut PyObject {
        (self
            .PyType_FromSpec
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyType_FromSpecWithBases(
        &self,
        arg1: *mut PyType_Spec,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyType_FromSpecWithBases
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyType_GetSlot(
        &self,
        arg1: *mut PyTypeObject,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyType_GetSlot
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyType_FromModuleAndSpec(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyType_Spec,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyType_FromModuleAndSpec
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyType_GetModule(&self, arg1: *mut _typeobject) -> *mut PyObject {
        (self
            .PyType_GetModule
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyType_GetModuleState(
        &self,
        arg1: *mut _typeobject,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyType_GetModuleState
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyType_IsSubtype(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyTypeObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyType_IsSubtype
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyType_GetFlags(&self, arg1: *mut PyTypeObject) -> ::std::os::raw::c_ulong {
        (self
            .PyType_GetFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyType_Ready(&self, arg1: *mut PyTypeObject) -> ::std::os::raw::c_int {
        (self
            .PyType_Ready
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyType_GenericAlloc(
        &self,
        arg1: *mut PyTypeObject,
        arg2: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyType_GenericAlloc
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyType_GenericNew(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyType_GenericNew
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyType_ClearCache(&self) -> ::std::os::raw::c_uint {
        (self
            .PyType_ClearCache
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyType_Modified(&self, arg1: *mut PyTypeObject) -> () {
        (self
            .PyType_Modified
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_Repr(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_Repr
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_Str(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_Str
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_ASCII(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_ASCII
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_Bytes(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_Bytes
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_RichCompare(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyObject_RichCompare
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_RichCompareBool(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_RichCompareBool
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_GetAttrString(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyObject_GetAttrString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_SetAttrString(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_SetAttrString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_HasAttrString(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_HasAttrString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_GetAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_GetAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_SetAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_SetAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_HasAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_HasAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_SelfIter(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_SelfIter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_GenericGetAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_GenericGetAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_GenericSetAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_GenericSetAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_GenericSetDict(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_GenericSetDict
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyObject_Hash(&self, arg1: *mut PyObject) -> Py_hash_t {
        (self
            .PyObject_Hash
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_HashNotImplemented(&self, arg1: *mut PyObject) -> Py_hash_t {
        (self
            .PyObject_HashNotImplemented
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_IsTrue(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_IsTrue
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_Not(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_Not
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCallable_Check(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyCallable_Check
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_ClearWeakRefs(&self, arg1: *mut PyObject) -> () {
        (self
            .PyObject_ClearWeakRefs
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_Dir(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_Dir
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_ReprEnter(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .Py_ReprEnter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_ReprLeave(&self, arg1: *mut PyObject) -> () {
        (self
            .Py_ReprLeave
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_Dealloc(&self, arg1: *mut PyObject) -> () {
        (self
            ._Py_Dealloc
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_IncRef(&self, arg1: *mut PyObject) -> () {
        (self
            .Py_IncRef
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_DecRef(&self, arg1: *mut PyObject) -> () {
        (self
            .Py_DecRef
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_NewReference(&self, op: *mut PyObject) -> () {
        (self
            ._Py_NewReference
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn _PyTraceMalloc_NewReference(&self, op: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyTraceMalloc_NewReference
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn _PyType_Name(&self, arg1: *mut PyTypeObject) -> *const ::std::os::raw::c_char {
        (self
            ._PyType_Name
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyType_Lookup(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyType_Lookup
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyType_LookupId(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut _Py_Identifier,
    ) -> *mut PyObject {
        (self
            ._PyType_LookupId
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyObject_LookupSpecial(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _Py_Identifier,
    ) -> *mut PyObject {
        (self
            ._PyObject_LookupSpecial
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyType_CalculateMetaclass(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyObject,
    ) -> *mut PyTypeObject {
        (self
            ._PyType_CalculateMetaclass
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyType_GetDocFromInternalDoc(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyType_GetDocFromInternalDoc
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyType_GetTextSignatureFromInternalDoc(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyType_GetTextSignatureFromInternalDoc
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_Print(
        &self,
        arg1: *mut PyObject,
        arg2: *mut FILE,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_Print
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _Py_BreakPoint(&self) -> () {
        (self
            ._Py_BreakPoint
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyObject_Dump(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyObject_Dump
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_IsFreed(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyObject_IsFreed
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_IsAbstract(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyObject_IsAbstract
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_GetAttrId(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _Py_Identifier,
    ) -> *mut PyObject {
        (self
            ._PyObject_GetAttrId
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyObject_SetAttrId(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _Py_Identifier,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_SetAttrId
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyObject_HasAttrId(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _Py_Identifier,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_HasAttrId
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyObject_LookupAttr(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_LookupAttr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyObject_LookupAttrId(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _Py_Identifier,
        arg3: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_LookupAttrId
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyObject_GetMethod(
        &self,
        obj: *mut PyObject,
        name: *mut PyObject,
        method: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_GetMethod
            .as_ref()
            .expect("Expected function, got error."))(obj, name, method)
    }
    pub unsafe fn _PyObject_GetDictPtr(&self, arg1: *mut PyObject) -> *mut *mut PyObject {
        (self
            ._PyObject_GetDictPtr
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_NextNotImplemented(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            ._PyObject_NextNotImplemented
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_CallFinalizer(&self, arg1: *mut PyObject) -> () {
        (self
            .PyObject_CallFinalizer
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_CallFinalizerFromDealloc(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_CallFinalizerFromDealloc
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_GenericGetAttrWithDict(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyObject_GenericGetAttrWithDict
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyObject_GenericSetAttrWithDict(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_GenericSetAttrWithDict
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyObject_FunctionStr(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            ._PyObject_FunctionStr
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyDebugAllocatorStats(
        &self,
        out: *mut FILE,
        block_name: *const ::std::os::raw::c_char,
        num_blocks: ::std::os::raw::c_int,
        sizeof_block: size_t,
    ) -> () {
        (self
            ._PyDebugAllocatorStats
            .as_ref()
            .expect("Expected function, got error."))(
            out, block_name, num_blocks, sizeof_block
        )
    }
    pub unsafe fn _PyObject_DebugTypeStats(&self, out: *mut FILE) -> () {
        (self
            ._PyObject_DebugTypeStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn _PyObject_AssertFailed(
        &self,
        obj: *mut PyObject,
        expr: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            ._PyObject_AssertFailed
            .as_ref()
            .expect("Expected function, got error."))(obj, expr, msg, file, line, function)
    }
    pub unsafe fn _PyObject_CheckConsistency(
        &self,
        op: *mut PyObject,
        check_content: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_CheckConsistency
            .as_ref()
            .expect("Expected function, got error."))(op, check_content)
    }
    pub unsafe fn _PyTrash_deposit_object(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyTrash_deposit_object
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyTrash_destroy_chain(&self) -> () {
        (self
            ._PyTrash_destroy_chain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTrash_thread_deposit_object(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyTrash_thread_deposit_object
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyTrash_thread_destroy_chain(&self) -> () {
        (self
            ._PyTrash_thread_destroy_chain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTrash_begin(
        &self,
        tstate: *mut _ts,
        op: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTrash_begin
            .as_ref()
            .expect("Expected function, got error."))(tstate, op)
    }
    pub unsafe fn _PyTrash_end(&self, tstate: *mut _ts) -> () {
        (self
            ._PyTrash_end
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn _PyLong_FromTime_t(&self, sec: time_t) -> *mut PyObject {
        (self
            ._PyLong_FromTime_t
            .as_ref()
            .expect("Expected function, got error."))(sec)
    }
    pub unsafe fn _PyLong_AsTime_t(&self, obj: *mut PyObject) -> time_t {
        (self
            ._PyLong_AsTime_t
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn _PyTime_ObjectToTime_t(
        &self,
        obj: *mut PyObject,
        sec: *mut time_t,
        arg1: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_ObjectToTime_t
            .as_ref()
            .expect("Expected function, got error."))(obj, sec, arg1)
    }
    pub unsafe fn _PyTime_ObjectToTimeval(
        &self,
        obj: *mut PyObject,
        sec: *mut time_t,
        usec: *mut ::std::os::raw::c_long,
        arg1: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_ObjectToTimeval
            .as_ref()
            .expect("Expected function, got error."))(obj, sec, usec, arg1)
    }
    pub unsafe fn _PyTime_ObjectToTimespec(
        &self,
        obj: *mut PyObject,
        sec: *mut time_t,
        nsec: *mut ::std::os::raw::c_long,
        arg1: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_ObjectToTimespec
            .as_ref()
            .expect("Expected function, got error."))(obj, sec, nsec, arg1)
    }
    pub unsafe fn _PyTime_FromSeconds(&self, seconds: ::std::os::raw::c_int) -> _PyTime_t {
        (self
            ._PyTime_FromSeconds
            .as_ref()
            .expect("Expected function, got error."))(seconds)
    }
    pub unsafe fn _PyTime_FromNanoseconds(&self, ns: _PyTime_t) -> _PyTime_t {
        (self
            ._PyTime_FromNanoseconds
            .as_ref()
            .expect("Expected function, got error."))(ns)
    }
    pub unsafe fn _PyTime_FromNanosecondsObject(
        &self,
        t: *mut _PyTime_t,
        obj: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_FromNanosecondsObject
            .as_ref()
            .expect("Expected function, got error."))(t, obj)
    }
    pub unsafe fn _PyTime_FromSecondsObject(
        &self,
        t: *mut _PyTime_t,
        obj: *mut PyObject,
        round: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_FromSecondsObject
            .as_ref()
            .expect("Expected function, got error."))(t, obj, round)
    }
    pub unsafe fn _PyTime_FromMillisecondsObject(
        &self,
        t: *mut _PyTime_t,
        obj: *mut PyObject,
        round: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_FromMillisecondsObject
            .as_ref()
            .expect("Expected function, got error."))(t, obj, round)
    }
    pub unsafe fn _PyTime_AsSecondsDouble(&self, t: _PyTime_t) -> f64 {
        (self
            ._PyTime_AsSecondsDouble
            .as_ref()
            .expect("Expected function, got error."))(t)
    }
    pub unsafe fn _PyTime_AsMilliseconds(&self, t: _PyTime_t, round: _PyTime_round_t) -> _PyTime_t {
        (self
            ._PyTime_AsMilliseconds
            .as_ref()
            .expect("Expected function, got error."))(t, round)
    }
    pub unsafe fn _PyTime_AsMicroseconds(&self, t: _PyTime_t, round: _PyTime_round_t) -> _PyTime_t {
        (self
            ._PyTime_AsMicroseconds
            .as_ref()
            .expect("Expected function, got error."))(t, round)
    }
    pub unsafe fn _PyTime_AsNanosecondsObject(&self, t: _PyTime_t) -> *mut PyObject {
        (self
            ._PyTime_AsNanosecondsObject
            .as_ref()
            .expect("Expected function, got error."))(t)
    }
    pub unsafe fn _PyTime_FromTimeval(
        &self,
        tp: *mut _PyTime_t,
        tv: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_FromTimeval
            .as_ref()
            .expect("Expected function, got error."))(tp, tv)
    }
    pub unsafe fn _PyTime_AsTimeval(
        &self,
        t: _PyTime_t,
        tv: *mut timeval,
        round: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_AsTimeval
            .as_ref()
            .expect("Expected function, got error."))(t, tv, round)
    }
    pub unsafe fn _PyTime_AsTimeval_noraise(
        &self,
        t: _PyTime_t,
        tv: *mut timeval,
        round: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_AsTimeval_noraise
            .as_ref()
            .expect("Expected function, got error."))(t, tv, round)
    }
    pub unsafe fn _PyTime_AsTimevalTime_t(
        &self,
        t: _PyTime_t,
        secs: *mut time_t,
        us: *mut ::std::os::raw::c_int,
        round: _PyTime_round_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_AsTimevalTime_t
            .as_ref()
            .expect("Expected function, got error."))(t, secs, us, round)
    }
    pub unsafe fn _PyTime_FromTimespec(
        &self,
        tp: *mut _PyTime_t,
        ts: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_FromTimespec
            .as_ref()
            .expect("Expected function, got error."))(tp, ts)
    }
    pub unsafe fn _PyTime_AsTimespec(
        &self,
        t: _PyTime_t,
        ts: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_AsTimespec
            .as_ref()
            .expect("Expected function, got error."))(t, ts)
    }
    pub unsafe fn _PyTime_MulDiv(
        &self,
        ticks: _PyTime_t,
        mul: _PyTime_t,
        div: _PyTime_t,
    ) -> _PyTime_t {
        (self
            ._PyTime_MulDiv
            .as_ref()
            .expect("Expected function, got error."))(ticks, mul, div)
    }
    pub unsafe fn _PyTime_GetSystemClock(&self) -> _PyTime_t {
        (self
            ._PyTime_GetSystemClock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTime_GetMonotonicClock(&self) -> _PyTime_t {
        (self
            ._PyTime_GetMonotonicClock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTime_GetSystemClockWithInfo(
        &self,
        t: *mut _PyTime_t,
        info: *mut _Py_clock_info_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_GetSystemClockWithInfo
            .as_ref()
            .expect("Expected function, got error."))(t, info)
    }
    pub unsafe fn _PyTime_GetMonotonicClockWithInfo(
        &self,
        t: *mut _PyTime_t,
        info: *mut _Py_clock_info_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_GetMonotonicClockWithInfo
            .as_ref()
            .expect("Expected function, got error."))(t, info)
    }
    pub unsafe fn _PyTime_Init(&self) -> ::std::os::raw::c_int {
        (self
            ._PyTime_Init
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTime_localtime(&self, t: time_t, tm: *mut tm) -> ::std::os::raw::c_int {
        (self
            ._PyTime_localtime
            .as_ref()
            .expect("Expected function, got error."))(t, tm)
    }
    pub unsafe fn _PyTime_gmtime(&self, t: time_t, tm: *mut tm) -> ::std::os::raw::c_int {
        (self
            ._PyTime_gmtime
            .as_ref()
            .expect("Expected function, got error."))(t, tm)
    }
    pub unsafe fn _PyTime_GetPerfCounter(&self) -> _PyTime_t {
        (self
            ._PyTime_GetPerfCounter
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyTime_GetPerfCounterWithInfo(
        &self,
        t: *mut _PyTime_t,
        info: *mut _Py_clock_info_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTime_GetPerfCounterWithInfo
            .as_ref()
            .expect("Expected function, got error."))(t, info)
    }
    pub unsafe fn PyMem_Malloc(&self, size: size_t) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_Malloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyMem_Realloc(
        &self,
        ptr: *mut ::std::os::raw::c_void,
        new_size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_Realloc
            .as_ref()
            .expect("Expected function, got error."))(ptr, new_size)
    }
    pub unsafe fn PyMem_Free(&self, ptr: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyMem_Free
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn PyMem_RawMalloc(&self, size: size_t) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_RawMalloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyMem_RawCalloc(
        &self,
        nelem: size_t,
        elsize: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_RawCalloc
            .as_ref()
            .expect("Expected function, got error."))(nelem, elsize)
    }
    pub unsafe fn PyMem_RawRealloc(
        &self,
        ptr: *mut ::std::os::raw::c_void,
        new_size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_RawRealloc
            .as_ref()
            .expect("Expected function, got error."))(ptr, new_size)
    }
    pub unsafe fn PyMem_RawFree(&self, ptr: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyMem_RawFree
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn _PyMem_GetCurrentAllocatorName(&self) -> *const ::std::os::raw::c_char {
        (self
            ._PyMem_GetCurrentAllocatorName
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyMem_Calloc(
        &self,
        nelem: size_t,
        elsize: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyMem_Calloc
            .as_ref()
            .expect("Expected function, got error."))(nelem, elsize)
    }
    pub unsafe fn _PyMem_RawStrdup(
        &self,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._PyMem_RawStrdup
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn _PyMem_Strdup(
        &self,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._PyMem_Strdup
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn _PyMem_RawWcsdup(&self, str_: *const wchar_t) -> *mut wchar_t {
        (self
            ._PyMem_RawWcsdup
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn PyMem_GetAllocator(
        &self,
        domain: PyMemAllocatorDomain,
        allocator: *mut PyMemAllocatorEx,
    ) -> () {
        (self
            .PyMem_GetAllocator
            .as_ref()
            .expect("Expected function, got error."))(domain, allocator)
    }
    pub unsafe fn PyMem_SetAllocator(
        &self,
        domain: PyMemAllocatorDomain,
        allocator: *mut PyMemAllocatorEx,
    ) -> () {
        (self
            .PyMem_SetAllocator
            .as_ref()
            .expect("Expected function, got error."))(domain, allocator)
    }
    pub unsafe fn PyMem_SetupDebugHooks(&self) -> () {
        (self
            .PyMem_SetupDebugHooks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyObject_Malloc(&self, size: size_t) -> *mut ::std::os::raw::c_void {
        (self
            .PyObject_Malloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyObject_Calloc(
        &self,
        nelem: size_t,
        elsize: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyObject_Calloc
            .as_ref()
            .expect("Expected function, got error."))(nelem, elsize)
    }
    pub unsafe fn PyObject_Realloc(
        &self,
        ptr: *mut ::std::os::raw::c_void,
        new_size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyObject_Realloc
            .as_ref()
            .expect("Expected function, got error."))(ptr, new_size)
    }
    pub unsafe fn PyObject_Free(&self, ptr: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyObject_Free
            .as_ref()
            .expect("Expected function, got error."))(ptr)
    }
    pub unsafe fn PyObject_Init(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyTypeObject,
    ) -> *mut PyObject {
        (self
            .PyObject_Init
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_InitVar(
        &self,
        arg1: *mut PyVarObject,
        arg2: *mut PyTypeObject,
        arg3: Py_ssize_t,
    ) -> *mut PyVarObject {
        (self
            .PyObject_InitVar
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyObject_New(&self, arg1: *mut PyTypeObject) -> *mut PyObject {
        (self
            ._PyObject_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_NewVar(
        &self,
        arg1: *mut PyTypeObject,
        arg2: Py_ssize_t,
    ) -> *mut PyVarObject {
        (self
            ._PyObject_NewVar
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyGC_Collect(&self) -> Py_ssize_t {
        (self
            .PyGC_Collect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyObject_GC_Resize(
        &self,
        arg1: *mut PyVarObject,
        arg2: Py_ssize_t,
    ) -> *mut PyVarObject {
        (self
            ._PyObject_GC_Resize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyObject_GC_New(&self, arg1: *mut PyTypeObject) -> *mut PyObject {
        (self
            ._PyObject_GC_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_GC_NewVar(
        &self,
        arg1: *mut PyTypeObject,
        arg2: Py_ssize_t,
    ) -> *mut PyVarObject {
        (self
            ._PyObject_GC_NewVar
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_GC_Track(&self, arg1: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyObject_GC_Track
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_GC_UnTrack(&self, arg1: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyObject_GC_UnTrack
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_GC_Del(&self, arg1: *mut ::std::os::raw::c_void) -> () {
        (self
            .PyObject_GC_Del
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_GC_IsTracked(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_GC_IsTracked
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyObject_GC_IsFinalized(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_GC_IsFinalized
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_GetAllocatedBlocks(&self) -> Py_ssize_t {
        (self
            ._Py_GetAllocatedBlocks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyObject_DebugMallocStats(&self, out: *mut FILE) -> ::std::os::raw::c_int {
        (self
            ._PyObject_DebugMallocStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn PyObject_GetArenaAllocator(&self, allocator: *mut PyObjectArenaAllocator) -> () {
        (self
            .PyObject_GetArenaAllocator
            .as_ref()
            .expect("Expected function, got error."))(allocator)
    }
    pub unsafe fn PyObject_SetArenaAllocator(&self, allocator: *mut PyObjectArenaAllocator) -> () {
        (self
            .PyObject_SetArenaAllocator
            .as_ref()
            .expect("Expected function, got error."))(allocator)
    }
    pub unsafe fn _PyGC_CollectNoFail(&self) -> Py_ssize_t {
        (self
            ._PyGC_CollectNoFail
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyGC_CollectIfEnabled(&self) -> Py_ssize_t {
        (self
            ._PyGC_CollectIfEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyObject_IS_GC(&self, obj: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_IS_GC
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn _PyObject_GC_Malloc(&self, size: size_t) -> *mut PyObject {
        (self
            ._PyObject_GC_Malloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn _PyObject_GC_Calloc(&self, size: size_t) -> *mut PyObject {
        (self
            ._PyObject_GC_Calloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyObject_GET_WEAKREFS_LISTPTR(&self, op: *mut PyObject) -> *mut *mut PyObject {
        (self
            .PyObject_GET_WEAKREFS_LISTPTR
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn _Py_HashDouble(&self, arg1: f64) -> Py_hash_t {
        (self
            ._Py_HashDouble
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_HashPointer(&self, arg1: *const ::std::os::raw::c_void) -> Py_hash_t {
        (self
            ._Py_HashPointer
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_HashPointerRaw(&self, arg1: *const ::std::os::raw::c_void) -> Py_hash_t {
        (self
            ._Py_HashPointerRaw
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_HashBytes(
        &self,
        arg1: *const ::std::os::raw::c_void,
        arg2: Py_ssize_t,
    ) -> Py_hash_t {
        (self
            ._Py_HashBytes
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyHash_GetFuncDef(&self) -> *mut PyHash_FuncDef {
        (self
            .PyHash_GetFuncDef
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyByteArray_FromObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyByteArray_FromObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyByteArray_Concat(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyByteArray_Concat
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyByteArray_FromStringAndSize(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyByteArray_FromStringAndSize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyByteArray_Size(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            .PyByteArray_Size
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyByteArray_AsString(&self, arg1: *mut PyObject) -> *mut ::std::os::raw::c_char {
        (self
            .PyByteArray_AsString
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyByteArray_Resize(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyByteArray_Resize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_FromStringAndSize(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyBytes_FromStringAndSize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_FromString(&self, arg1: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyBytes_FromString
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyBytes_FromObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyBytes_FromObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyBytes_FromFormatV(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject {
        (self
            .PyBytes_FromFormatV
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_Size(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            .PyBytes_Size
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyBytes_AsString(&self, arg1: *mut PyObject) -> *mut ::std::os::raw::c_char {
        (self
            .PyBytes_AsString
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyBytes_Repr(
        &self,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyBytes_Repr
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_Concat(&self, arg1: *mut *mut PyObject, arg2: *mut PyObject) -> () {
        (self
            .PyBytes_Concat
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_ConcatAndDel(&self, arg1: *mut *mut PyObject, arg2: *mut PyObject) -> () {
        (self
            .PyBytes_ConcatAndDel
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyBytes_DecodeEscape(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: Py_ssize_t,
        arg5: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyBytes_DecodeEscape
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4, arg5)
    }
    pub unsafe fn PyBytes_AsStringAndSize(
        &self,
        obj: *mut PyObject,
        s: *mut *mut ::std::os::raw::c_char,
        len: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyBytes_AsStringAndSize
            .as_ref()
            .expect("Expected function, got error."))(obj, s, len)
    }
    pub unsafe fn _PyBytes_Resize(
        &self,
        arg1: *mut *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyBytes_Resize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyBytes_FormatEx(
        &self,
        format: *const ::std::os::raw::c_char,
        format_len: Py_ssize_t,
        args: *mut PyObject,
        use_bytearray: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyBytes_FormatEx
            .as_ref()
            .expect("Expected function, got error."))(
            format, format_len, args, use_bytearray
        )
    }
    pub unsafe fn _PyBytes_FromHex(
        &self,
        string: *mut PyObject,
        use_bytearray: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyBytes_FromHex
            .as_ref()
            .expect("Expected function, got error."))(string, use_bytearray)
    }
    pub unsafe fn _PyBytes_DecodeEscape(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyBytes_DecodeEscape
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyBytes_Join(&self, sep: *mut PyObject, x: *mut PyObject) -> *mut PyObject {
        (self
            ._PyBytes_Join
            .as_ref()
            .expect("Expected function, got error."))(sep, x)
    }
    pub unsafe fn _PyBytesWriter_Init(&self, writer: *mut _PyBytesWriter) -> () {
        (self
            ._PyBytesWriter_Init
            .as_ref()
            .expect("Expected function, got error."))(writer)
    }
    pub unsafe fn _PyBytesWriter_Finish(
        &self,
        writer: *mut _PyBytesWriter,
        str_: *mut ::std::os::raw::c_void,
    ) -> *mut PyObject {
        (self
            ._PyBytesWriter_Finish
            .as_ref()
            .expect("Expected function, got error."))(writer, str_)
    }
    pub unsafe fn _PyBytesWriter_Dealloc(&self, writer: *mut _PyBytesWriter) -> () {
        (self
            ._PyBytesWriter_Dealloc
            .as_ref()
            .expect("Expected function, got error."))(writer)
    }
    pub unsafe fn _PyBytesWriter_Alloc(
        &self,
        writer: *mut _PyBytesWriter,
        size: Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._PyBytesWriter_Alloc
            .as_ref()
            .expect("Expected function, got error."))(writer, size)
    }
    pub unsafe fn _PyBytesWriter_Prepare(
        &self,
        writer: *mut _PyBytesWriter,
        str_: *mut ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._PyBytesWriter_Prepare
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, size)
    }
    pub unsafe fn _PyBytesWriter_Resize(
        &self,
        writer: *mut _PyBytesWriter,
        str_: *mut ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._PyBytesWriter_Resize
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, size)
    }
    pub unsafe fn _PyBytesWriter_WriteBytes(
        &self,
        writer: *mut _PyBytesWriter,
        str_: *mut ::std::os::raw::c_void,
        bytes: *const ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._PyBytesWriter_WriteBytes
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, bytes, size)
    }
    pub unsafe fn PyUnicode_FromStringAndSize(
        &self,
        u: *const ::std::os::raw::c_char,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromStringAndSize
            .as_ref()
            .expect("Expected function, got error."))(u, size)
    }
    pub unsafe fn PyUnicode_FromString(&self, u: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyUnicode_FromString
            .as_ref()
            .expect("Expected function, got error."))(u)
    }
    pub unsafe fn PyUnicode_Substring(
        &self,
        str_: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Substring
            .as_ref()
            .expect("Expected function, got error."))(str_, start, end)
    }
    pub unsafe fn PyUnicode_AsUCS4(
        &self,
        unicode: *mut PyObject,
        buffer: *mut Py_UCS4,
        buflen: Py_ssize_t,
        copy_null: ::std::os::raw::c_int,
    ) -> *mut Py_UCS4 {
        (self
            .PyUnicode_AsUCS4
            .as_ref()
            .expect("Expected function, got error."))(unicode, buffer, buflen, copy_null)
    }
    pub unsafe fn PyUnicode_AsUCS4Copy(&self, unicode: *mut PyObject) -> *mut Py_UCS4 {
        (self
            .PyUnicode_AsUCS4Copy
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_GetLength(&self, unicode: *mut PyObject) -> Py_ssize_t {
        (self
            .PyUnicode_GetLength
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_GetSize(&self, unicode: *mut PyObject) -> Py_ssize_t {
        (self
            .PyUnicode_GetSize
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_ReadChar(&self, unicode: *mut PyObject, index: Py_ssize_t) -> Py_UCS4 {
        (self
            .PyUnicode_ReadChar
            .as_ref()
            .expect("Expected function, got error."))(unicode, index)
    }
    pub unsafe fn PyUnicode_WriteChar(
        &self,
        unicode: *mut PyObject,
        index: Py_ssize_t,
        character: Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_WriteChar
            .as_ref()
            .expect("Expected function, got error."))(unicode, index, character)
    }
    pub unsafe fn PyUnicode_Resize(
        &self,
        unicode: *mut *mut PyObject,
        length: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_Resize
            .as_ref()
            .expect("Expected function, got error."))(unicode, length)
    }
    pub unsafe fn PyUnicode_FromEncodedObject(
        &self,
        obj: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromEncodedObject
            .as_ref()
            .expect("Expected function, got error."))(obj, encoding, errors)
    }
    pub unsafe fn PyUnicode_FromObject(&self, obj: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_FromObject
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn PyUnicode_FromFormatV(
        &self,
        format: *const ::std::os::raw::c_char,
        vargs: *mut __va_list_tag,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromFormatV
            .as_ref()
            .expect("Expected function, got error."))(format, vargs)
    }
    pub unsafe fn PyUnicode_InternInPlace(&self, arg1: *mut *mut PyObject) -> () {
        (self
            .PyUnicode_InternInPlace
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicode_InternImmortal(&self, arg1: *mut *mut PyObject) -> () {
        (self
            .PyUnicode_InternImmortal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicode_InternFromString(
        &self,
        u: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_InternFromString
            .as_ref()
            .expect("Expected function, got error."))(u)
    }
    pub unsafe fn PyUnicode_FromWideChar(
        &self,
        w: *const wchar_t,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromWideChar
            .as_ref()
            .expect("Expected function, got error."))(w, size)
    }
    pub unsafe fn PyUnicode_AsWideChar(
        &self,
        unicode: *mut PyObject,
        w: *mut wchar_t,
        size: Py_ssize_t,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_AsWideChar
            .as_ref()
            .expect("Expected function, got error."))(unicode, w, size)
    }
    pub unsafe fn PyUnicode_AsWideCharString(
        &self,
        unicode: *mut PyObject,
        size: *mut Py_ssize_t,
    ) -> *mut wchar_t {
        (self
            .PyUnicode_AsWideCharString
            .as_ref()
            .expect("Expected function, got error."))(unicode, size)
    }
    pub unsafe fn PyUnicode_FromOrdinal(&self, ordinal: ::std::os::raw::c_int) -> *mut PyObject {
        (self
            .PyUnicode_FromOrdinal
            .as_ref()
            .expect("Expected function, got error."))(ordinal)
    }
    pub unsafe fn PyUnicode_GetDefaultEncoding(&self) -> *const ::std::os::raw::c_char {
        (self
            .PyUnicode_GetDefaultEncoding
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyUnicode_Decode(
        &self,
        s: *const ::std::os::raw::c_char,
        size: Py_ssize_t,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Decode
            .as_ref()
            .expect("Expected function, got error."))(s, size, encoding, errors)
    }
    pub unsafe fn PyUnicode_AsDecodedObject(
        &self,
        unicode: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsDecodedObject
            .as_ref()
            .expect("Expected function, got error."))(unicode, encoding, errors)
    }
    pub unsafe fn PyUnicode_AsDecodedUnicode(
        &self,
        unicode: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsDecodedUnicode
            .as_ref()
            .expect("Expected function, got error."))(unicode, encoding, errors)
    }
    pub unsafe fn PyUnicode_AsEncodedObject(
        &self,
        unicode: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsEncodedObject
            .as_ref()
            .expect("Expected function, got error."))(unicode, encoding, errors)
    }
    pub unsafe fn PyUnicode_AsEncodedString(
        &self,
        unicode: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsEncodedString
            .as_ref()
            .expect("Expected function, got error."))(unicode, encoding, errors)
    }
    pub unsafe fn PyUnicode_AsEncodedUnicode(
        &self,
        unicode: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsEncodedUnicode
            .as_ref()
            .expect("Expected function, got error."))(unicode, encoding, errors)
    }
    pub unsafe fn PyUnicode_BuildEncodingMap(&self, string: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_BuildEncodingMap
            .as_ref()
            .expect("Expected function, got error."))(string)
    }
    pub unsafe fn PyUnicode_DecodeUTF7(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF7
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_DecodeUTF7Stateful(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        consumed: *mut Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF7Stateful
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors, consumed)
    }
    pub unsafe fn PyUnicode_DecodeUTF8(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF8
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_DecodeUTF8Stateful(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        consumed: *mut Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF8Stateful
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors, consumed)
    }
    pub unsafe fn PyUnicode_AsUTF8String(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsUTF8String
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeUTF32(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: *mut ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF32
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors, byteorder)
    }
    pub unsafe fn PyUnicode_DecodeUTF32Stateful(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: *mut ::std::os::raw::c_int,
        consumed: *mut Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF32Stateful
            .as_ref()
            .expect("Expected function, got error."))(
            string, length, errors, byteorder, consumed
        )
    }
    pub unsafe fn PyUnicode_AsUTF32String(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsUTF32String
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeUTF16(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: *mut ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF16
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors, byteorder)
    }
    pub unsafe fn PyUnicode_DecodeUTF16Stateful(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: *mut ::std::os::raw::c_int,
        consumed: *mut Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUTF16Stateful
            .as_ref()
            .expect("Expected function, got error."))(
            string, length, errors, byteorder, consumed
        )
    }
    pub unsafe fn PyUnicode_AsUTF16String(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsUTF16String
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeUnicodeEscape(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeUnicodeEscape
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_AsUnicodeEscapeString(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsUnicodeEscapeString
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeRawUnicodeEscape(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeRawUnicodeEscape
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_AsRawUnicodeEscapeString(
        &self,
        unicode: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsRawUnicodeEscapeString
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeLatin1(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeLatin1
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_AsLatin1String(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsLatin1String
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeASCII(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeASCII
            .as_ref()
            .expect("Expected function, got error."))(string, length, errors)
    }
    pub unsafe fn PyUnicode_AsASCIIString(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_AsASCIIString
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_DecodeCharmap(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        mapping: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeCharmap
            .as_ref()
            .expect("Expected function, got error."))(string, length, mapping, errors)
    }
    pub unsafe fn PyUnicode_AsCharmapString(
        &self,
        unicode: *mut PyObject,
        mapping: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_AsCharmapString
            .as_ref()
            .expect("Expected function, got error."))(unicode, mapping)
    }
    pub unsafe fn PyUnicode_DecodeLocaleAndSize(
        &self,
        str_: *const ::std::os::raw::c_char,
        len: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeLocaleAndSize
            .as_ref()
            .expect("Expected function, got error."))(str_, len, errors)
    }
    pub unsafe fn PyUnicode_DecodeLocale(
        &self,
        str_: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeLocale
            .as_ref()
            .expect("Expected function, got error."))(str_, errors)
    }
    pub unsafe fn PyUnicode_EncodeLocale(
        &self,
        unicode: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeLocale
            .as_ref()
            .expect("Expected function, got error."))(unicode, errors)
    }
    pub unsafe fn PyUnicode_FSConverter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_FSConverter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicode_FSDecoder(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_FSDecoder
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicode_DecodeFSDefault(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeFSDefault
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn PyUnicode_DecodeFSDefaultAndSize(
        &self,
        s: *const ::std::os::raw::c_char,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_DecodeFSDefaultAndSize
            .as_ref()
            .expect("Expected function, got error."))(s, size)
    }
    pub unsafe fn PyUnicode_EncodeFSDefault(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicode_EncodeFSDefault
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_Concat(
        &self,
        left: *mut PyObject,
        right: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Concat
            .as_ref()
            .expect("Expected function, got error."))(left, right)
    }
    pub unsafe fn PyUnicode_Append(&self, pleft: *mut *mut PyObject, right: *mut PyObject) -> () {
        (self
            .PyUnicode_Append
            .as_ref()
            .expect("Expected function, got error."))(pleft, right)
    }
    pub unsafe fn PyUnicode_AppendAndDel(
        &self,
        pleft: *mut *mut PyObject,
        right: *mut PyObject,
    ) -> () {
        (self
            .PyUnicode_AppendAndDel
            .as_ref()
            .expect("Expected function, got error."))(pleft, right)
    }
    pub unsafe fn PyUnicode_Split(
        &self,
        s: *mut PyObject,
        sep: *mut PyObject,
        maxsplit: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Split
            .as_ref()
            .expect("Expected function, got error."))(s, sep, maxsplit)
    }
    pub unsafe fn PyUnicode_Splitlines(
        &self,
        s: *mut PyObject,
        keepends: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Splitlines
            .as_ref()
            .expect("Expected function, got error."))(s, keepends)
    }
    pub unsafe fn PyUnicode_Partition(
        &self,
        s: *mut PyObject,
        sep: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Partition
            .as_ref()
            .expect("Expected function, got error."))(s, sep)
    }
    pub unsafe fn PyUnicode_RPartition(
        &self,
        s: *mut PyObject,
        sep: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_RPartition
            .as_ref()
            .expect("Expected function, got error."))(s, sep)
    }
    pub unsafe fn PyUnicode_RSplit(
        &self,
        s: *mut PyObject,
        sep: *mut PyObject,
        maxsplit: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_RSplit
            .as_ref()
            .expect("Expected function, got error."))(s, sep, maxsplit)
    }
    pub unsafe fn PyUnicode_Translate(
        &self,
        str_: *mut PyObject,
        table: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Translate
            .as_ref()
            .expect("Expected function, got error."))(str_, table, errors)
    }
    pub unsafe fn PyUnicode_Join(
        &self,
        separator: *mut PyObject,
        seq: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Join
            .as_ref()
            .expect("Expected function, got error."))(separator, seq)
    }
    pub unsafe fn PyUnicode_Tailmatch(
        &self,
        str_: *mut PyObject,
        substr: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
        direction: ::std::os::raw::c_int,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_Tailmatch
            .as_ref()
            .expect("Expected function, got error."))(str_, substr, start, end, direction)
    }
    pub unsafe fn PyUnicode_Find(
        &self,
        str_: *mut PyObject,
        substr: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
        direction: ::std::os::raw::c_int,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_Find
            .as_ref()
            .expect("Expected function, got error."))(str_, substr, start, end, direction)
    }
    pub unsafe fn PyUnicode_FindChar(
        &self,
        str_: *mut PyObject,
        ch: Py_UCS4,
        start: Py_ssize_t,
        end: Py_ssize_t,
        direction: ::std::os::raw::c_int,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_FindChar
            .as_ref()
            .expect("Expected function, got error."))(str_, ch, start, end, direction)
    }
    pub unsafe fn PyUnicode_Count(
        &self,
        str_: *mut PyObject,
        substr: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_Count
            .as_ref()
            .expect("Expected function, got error."))(str_, substr, start, end)
    }
    pub unsafe fn PyUnicode_Replace(
        &self,
        str_: *mut PyObject,
        substr: *mut PyObject,
        replstr: *mut PyObject,
        maxcount: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Replace
            .as_ref()
            .expect("Expected function, got error."))(str_, substr, replstr, maxcount)
    }
    pub unsafe fn PyUnicode_Compare(
        &self,
        left: *mut PyObject,
        right: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_Compare
            .as_ref()
            .expect("Expected function, got error."))(left, right)
    }
    pub unsafe fn PyUnicode_CompareWithASCIIString(
        &self,
        left: *mut PyObject,
        right: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_CompareWithASCIIString
            .as_ref()
            .expect("Expected function, got error."))(left, right)
    }
    pub unsafe fn PyUnicode_RichCompare(
        &self,
        left: *mut PyObject,
        right: *mut PyObject,
        op: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_RichCompare
            .as_ref()
            .expect("Expected function, got error."))(left, right, op)
    }
    pub unsafe fn PyUnicode_Format(
        &self,
        format: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Format
            .as_ref()
            .expect("Expected function, got error."))(format, args)
    }
    pub unsafe fn PyUnicode_Contains(
        &self,
        container: *mut PyObject,
        element: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_Contains
            .as_ref()
            .expect("Expected function, got error."))(container, element)
    }
    pub unsafe fn PyUnicode_IsIdentifier(&self, s: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_IsIdentifier
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn _PyUnicode_CheckConsistency(
        &self,
        op: *mut PyObject,
        check_content: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_CheckConsistency
            .as_ref()
            .expect("Expected function, got error."))(op, check_content)
    }
    pub unsafe fn PyUnicode_New(&self, size: Py_ssize_t, maxchar: Py_UCS4) -> *mut PyObject {
        (self
            .PyUnicode_New
            .as_ref()
            .expect("Expected function, got error."))(size, maxchar)
    }
    pub unsafe fn _PyUnicode_Ready(&self, unicode: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_Ready
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn _PyUnicode_Copy(&self, unicode: *mut PyObject) -> *mut PyObject {
        (self
            ._PyUnicode_Copy
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_CopyCharacters(
        &self,
        to: *mut PyObject,
        to_start: Py_ssize_t,
        from: *mut PyObject,
        from_start: Py_ssize_t,
        how_many: Py_ssize_t,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_CopyCharacters
            .as_ref()
            .expect("Expected function, got error."))(
            to, to_start, from, from_start, how_many
        )
    }
    pub unsafe fn _PyUnicode_FastCopyCharacters(
        &self,
        to: *mut PyObject,
        to_start: Py_ssize_t,
        from: *mut PyObject,
        from_start: Py_ssize_t,
        how_many: Py_ssize_t,
    ) -> () {
        (self
            ._PyUnicode_FastCopyCharacters
            .as_ref()
            .expect("Expected function, got error."))(
            to, to_start, from, from_start, how_many
        )
    }
    pub unsafe fn PyUnicode_Fill(
        &self,
        unicode: *mut PyObject,
        start: Py_ssize_t,
        length: Py_ssize_t,
        fill_char: Py_UCS4,
    ) -> Py_ssize_t {
        (self
            .PyUnicode_Fill
            .as_ref()
            .expect("Expected function, got error."))(unicode, start, length, fill_char)
    }
    pub unsafe fn _PyUnicode_FastFill(
        &self,
        unicode: *mut PyObject,
        start: Py_ssize_t,
        length: Py_ssize_t,
        fill_char: Py_UCS4,
    ) -> () {
        (self
            ._PyUnicode_FastFill
            .as_ref()
            .expect("Expected function, got error."))(unicode, start, length, fill_char)
    }
    pub unsafe fn PyUnicode_FromUnicode(
        &self,
        u: *const Py_UNICODE,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromUnicode
            .as_ref()
            .expect("Expected function, got error."))(u, size)
    }
    pub unsafe fn PyUnicode_FromKindAndData(
        &self,
        kind: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_FromKindAndData
            .as_ref()
            .expect("Expected function, got error."))(kind, buffer, size)
    }
    pub unsafe fn _PyUnicode_FromASCII(
        &self,
        buffer: *const ::std::os::raw::c_char,
        size: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_FromASCII
            .as_ref()
            .expect("Expected function, got error."))(buffer, size)
    }
    pub unsafe fn _PyUnicode_FindMaxChar(
        &self,
        unicode: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> Py_UCS4 {
        (self
            ._PyUnicode_FindMaxChar
            .as_ref()
            .expect("Expected function, got error."))(unicode, start, end)
    }
    pub unsafe fn PyUnicode_AsUnicode(&self, unicode: *mut PyObject) -> *mut Py_UNICODE {
        (self
            .PyUnicode_AsUnicode
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn _PyUnicode_AsUnicode(&self, unicode: *mut PyObject) -> *const Py_UNICODE {
        (self
            ._PyUnicode_AsUnicode
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_AsUnicodeAndSize(
        &self,
        unicode: *mut PyObject,
        size: *mut Py_ssize_t,
    ) -> *mut Py_UNICODE {
        (self
            .PyUnicode_AsUnicodeAndSize
            .as_ref()
            .expect("Expected function, got error."))(unicode, size)
    }
    pub unsafe fn PyUnicode_GetMax(&self) -> Py_UNICODE {
        (self
            .PyUnicode_GetMax
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyUnicodeWriter_Init(&self, writer: *mut _PyUnicodeWriter) -> () {
        (self
            ._PyUnicodeWriter_Init
            .as_ref()
            .expect("Expected function, got error."))(writer)
    }
    pub unsafe fn _PyUnicodeWriter_PrepareInternal(
        &self,
        writer: *mut _PyUnicodeWriter,
        length: Py_ssize_t,
        maxchar: Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_PrepareInternal
            .as_ref()
            .expect("Expected function, got error."))(writer, length, maxchar)
    }
    pub unsafe fn _PyUnicodeWriter_PrepareKindInternal(
        &self,
        writer: *mut _PyUnicodeWriter,
        kind: PyUnicode_Kind,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_PrepareKindInternal
            .as_ref()
            .expect("Expected function, got error."))(writer, kind)
    }
    pub unsafe fn _PyUnicodeWriter_WriteChar(
        &self,
        writer: *mut _PyUnicodeWriter,
        ch: Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_WriteChar
            .as_ref()
            .expect("Expected function, got error."))(writer, ch)
    }
    pub unsafe fn _PyUnicodeWriter_WriteStr(
        &self,
        writer: *mut _PyUnicodeWriter,
        str_: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_WriteStr
            .as_ref()
            .expect("Expected function, got error."))(writer, str_)
    }
    pub unsafe fn _PyUnicodeWriter_WriteSubstring(
        &self,
        writer: *mut _PyUnicodeWriter,
        str_: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_WriteSubstring
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, start, end)
    }
    pub unsafe fn _PyUnicodeWriter_WriteASCIIString(
        &self,
        writer: *mut _PyUnicodeWriter,
        str_: *const ::std::os::raw::c_char,
        len: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_WriteASCIIString
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, len)
    }
    pub unsafe fn _PyUnicodeWriter_WriteLatin1String(
        &self,
        writer: *mut _PyUnicodeWriter,
        str_: *const ::std::os::raw::c_char,
        len: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicodeWriter_WriteLatin1String
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, len)
    }
    pub unsafe fn _PyUnicodeWriter_Finish(&self, writer: *mut _PyUnicodeWriter) -> *mut PyObject {
        (self
            ._PyUnicodeWriter_Finish
            .as_ref()
            .expect("Expected function, got error."))(writer)
    }
    pub unsafe fn _PyUnicodeWriter_Dealloc(&self, writer: *mut _PyUnicodeWriter) -> () {
        (self
            ._PyUnicodeWriter_Dealloc
            .as_ref()
            .expect("Expected function, got error."))(writer)
    }
    pub unsafe fn _PyUnicode_FormatAdvancedWriter(
        &self,
        writer: *mut _PyUnicodeWriter,
        obj: *mut PyObject,
        format_spec: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_FormatAdvancedWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, obj, format_spec, start, end)
    }
    pub unsafe fn PyUnicode_AsUTF8AndSize(
        &self,
        unicode: *mut PyObject,
        size: *mut Py_ssize_t,
    ) -> *const ::std::os::raw::c_char {
        (self
            .PyUnicode_AsUTF8AndSize
            .as_ref()
            .expect("Expected function, got error."))(unicode, size)
    }
    pub unsafe fn PyUnicode_AsUTF8(&self, unicode: *mut PyObject) -> *const ::std::os::raw::c_char {
        (self
            .PyUnicode_AsUTF8
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn PyUnicode_Encode(
        &self,
        s: *const Py_UNICODE,
        size: Py_ssize_t,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_Encode
            .as_ref()
            .expect("Expected function, got error."))(s, size, encoding, errors)
    }
    pub unsafe fn PyUnicode_EncodeUTF7(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        base64SetO: ::std::os::raw::c_int,
        base64WhiteSpace: ::std::os::raw::c_int,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeUTF7
            .as_ref()
            .expect("Expected function, got error."))(
            data,
            length,
            base64SetO,
            base64WhiteSpace,
            errors,
        )
    }
    pub unsafe fn _PyUnicode_EncodeUTF7(
        &self,
        unicode: *mut PyObject,
        base64SetO: ::std::os::raw::c_int,
        base64WhiteSpace: ::std::os::raw::c_int,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_EncodeUTF7
            .as_ref()
            .expect("Expected function, got error."))(
            unicode, base64SetO, base64WhiteSpace, errors
        )
    }
    pub unsafe fn _PyUnicode_AsUTF8String(
        &self,
        unicode: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_AsUTF8String
            .as_ref()
            .expect("Expected function, got error."))(unicode, errors)
    }
    pub unsafe fn PyUnicode_EncodeUTF8(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeUTF8
            .as_ref()
            .expect("Expected function, got error."))(data, length, errors)
    }
    pub unsafe fn PyUnicode_EncodeUTF32(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeUTF32
            .as_ref()
            .expect("Expected function, got error."))(data, length, errors, byteorder)
    }
    pub unsafe fn _PyUnicode_EncodeUTF32(
        &self,
        object: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
        byteorder: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_EncodeUTF32
            .as_ref()
            .expect("Expected function, got error."))(object, errors, byteorder)
    }
    pub unsafe fn PyUnicode_EncodeUTF16(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        byteorder: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeUTF16
            .as_ref()
            .expect("Expected function, got error."))(data, length, errors, byteorder)
    }
    pub unsafe fn _PyUnicode_EncodeUTF16(
        &self,
        unicode: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
        byteorder: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_EncodeUTF16
            .as_ref()
            .expect("Expected function, got error."))(unicode, errors, byteorder)
    }
    pub unsafe fn _PyUnicode_DecodeUnicodeEscape(
        &self,
        string: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
        first_invalid_escape: *mut *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_DecodeUnicodeEscape
            .as_ref()
            .expect("Expected function, got error."))(
            string, length, errors, first_invalid_escape
        )
    }
    pub unsafe fn PyUnicode_EncodeUnicodeEscape(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeUnicodeEscape
            .as_ref()
            .expect("Expected function, got error."))(data, length)
    }
    pub unsafe fn PyUnicode_EncodeRawUnicodeEscape(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeRawUnicodeEscape
            .as_ref()
            .expect("Expected function, got error."))(data, length)
    }
    pub unsafe fn _PyUnicode_AsLatin1String(
        &self,
        unicode: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_AsLatin1String
            .as_ref()
            .expect("Expected function, got error."))(unicode, errors)
    }
    pub unsafe fn PyUnicode_EncodeLatin1(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeLatin1
            .as_ref()
            .expect("Expected function, got error."))(data, length, errors)
    }
    pub unsafe fn _PyUnicode_AsASCIIString(
        &self,
        unicode: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_AsASCIIString
            .as_ref()
            .expect("Expected function, got error."))(unicode, errors)
    }
    pub unsafe fn PyUnicode_EncodeASCII(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeASCII
            .as_ref()
            .expect("Expected function, got error."))(data, length, errors)
    }
    pub unsafe fn PyUnicode_EncodeCharmap(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        mapping: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_EncodeCharmap
            .as_ref()
            .expect("Expected function, got error."))(data, length, mapping, errors)
    }
    pub unsafe fn _PyUnicode_EncodeCharmap(
        &self,
        unicode: *mut PyObject,
        mapping: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_EncodeCharmap
            .as_ref()
            .expect("Expected function, got error."))(unicode, mapping, errors)
    }
    pub unsafe fn PyUnicode_TranslateCharmap(
        &self,
        data: *const Py_UNICODE,
        length: Py_ssize_t,
        table: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicode_TranslateCharmap
            .as_ref()
            .expect("Expected function, got error."))(data, length, table, errors)
    }
    pub unsafe fn PyUnicode_EncodeDecimal(
        &self,
        s: *mut Py_UNICODE,
        length: Py_ssize_t,
        output: *mut ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicode_EncodeDecimal
            .as_ref()
            .expect("Expected function, got error."))(s, length, output, errors)
    }
    pub unsafe fn PyUnicode_TransformDecimalToASCII(
        &self,
        s: *mut Py_UNICODE,
        length: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyUnicode_TransformDecimalToASCII
            .as_ref()
            .expect("Expected function, got error."))(s, length)
    }
    pub unsafe fn _PyUnicode_TransformDecimalAndSpaceToASCII(
        &self,
        unicode: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_TransformDecimalAndSpaceToASCII
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn _PyUnicode_JoinArray(
        &self,
        separator: *mut PyObject,
        items: *const *mut PyObject,
        seqlen: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_JoinArray
            .as_ref()
            .expect("Expected function, got error."))(separator, items, seqlen)
    }
    pub unsafe fn _PyUnicode_EqualToASCIIId(
        &self,
        left: *mut PyObject,
        right: *mut _Py_Identifier,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_EqualToASCIIId
            .as_ref()
            .expect("Expected function, got error."))(left, right)
    }
    pub unsafe fn _PyUnicode_EqualToASCIIString(
        &self,
        left: *mut PyObject,
        right: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_EqualToASCIIString
            .as_ref()
            .expect("Expected function, got error."))(left, right)
    }
    pub unsafe fn _PyUnicode_XStrip(
        &self,
        self_: *mut PyObject,
        striptype: ::std::os::raw::c_int,
        sepobj: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_XStrip
            .as_ref()
            .expect("Expected function, got error."))(self_, striptype, sepobj)
    }
    pub unsafe fn _PyUnicode_InsertThousandsGrouping(
        &self,
        writer: *mut _PyUnicodeWriter,
        n_buffer: Py_ssize_t,
        digits: *mut PyObject,
        d_pos: Py_ssize_t,
        n_digits: Py_ssize_t,
        min_width: Py_ssize_t,
        grouping: *const ::std::os::raw::c_char,
        thousands_sep: *mut PyObject,
        maxchar: *mut Py_UCS4,
    ) -> Py_ssize_t {
        (self
            ._PyUnicode_InsertThousandsGrouping
            .as_ref()
            .expect("Expected function, got error."))(
            writer,
            n_buffer,
            digits,
            d_pos,
            n_digits,
            min_width,
            grouping,
            thousands_sep,
            maxchar,
        )
    }
    pub unsafe fn _PyUnicode_IsLowercase(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsLowercase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsUppercase(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsUppercase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsTitlecase(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsTitlecase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsXidStart(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsXidStart
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsXidContinue(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsXidContinue
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsWhitespace(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsWhitespace
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsLinebreak(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsLinebreak
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToLowercase(&self, ch: Py_UCS4) -> Py_UCS4 {
        (self
            ._PyUnicode_ToLowercase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToUppercase(&self, ch: Py_UCS4) -> Py_UCS4 {
        (self
            ._PyUnicode_ToUppercase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToTitlecase(&self, ch: Py_UCS4) -> Py_UCS4 {
        (self
            ._PyUnicode_ToTitlecase
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToLowerFull(
        &self,
        ch: Py_UCS4,
        res: *mut Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToLowerFull
            .as_ref()
            .expect("Expected function, got error."))(ch, res)
    }
    pub unsafe fn _PyUnicode_ToTitleFull(
        &self,
        ch: Py_UCS4,
        res: *mut Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToTitleFull
            .as_ref()
            .expect("Expected function, got error."))(ch, res)
    }
    pub unsafe fn _PyUnicode_ToUpperFull(
        &self,
        ch: Py_UCS4,
        res: *mut Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToUpperFull
            .as_ref()
            .expect("Expected function, got error."))(ch, res)
    }
    pub unsafe fn _PyUnicode_ToFoldedFull(
        &self,
        ch: Py_UCS4,
        res: *mut Py_UCS4,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToFoldedFull
            .as_ref()
            .expect("Expected function, got error."))(ch, res)
    }
    pub unsafe fn _PyUnicode_IsCaseIgnorable(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsCaseIgnorable
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsCased(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsCased
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToDecimalDigit(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToDecimalDigit
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToDigit(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_ToDigit
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_ToNumeric(&self, ch: Py_UCS4) -> f64 {
        (self
            ._PyUnicode_ToNumeric
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsDecimalDigit(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsDecimalDigit
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsDigit(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsDigit
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsNumeric(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsNumeric
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsPrintable(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsPrintable
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn _PyUnicode_IsAlpha(&self, ch: Py_UCS4) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_IsAlpha
            .as_ref()
            .expect("Expected function, got error."))(ch)
    }
    pub unsafe fn Py_UNICODE_strlen(&self, u: *const Py_UNICODE) -> size_t {
        (self
            .Py_UNICODE_strlen
            .as_ref()
            .expect("Expected function, got error."))(u)
    }
    pub unsafe fn Py_UNICODE_strcpy(
        &self,
        s1: *mut Py_UNICODE,
        s2: *const Py_UNICODE,
    ) -> *mut Py_UNICODE {
        (self
            .Py_UNICODE_strcpy
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn Py_UNICODE_strcat(
        &self,
        s1: *mut Py_UNICODE,
        s2: *const Py_UNICODE,
    ) -> *mut Py_UNICODE {
        (self
            .Py_UNICODE_strcat
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn Py_UNICODE_strncpy(
        &self,
        s1: *mut Py_UNICODE,
        s2: *const Py_UNICODE,
        n: size_t,
    ) -> *mut Py_UNICODE {
        (self
            .Py_UNICODE_strncpy
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn Py_UNICODE_strcmp(
        &self,
        s1: *const Py_UNICODE,
        s2: *const Py_UNICODE,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_UNICODE_strcmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn Py_UNICODE_strncmp(
        &self,
        s1: *const Py_UNICODE,
        s2: *const Py_UNICODE,
        n: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_UNICODE_strncmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn Py_UNICODE_strchr(&self, s: *const Py_UNICODE, c: Py_UNICODE) -> *mut Py_UNICODE {
        (self
            .Py_UNICODE_strchr
            .as_ref()
            .expect("Expected function, got error."))(s, c)
    }
    pub unsafe fn Py_UNICODE_strrchr(
        &self,
        s: *const Py_UNICODE,
        c: Py_UNICODE,
    ) -> *mut Py_UNICODE {
        (self
            .Py_UNICODE_strrchr
            .as_ref()
            .expect("Expected function, got error."))(s, c)
    }
    pub unsafe fn _PyUnicode_FormatLong(
        &self,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyUnicode_FormatLong
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyUnicode_AsUnicodeCopy(&self, unicode: *mut PyObject) -> *mut Py_UNICODE {
        (self
            .PyUnicode_AsUnicodeCopy
            .as_ref()
            .expect("Expected function, got error."))(unicode)
    }
    pub unsafe fn _PyUnicode_FromId(&self, arg1: *mut _Py_Identifier) -> *mut PyObject {
        (self
            ._PyUnicode_FromId
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyUnicode_EQ(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyUnicode_EQ
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyUnicode_ScanIdentifier(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            ._PyUnicode_ScanIdentifier
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromLong(&self, arg1: ::std::os::raw::c_long) -> *mut PyObject {
        (self
            .PyLong_FromLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromUnsignedLong(&self, arg1: ::std::os::raw::c_ulong) -> *mut PyObject {
        (self
            .PyLong_FromUnsignedLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromSize_t(&self, arg1: size_t) -> *mut PyObject {
        (self
            .PyLong_FromSize_t
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromSsize_t(&self, arg1: Py_ssize_t) -> *mut PyObject {
        (self
            .PyLong_FromSsize_t
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromDouble(&self, arg1: f64) -> *mut PyObject {
        (self
            .PyLong_FromDouble
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsLong(&self, arg1: *mut PyObject) -> ::std::os::raw::c_long {
        (self
            .PyLong_AsLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsLongAndOverflow(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .PyLong_AsLongAndOverflow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyLong_AsSsize_t(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            .PyLong_AsSsize_t
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsSize_t(&self, arg1: *mut PyObject) -> size_t {
        (self
            .PyLong_AsSize_t
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsUnsignedLong(&self, arg1: *mut PyObject) -> ::std::os::raw::c_ulong {
        (self
            .PyLong_AsUnsignedLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsUnsignedLongMask(&self, arg1: *mut PyObject) -> ::std::os::raw::c_ulong {
        (self
            .PyLong_AsUnsignedLongMask
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyLong_AsInt(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyLong_AsInt
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_GetInfo(&self) -> *mut PyObject {
        (self
            .PyLong_GetInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyLong_UnsignedShort_Converter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_UnsignedShort_Converter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_UnsignedInt_Converter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_UnsignedInt_Converter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_UnsignedLong_Converter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_UnsignedLong_Converter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_UnsignedLongLong_Converter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_UnsignedLongLong_Converter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_Size_t_Converter(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_Size_t_Converter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_Frexp(&self, a: *mut PyLongObject, e: *mut Py_ssize_t) -> f64 {
        (self
            ._PyLong_Frexp
            .as_ref()
            .expect("Expected function, got error."))(a, e)
    }
    pub unsafe fn PyLong_AsDouble(&self, arg1: *mut PyObject) -> f64 {
        (self
            .PyLong_AsDouble
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromVoidPtr(&self, arg1: *mut ::std::os::raw::c_void) -> *mut PyObject {
        (self
            .PyLong_FromVoidPtr
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsVoidPtr(&self, arg1: *mut PyObject) -> *mut ::std::os::raw::c_void {
        (self
            .PyLong_AsVoidPtr
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromLongLong(&self, arg1: ::std::os::raw::c_longlong) -> *mut PyObject {
        (self
            .PyLong_FromLongLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_FromUnsignedLongLong(
        &self,
        arg1: ::std::os::raw::c_ulonglong,
    ) -> *mut PyObject {
        (self
            .PyLong_FromUnsignedLongLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsLongLong(&self, arg1: *mut PyObject) -> ::std::os::raw::c_longlong {
        (self
            .PyLong_AsLongLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsUnsignedLongLong(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .PyLong_AsUnsignedLongLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsUnsignedLongLongMask(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .PyLong_AsUnsignedLongLongMask
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyLong_AsLongLongAndOverflow(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .PyLong_AsLongLongAndOverflow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyLong_FromString(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyLong_FromString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyLong_FromUnicode(
        &self,
        arg1: *mut Py_UNICODE,
        arg2: Py_ssize_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyLong_FromUnicode
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyLong_FromUnicodeObject(
        &self,
        u: *mut PyObject,
        base: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyLong_FromUnicodeObject
            .as_ref()
            .expect("Expected function, got error."))(u, base)
    }
    pub unsafe fn _PyLong_FromBytes(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyLong_FromBytes
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyLong_Sign(&self, v: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyLong_Sign
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn _PyLong_NumBits(&self, v: *mut PyObject) -> size_t {
        (self
            ._PyLong_NumBits
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn _PyLong_DivmodNear(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyLong_DivmodNear
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_FromByteArray(
        &self,
        bytes: *const ::std::os::raw::c_uchar,
        n: size_t,
        little_endian: ::std::os::raw::c_int,
        is_signed: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyLong_FromByteArray
            .as_ref()
            .expect("Expected function, got error."))(bytes, n, little_endian, is_signed)
    }
    pub unsafe fn _PyLong_AsByteArray(
        &self,
        v: *mut PyLongObject,
        bytes: *mut ::std::os::raw::c_uchar,
        n: size_t,
        little_endian: ::std::os::raw::c_int,
        is_signed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_AsByteArray
            .as_ref()
            .expect("Expected function, got error."))(v, bytes, n, little_endian, is_signed)
    }
    pub unsafe fn _PyLong_FromNbInt(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            ._PyLong_FromNbInt
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyLong_FromNbIndexOrNbInt(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            ._PyLong_FromNbIndexOrNbInt
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyLong_Format(
        &self,
        obj: *mut PyObject,
        base: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyLong_Format
            .as_ref()
            .expect("Expected function, got error."))(obj, base)
    }
    pub unsafe fn _PyLong_FormatWriter(
        &self,
        writer: *mut _PyUnicodeWriter,
        obj: *mut PyObject,
        base: ::std::os::raw::c_int,
        alternate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_FormatWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, obj, base, alternate)
    }
    pub unsafe fn _PyLong_FormatBytesWriter(
        &self,
        writer: *mut _PyBytesWriter,
        str_: *mut ::std::os::raw::c_char,
        obj: *mut PyObject,
        base: ::std::os::raw::c_int,
        alternate: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._PyLong_FormatBytesWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, str_, obj, base, alternate)
    }
    pub unsafe fn _PyLong_FormatAdvancedWriter(
        &self,
        writer: *mut _PyUnicodeWriter,
        obj: *mut PyObject,
        format_spec: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyLong_FormatAdvancedWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, obj, format_spec, start, end)
    }
    pub unsafe fn PyOS_strtoul(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .PyOS_strtoul
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyOS_strtol(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .PyOS_strtol
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyLong_GCD(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            ._PyLong_GCD
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_Rshift(&self, arg1: *mut PyObject, arg2: size_t) -> *mut PyObject {
        (self
            ._PyLong_Rshift
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_Lshift(&self, arg1: *mut PyObject, arg2: size_t) -> *mut PyObject {
        (self
            ._PyLong_Lshift
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyLong_New(&self, arg1: Py_ssize_t) -> *mut PyLongObject {
        (self
            ._PyLong_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyLong_Copy(&self, src: *mut PyLongObject) -> *mut PyObject {
        (self
            ._PyLong_Copy
            .as_ref()
            .expect("Expected function, got error."))(src)
    }
    pub unsafe fn PyBool_FromLong(&self, arg1: ::std::os::raw::c_long) -> *mut PyObject {
        (self
            .PyBool_FromLong
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFloat_GetMax(&self) -> f64 {
        (self
            .PyFloat_GetMax
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyFloat_GetMin(&self) -> f64 {
        (self
            .PyFloat_GetMin
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyFloat_GetInfo(&self) -> *mut PyObject {
        (self
            .PyFloat_GetInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyFloat_FromString(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFloat_FromString
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFloat_FromDouble(&self, arg1: f64) -> *mut PyObject {
        (self
            .PyFloat_FromDouble
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFloat_AsDouble(&self, arg1: *mut PyObject) -> f64 {
        (self
            .PyFloat_AsDouble
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyFloat_Pack2(
        &self,
        x: f64,
        p: *mut ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyFloat_Pack2
            .as_ref()
            .expect("Expected function, got error."))(x, p, le)
    }
    pub unsafe fn _PyFloat_Pack4(
        &self,
        x: f64,
        p: *mut ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyFloat_Pack4
            .as_ref()
            .expect("Expected function, got error."))(x, p, le)
    }
    pub unsafe fn _PyFloat_Pack8(
        &self,
        x: f64,
        p: *mut ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyFloat_Pack8
            .as_ref()
            .expect("Expected function, got error."))(x, p, le)
    }
    pub unsafe fn _PyFloat_Unpack2(
        &self,
        p: *const ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> f64 {
        (self
            ._PyFloat_Unpack2
            .as_ref()
            .expect("Expected function, got error."))(p, le)
    }
    pub unsafe fn _PyFloat_Unpack4(
        &self,
        p: *const ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> f64 {
        (self
            ._PyFloat_Unpack4
            .as_ref()
            .expect("Expected function, got error."))(p, le)
    }
    pub unsafe fn _PyFloat_Unpack8(
        &self,
        p: *const ::std::os::raw::c_uchar,
        le: ::std::os::raw::c_int,
    ) -> f64 {
        (self
            ._PyFloat_Unpack8
            .as_ref()
            .expect("Expected function, got error."))(p, le)
    }
    pub unsafe fn _PyFloat_DebugMallocStats(&self, out: *mut FILE) -> () {
        (self
            ._PyFloat_DebugMallocStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn _PyFloat_FormatAdvancedWriter(
        &self,
        writer: *mut _PyUnicodeWriter,
        obj: *mut PyObject,
        format_spec: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyFloat_FormatAdvancedWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, obj, format_spec, start, end)
    }
    pub unsafe fn _Py_c_sum(&self, arg1: Py_complex, arg2: Py_complex) -> Py_complex {
        (self
            ._Py_c_sum
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_c_diff(&self, arg1: Py_complex, arg2: Py_complex) -> Py_complex {
        (self
            ._Py_c_diff
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_c_neg(&self, arg1: Py_complex) -> Py_complex {
        (self
            ._Py_c_neg
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_c_prod(&self, arg1: Py_complex, arg2: Py_complex) -> Py_complex {
        (self
            ._Py_c_prod
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_c_quot(&self, arg1: Py_complex, arg2: Py_complex) -> Py_complex {
        (self
            ._Py_c_quot
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_c_pow(&self, arg1: Py_complex, arg2: Py_complex) -> Py_complex {
        (self
            ._Py_c_pow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_c_abs(&self, arg1: Py_complex) -> f64 {
        (self
            ._Py_c_abs
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyComplex_FromCComplex(&self, arg1: Py_complex) -> *mut PyObject {
        (self
            .PyComplex_FromCComplex
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyComplex_FromDoubles(&self, real: f64, imag: f64) -> *mut PyObject {
        (self
            .PyComplex_FromDoubles
            .as_ref()
            .expect("Expected function, got error."))(real, imag)
    }
    pub unsafe fn PyComplex_RealAsDouble(&self, op: *mut PyObject) -> f64 {
        (self
            .PyComplex_RealAsDouble
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn PyComplex_ImagAsDouble(&self, op: *mut PyObject) -> f64 {
        (self
            .PyComplex_ImagAsDouble
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn PyComplex_AsCComplex(&self, op: *mut PyObject) -> Py_complex {
        (self
            .PyComplex_AsCComplex
            .as_ref()
            .expect("Expected function, got error."))(op)
    }
    pub unsafe fn _PyComplex_FormatAdvancedWriter(
        &self,
        writer: *mut _PyUnicodeWriter,
        obj: *mut PyObject,
        format_spec: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyComplex_FormatAdvancedWriter
            .as_ref()
            .expect("Expected function, got error."))(writer, obj, format_spec, start, end)
    }
    pub unsafe fn PyMemoryView_FromObject(&self, base: *mut PyObject) -> *mut PyObject {
        (self
            .PyMemoryView_FromObject
            .as_ref()
            .expect("Expected function, got error."))(base)
    }
    pub unsafe fn PyMemoryView_FromMemory(
        &self,
        mem: *mut ::std::os::raw::c_char,
        size: Py_ssize_t,
        flags: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyMemoryView_FromMemory
            .as_ref()
            .expect("Expected function, got error."))(mem, size, flags)
    }
    pub unsafe fn PyMemoryView_FromBuffer(&self, info: *mut Py_buffer) -> *mut PyObject {
        (self
            .PyMemoryView_FromBuffer
            .as_ref()
            .expect("Expected function, got error."))(info)
    }
    pub unsafe fn PyMemoryView_GetContiguous(
        &self,
        base: *mut PyObject,
        buffertype: ::std::os::raw::c_int,
        order: ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyMemoryView_GetContiguous
            .as_ref()
            .expect("Expected function, got error."))(base, buffertype, order)
    }
    pub unsafe fn PyTuple_New(&self, size: Py_ssize_t) -> *mut PyObject {
        (self
            .PyTuple_New
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyTuple_Size(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            .PyTuple_Size
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyTuple_GetItem(&self, arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject {
        (self
            .PyTuple_GetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyTuple_SetItem(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyTuple_SetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyTuple_GetSlice(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyTuple_GetSlice
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyTuple_Resize(
        &self,
        arg1: *mut *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyTuple_Resize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyTuple_MaybeUntrack(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyTuple_MaybeUntrack
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyTuple_DebugMallocStats(&self, out: *mut FILE) -> () {
        (self
            ._PyTuple_DebugMallocStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn PyList_New(&self, size: Py_ssize_t) -> *mut PyObject {
        (self
            .PyList_New
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn PyList_Size(&self, arg1: *mut PyObject) -> Py_ssize_t {
        (self
            .PyList_Size
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyList_GetItem(&self, arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject {
        (self
            .PyList_GetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyList_SetItem(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyList_SetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyList_Insert(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyList_Insert
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyList_Append(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyList_Append
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyList_GetSlice(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyList_GetSlice
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyList_SetSlice(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
        arg4: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyList_SetSlice
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyList_Sort(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyList_Sort
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyList_Reverse(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyList_Reverse
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyList_AsTuple(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyList_AsTuple
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyList_Extend(
        &self,
        arg1: *mut PyListObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyList_Extend
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyList_DebugMallocStats(&self, out: *mut FILE) -> () {
        (self
            ._PyList_DebugMallocStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn PyDict_New(&self) -> *mut PyObject {
        (self
            .PyDict_New
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyDict_GetItem(&self, mp: *mut PyObject, key: *mut PyObject) -> *mut PyObject {
        (self
            .PyDict_GetItem
            .as_ref()
            .expect("Expected function, got error."))(mp, key)
    }
    pub unsafe fn PyDict_GetItemWithError(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyDict_GetItemWithError
            .as_ref()
            .expect("Expected function, got error."))(mp, key)
    }
    pub unsafe fn PyDict_SetItem(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        item: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_SetItem
            .as_ref()
            .expect("Expected function, got error."))(mp, key, item)
    }
    pub unsafe fn PyDict_DelItem(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_DelItem
            .as_ref()
            .expect("Expected function, got error."))(mp, key)
    }
    pub unsafe fn PyDict_Clear(&self, mp: *mut PyObject) -> () {
        (self
            .PyDict_Clear
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Next(
        &self,
        mp: *mut PyObject,
        pos: *mut Py_ssize_t,
        key: *mut *mut PyObject,
        value: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_Next
            .as_ref()
            .expect("Expected function, got error."))(mp, pos, key, value)
    }
    pub unsafe fn PyDict_Keys(&self, mp: *mut PyObject) -> *mut PyObject {
        (self
            .PyDict_Keys
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Values(&self, mp: *mut PyObject) -> *mut PyObject {
        (self
            .PyDict_Values
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Items(&self, mp: *mut PyObject) -> *mut PyObject {
        (self
            .PyDict_Items
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Size(&self, mp: *mut PyObject) -> Py_ssize_t {
        (self
            .PyDict_Size
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Copy(&self, mp: *mut PyObject) -> *mut PyObject {
        (self
            .PyDict_Copy
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn PyDict_Contains(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_Contains
            .as_ref()
            .expect("Expected function, got error."))(mp, key)
    }
    pub unsafe fn PyDict_Update(
        &self,
        mp: *mut PyObject,
        other: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_Update
            .as_ref()
            .expect("Expected function, got error."))(mp, other)
    }
    pub unsafe fn PyDict_Merge(
        &self,
        mp: *mut PyObject,
        other: *mut PyObject,
        override_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_Merge
            .as_ref()
            .expect("Expected function, got error."))(mp, other, override_)
    }
    pub unsafe fn PyDict_MergeFromSeq2(
        &self,
        d: *mut PyObject,
        seq2: *mut PyObject,
        override_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_MergeFromSeq2
            .as_ref()
            .expect("Expected function, got error."))(d, seq2, override_)
    }
    pub unsafe fn PyDict_GetItemString(
        &self,
        dp: *mut PyObject,
        key: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyDict_GetItemString
            .as_ref()
            .expect("Expected function, got error."))(dp, key)
    }
    pub unsafe fn PyDict_SetItemString(
        &self,
        dp: *mut PyObject,
        key: *const ::std::os::raw::c_char,
        item: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_SetItemString
            .as_ref()
            .expect("Expected function, got error."))(dp, key, item)
    }
    pub unsafe fn PyDict_DelItemString(
        &self,
        dp: *mut PyObject,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyDict_DelItemString
            .as_ref()
            .expect("Expected function, got error."))(dp, key)
    }
    pub unsafe fn _PyDict_GetItem_KnownHash(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        hash: Py_hash_t,
    ) -> *mut PyObject {
        (self
            ._PyDict_GetItem_KnownHash
            .as_ref()
            .expect("Expected function, got error."))(mp, key, hash)
    }
    pub unsafe fn _PyDict_GetItemIdWithError(
        &self,
        dp: *mut PyObject,
        key: *mut _Py_Identifier,
    ) -> *mut PyObject {
        (self
            ._PyDict_GetItemIdWithError
            .as_ref()
            .expect("Expected function, got error."))(dp, key)
    }
    pub unsafe fn _PyDict_GetItemStringWithError(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyDict_GetItemStringWithError
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyDict_SetDefault(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        defaultobj: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyDict_SetDefault
            .as_ref()
            .expect("Expected function, got error."))(mp, key, defaultobj)
    }
    pub unsafe fn _PyDict_SetItem_KnownHash(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        item: *mut PyObject,
        hash: Py_hash_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_SetItem_KnownHash
            .as_ref()
            .expect("Expected function, got error."))(mp, key, item, hash)
    }
    pub unsafe fn _PyDict_DelItem_KnownHash(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        hash: Py_hash_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_DelItem_KnownHash
            .as_ref()
            .expect("Expected function, got error."))(mp, key, hash)
    }
    pub unsafe fn _PyDict_DelItemIf(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        predicate: ::std::option::Option<
            unsafe extern "C" fn(value: *mut PyObject) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_DelItemIf
            .as_ref()
            .expect("Expected function, got error."))(mp, key, predicate)
    }
    pub unsafe fn _PyDict_NewKeysForClass(&self) -> *mut PyDictKeysObject {
        (self
            ._PyDict_NewKeysForClass
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyObject_GenericGetDict(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut PyObject {
        (self
            .PyObject_GenericGetDict
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyDict_Next(
        &self,
        mp: *mut PyObject,
        pos: *mut Py_ssize_t,
        key: *mut *mut PyObject,
        value: *mut *mut PyObject,
        hash: *mut Py_hash_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_Next
            .as_ref()
            .expect("Expected function, got error."))(mp, pos, key, value, hash)
    }
    pub unsafe fn _PyDict_Contains(
        &self,
        mp: *mut PyObject,
        key: *mut PyObject,
        hash: Py_hash_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_Contains
            .as_ref()
            .expect("Expected function, got error."))(mp, key, hash)
    }
    pub unsafe fn _PyDict_NewPresized(&self, minused: Py_ssize_t) -> *mut PyObject {
        (self
            ._PyDict_NewPresized
            .as_ref()
            .expect("Expected function, got error."))(minused)
    }
    pub unsafe fn _PyDict_MaybeUntrack(&self, mp: *mut PyObject) -> () {
        (self
            ._PyDict_MaybeUntrack
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn _PyDict_HasOnlyStringKeys(&self, mp: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyDict_HasOnlyStringKeys
            .as_ref()
            .expect("Expected function, got error."))(mp)
    }
    pub unsafe fn _PyDict_KeysSize(&self, keys: *mut PyDictKeysObject) -> Py_ssize_t {
        (self
            ._PyDict_KeysSize
            .as_ref()
            .expect("Expected function, got error."))(keys)
    }
    pub unsafe fn _PyDict_SizeOf(&self, arg1: *mut PyDictObject) -> Py_ssize_t {
        (self
            ._PyDict_SizeOf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyDict_Pop(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyDict_Pop
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyDict_Pop_KnownHash(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: Py_hash_t,
        arg4: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyDict_Pop_KnownHash
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyDict_FromKeys(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyDict_FromKeys
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyDict_MergeEx(
        &self,
        mp: *mut PyObject,
        other: *mut PyObject,
        override_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_MergeEx
            .as_ref()
            .expect("Expected function, got error."))(mp, other, override_)
    }
    pub unsafe fn _PyDict_GetItemId(
        &self,
        dp: *mut PyObject,
        key: *mut _Py_Identifier,
    ) -> *mut PyObject {
        (self
            ._PyDict_GetItemId
            .as_ref()
            .expect("Expected function, got error."))(dp, key)
    }
    pub unsafe fn _PyDict_SetItemId(
        &self,
        dp: *mut PyObject,
        key: *mut _Py_Identifier,
        item: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_SetItemId
            .as_ref()
            .expect("Expected function, got error."))(dp, key, item)
    }
    pub unsafe fn _PyDict_DelItemId(
        &self,
        mp: *mut PyObject,
        key: *mut _Py_Identifier,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyDict_DelItemId
            .as_ref()
            .expect("Expected function, got error."))(mp, key)
    }
    pub unsafe fn _PyDict_DebugMallocStats(&self, out: *mut FILE) -> () {
        (self
            ._PyDict_DebugMallocStats
            .as_ref()
            .expect("Expected function, got error."))(out)
    }
    pub unsafe fn _PyObjectDict_SetItem(
        &self,
        tp: *mut PyTypeObject,
        dictptr: *mut *mut PyObject,
        name: *mut PyObject,
        value: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObjectDict_SetItem
            .as_ref()
            .expect("Expected function, got error."))(tp, dictptr, name, value)
    }
    pub unsafe fn _PyDict_LoadGlobal(
        &self,
        arg1: *mut PyDictObject,
        arg2: *mut PyDictObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyDict_LoadGlobal
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _PyDictView_New(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyTypeObject,
    ) -> *mut PyObject {
        (self
            ._PyDictView_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyDictView_Intersect(
        &self,
        self_: *mut PyObject,
        other: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyDictView_Intersect
            .as_ref()
            .expect("Expected function, got error."))(self_, other)
    }
    pub unsafe fn PyODict_New(&self) -> *mut PyObject {
        (self
            .PyODict_New
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyODict_SetItem(
        &self,
        od: *mut PyObject,
        key: *mut PyObject,
        item: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyODict_SetItem
            .as_ref()
            .expect("Expected function, got error."))(od, key, item)
    }
    pub unsafe fn PyODict_DelItem(
        &self,
        od: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyODict_DelItem
            .as_ref()
            .expect("Expected function, got error."))(od, key)
    }
    pub unsafe fn _PySet_NextEntry(
        &self,
        set: *mut PyObject,
        pos: *mut Py_ssize_t,
        key: *mut *mut PyObject,
        hash: *mut Py_hash_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PySet_NextEntry
            .as_ref()
            .expect("Expected function, got error."))(set, pos, key, hash)
    }
    pub unsafe fn _PySet_Update(
        &self,
        set: *mut PyObject,
        iterable: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PySet_Update
            .as_ref()
            .expect("Expected function, got error."))(set, iterable)
    }
    pub unsafe fn PySet_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PySet_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFrozenSet_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFrozenSet_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySet_Add(
        &self,
        set: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySet_Add
            .as_ref()
            .expect("Expected function, got error."))(set, key)
    }
    pub unsafe fn PySet_Clear(&self, set: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PySet_Clear
            .as_ref()
            .expect("Expected function, got error."))(set)
    }
    pub unsafe fn PySet_Contains(
        &self,
        anyset: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySet_Contains
            .as_ref()
            .expect("Expected function, got error."))(anyset, key)
    }
    pub unsafe fn PySet_Discard(
        &self,
        set: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySet_Discard
            .as_ref()
            .expect("Expected function, got error."))(set, key)
    }
    pub unsafe fn PySet_Pop(&self, set: *mut PyObject) -> *mut PyObject {
        (self
            .PySet_Pop
            .as_ref()
            .expect("Expected function, got error."))(set)
    }
    pub unsafe fn PySet_Size(&self, anyset: *mut PyObject) -> Py_ssize_t {
        (self
            .PySet_Size
            .as_ref()
            .expect("Expected function, got error."))(anyset)
    }
    pub unsafe fn PyCFunction_GetFunction(&self, arg1: *mut PyObject) -> PyCFunction {
        (self
            .PyCFunction_GetFunction
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCFunction_GetSelf(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyCFunction_GetSelf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCFunction_GetFlags(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyCFunction_GetFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCFunction_Call(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyCFunction_Call
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyCFunction_NewEx(
        &self,
        arg1: *mut PyMethodDef,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyCFunction_NewEx
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyCMethod_New(
        &self,
        arg1: *mut PyMethodDef,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: *mut PyTypeObject,
    ) -> *mut PyObject {
        (self
            .PyCMethod_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyModule_NewObject(&self, name: *mut PyObject) -> *mut PyObject {
        (self
            .PyModule_NewObject
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyModule_New(&self, name: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyModule_New
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyModule_GetDict(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyModule_GetDict
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetNameObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyModule_GetNameObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetName(&self, arg1: *mut PyObject) -> *const ::std::os::raw::c_char {
        (self
            .PyModule_GetName
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetFilename(
        &self,
        arg1: *mut PyObject,
    ) -> *const ::std::os::raw::c_char {
        (self
            .PyModule_GetFilename
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetFilenameObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyModule_GetFilenameObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyModule_Clear(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyModule_Clear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyModule_ClearDict(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyModule_ClearDict
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyModuleSpec_IsInitializing(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyModuleSpec_IsInitializing
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetDef(&self, arg1: *mut PyObject) -> *mut PyModuleDef {
        (self
            .PyModule_GetDef
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModule_GetState(&self, arg1: *mut PyObject) -> *mut ::std::os::raw::c_void {
        (self
            .PyModule_GetState
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyModuleDef_Init(&self, arg1: *mut PyModuleDef) -> *mut PyObject {
        (self
            .PyModuleDef_Init
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_New(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyFunction_NewWithQualName(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyFunction_NewWithQualName
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyFunction_GetCode(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetCode
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_GetGlobals(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetGlobals
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_GetModule(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetModule
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_GetDefaults(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetDefaults
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_SetDefaults(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFunction_SetDefaults
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyFunction_GetKwDefaults(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetKwDefaults
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_SetKwDefaults(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFunction_SetKwDefaults
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyFunction_GetClosure(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetClosure
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_SetClosure(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFunction_SetClosure
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyFunction_GetAnnotations(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyFunction_GetAnnotations
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFunction_SetAnnotations(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFunction_SetAnnotations
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyFunction_Vectorcall(
        &self,
        func: *mut PyObject,
        stack: *const *mut PyObject,
        nargsf: size_t,
        kwnames: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyFunction_Vectorcall
            .as_ref()
            .expect("Expected function, got error."))(func, stack, nargsf, kwnames)
    }
    pub unsafe fn PyClassMethod_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyClassMethod_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyStaticMethod_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyStaticMethod_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyMethod_New(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            .PyMethod_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyMethod_Function(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyMethod_Function
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyMethod_Self(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyMethod_Self
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInstanceMethod_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyInstanceMethod_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInstanceMethod_Function(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyInstanceMethod_Function
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFile_FromFd(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyFile_FromFd
            .as_ref()
            .expect("Expected function, got error."))(
            arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8,
        )
    }
    pub unsafe fn PyFile_GetLine(
        &self,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyFile_GetLine
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyFile_WriteObject(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFile_WriteObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyFile_WriteString(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFile_WriteString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyObject_AsFileDescriptor(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_AsFileDescriptor
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_UniversalNewlineFgets(
        &self,
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: *mut PyObject,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .Py_UniversalNewlineFgets
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyFile_NewStdPrinter(&self, arg1: ::std::os::raw::c_int) -> *mut PyObject {
        (self
            .PyFile_NewStdPrinter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFile_OpenCode(&self, utf8path: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyFile_OpenCode
            .as_ref()
            .expect("Expected function, got error."))(utf8path)
    }
    pub unsafe fn PyFile_OpenCodeObject(&self, path: *mut PyObject) -> *mut PyObject {
        (self
            .PyFile_OpenCodeObject
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn PyFile_SetOpenCodeHook(
        &self,
        hook: Py_OpenCodeHookFunction,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyFile_SetOpenCodeHook
            .as_ref()
            .expect("Expected function, got error."))(hook, userData)
    }
    pub unsafe fn PyCapsule_New(
        &self,
        pointer: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        destructor: PyCapsule_Destructor,
    ) -> *mut PyObject {
        (self
            .PyCapsule_New
            .as_ref()
            .expect("Expected function, got error."))(pointer, name, destructor)
    }
    pub unsafe fn PyCapsule_GetPointer(
        &self,
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyCapsule_GetPointer
            .as_ref()
            .expect("Expected function, got error."))(capsule, name)
    }
    pub unsafe fn PyCapsule_GetDestructor(&self, capsule: *mut PyObject) -> PyCapsule_Destructor {
        (self
            .PyCapsule_GetDestructor
            .as_ref()
            .expect("Expected function, got error."))(capsule)
    }
    pub unsafe fn PyCapsule_GetName(
        &self,
        capsule: *mut PyObject,
    ) -> *const ::std::os::raw::c_char {
        (self
            .PyCapsule_GetName
            .as_ref()
            .expect("Expected function, got error."))(capsule)
    }
    pub unsafe fn PyCapsule_GetContext(
        &self,
        capsule: *mut PyObject,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyCapsule_GetContext
            .as_ref()
            .expect("Expected function, got error."))(capsule)
    }
    pub unsafe fn PyCapsule_IsValid(
        &self,
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCapsule_IsValid
            .as_ref()
            .expect("Expected function, got error."))(capsule, name)
    }
    pub unsafe fn PyCapsule_SetPointer(
        &self,
        capsule: *mut PyObject,
        pointer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCapsule_SetPointer
            .as_ref()
            .expect("Expected function, got error."))(capsule, pointer)
    }
    pub unsafe fn PyCapsule_SetDestructor(
        &self,
        capsule: *mut PyObject,
        destructor: PyCapsule_Destructor,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCapsule_SetDestructor
            .as_ref()
            .expect("Expected function, got error."))(capsule, destructor)
    }
    pub unsafe fn PyCapsule_SetName(
        &self,
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCapsule_SetName
            .as_ref()
            .expect("Expected function, got error."))(capsule, name)
    }
    pub unsafe fn PyCapsule_SetContext(
        &self,
        capsule: *mut PyObject,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCapsule_SetContext
            .as_ref()
            .expect("Expected function, got error."))(capsule, context)
    }
    pub unsafe fn PyCapsule_Import(
        &self,
        name: *const ::std::os::raw::c_char,
        no_block: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyCapsule_Import
            .as_ref()
            .expect("Expected function, got error."))(name, no_block)
    }
    pub unsafe fn PyCode_New(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut PyObject,
        arg7: *mut PyObject,
        arg8: *mut PyObject,
        arg9: *mut PyObject,
        arg10: *mut PyObject,
        arg11: *mut PyObject,
        arg12: *mut PyObject,
        arg13: *mut PyObject,
        arg14: ::std::os::raw::c_int,
        arg15: *mut PyObject,
    ) -> *mut PyCodeObject {
        (self
            .PyCode_New
            .as_ref()
            .expect("Expected function, got error."))(
            arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
            arg14, arg15,
        )
    }
    pub unsafe fn PyCode_NewWithPosOnlyArgs(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *mut PyObject,
        arg8: *mut PyObject,
        arg9: *mut PyObject,
        arg10: *mut PyObject,
        arg11: *mut PyObject,
        arg12: *mut PyObject,
        arg13: *mut PyObject,
        arg14: *mut PyObject,
        arg15: ::std::os::raw::c_int,
        arg16: *mut PyObject,
    ) -> *mut PyCodeObject {
        (self
            .PyCode_NewWithPosOnlyArgs
            .as_ref()
            .expect("Expected function, got error."))(
            arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
            arg14, arg15, arg16,
        )
    }
    pub unsafe fn PyCode_NewEmpty(
        &self,
        filename: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        firstlineno: ::std::os::raw::c_int,
    ) -> *mut PyCodeObject {
        (self
            .PyCode_NewEmpty
            .as_ref()
            .expect("Expected function, got error."))(filename, funcname, firstlineno)
    }
    pub unsafe fn PyCode_Addr2Line(
        &self,
        arg1: *mut PyCodeObject,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCode_Addr2Line
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyCode_CheckLineNumber(
        &self,
        co: *mut PyCodeObject,
        lasti: ::std::os::raw::c_int,
        bounds: *mut PyAddrPair,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyCode_CheckLineNumber
            .as_ref()
            .expect("Expected function, got error."))(co, lasti, bounds)
    }
    pub unsafe fn _PyCode_ConstantKey(&self, obj: *mut PyObject) -> *mut PyObject {
        (self
            ._PyCode_ConstantKey
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn PyCode_Optimize(
        &self,
        code: *mut PyObject,
        consts: *mut PyObject,
        names: *mut PyObject,
        lnotab: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyCode_Optimize
            .as_ref()
            .expect("Expected function, got error."))(code, consts, names, lnotab)
    }
    pub unsafe fn _PyCode_GetExtra(
        &self,
        code: *mut PyObject,
        index: Py_ssize_t,
        extra: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyCode_GetExtra
            .as_ref()
            .expect("Expected function, got error."))(code, index, extra)
    }
    pub unsafe fn _PyCode_SetExtra(
        &self,
        code: *mut PyObject,
        index: Py_ssize_t,
        extra: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyCode_SetExtra
            .as_ref()
            .expect("Expected function, got error."))(code, index, extra)
    }
    pub unsafe fn PyFrame_GetLineNumber(&self, arg1: *mut PyFrameObject) -> ::std::os::raw::c_int {
        (self
            .PyFrame_GetLineNumber
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyFrame_GetCode(&self, frame: *mut PyFrameObject) -> *mut PyCodeObject {
        (self
            .PyFrame_GetCode
            .as_ref()
            .expect("Expected function, got error."))(frame)
    }
    pub unsafe fn PyTraceBack_Here(&self, arg1: *mut PyFrameObject) -> ::std::os::raw::c_int {
        (self
            .PyTraceBack_Here
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyTraceBack_Print(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyTraceBack_Print
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_DisplaySourceLine(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_DisplaySourceLine
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyTraceback_Add(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> () {
        (self
            ._PyTraceback_Add
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PySlice_New(
        &self,
        start: *mut PyObject,
        stop: *mut PyObject,
        step: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PySlice_New
            .as_ref()
            .expect("Expected function, got error."))(start, stop, step)
    }
    pub unsafe fn _PySlice_FromIndices(
        &self,
        start: Py_ssize_t,
        stop: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            ._PySlice_FromIndices
            .as_ref()
            .expect("Expected function, got error."))(start, stop)
    }
    pub unsafe fn _PySlice_GetLongIndices(
        &self,
        self_: *mut PySliceObject,
        length: *mut PyObject,
        start_ptr: *mut *mut PyObject,
        stop_ptr: *mut *mut PyObject,
        step_ptr: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PySlice_GetLongIndices
            .as_ref()
            .expect("Expected function, got error."))(
            self_, length, start_ptr, stop_ptr, step_ptr
        )
    }
    pub unsafe fn PySlice_GetIndices(
        &self,
        r: *mut PyObject,
        length: Py_ssize_t,
        start: *mut Py_ssize_t,
        stop: *mut Py_ssize_t,
        step: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PySlice_GetIndices
            .as_ref()
            .expect("Expected function, got error."))(r, length, start, stop, step)
    }
    pub unsafe fn PySlice_GetIndicesEx(
        &self,
        r: *mut PyObject,
        length: Py_ssize_t,
        start: *mut Py_ssize_t,
        stop: *mut Py_ssize_t,
        step: *mut Py_ssize_t,
        slicelength: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PySlice_GetIndicesEx
            .as_ref()
            .expect("Expected function, got error."))(
            r, length, start, stop, step, slicelength
        )
    }
    pub unsafe fn PySlice_Unpack(
        &self,
        slice: *mut PyObject,
        start: *mut Py_ssize_t,
        stop: *mut Py_ssize_t,
        step: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PySlice_Unpack
            .as_ref()
            .expect("Expected function, got error."))(slice, start, stop, step)
    }
    pub unsafe fn PySlice_AdjustIndices(
        &self,
        length: Py_ssize_t,
        start: *mut Py_ssize_t,
        stop: *mut Py_ssize_t,
        step: Py_ssize_t,
    ) -> Py_ssize_t {
        (self
            .PySlice_AdjustIndices
            .as_ref()
            .expect("Expected function, got error."))(length, start, stop, step)
    }
    pub unsafe fn PyCell_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyCell_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCell_Get(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyCell_Get
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCell_Set(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCell_Set
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PySeqIter_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PySeqIter_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCallIter_New(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            .PyCallIter_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyInterpreterState_New(&self) -> *mut PyInterpreterState {
        (self
            .PyInterpreterState_New
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyInterpreterState_Clear(&self, arg1: *mut PyInterpreterState) -> () {
        (self
            .PyInterpreterState_Clear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInterpreterState_Delete(&self, arg1: *mut PyInterpreterState) -> () {
        (self
            .PyInterpreterState_Delete
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInterpreterState_Get(&self) -> *mut PyInterpreterState {
        (self
            .PyInterpreterState_Get
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyInterpreterState_GetDict(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> *mut PyObject {
        (self
            .PyInterpreterState_GetDict
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInterpreterState_GetID(&self, arg1: *mut PyInterpreterState) -> i64 {
        (self
            .PyInterpreterState_GetID
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyState_AddModule(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyModuleDef,
    ) -> ::std::os::raw::c_int {
        (self
            .PyState_AddModule
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyState_RemoveModule(&self, arg1: *mut PyModuleDef) -> ::std::os::raw::c_int {
        (self
            .PyState_RemoveModule
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyState_FindModule(&self, arg1: *mut PyModuleDef) -> *mut PyObject {
        (self
            .PyState_FindModule
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_New(&self, arg1: *mut PyInterpreterState) -> *mut PyThreadState {
        (self
            .PyThreadState_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_Clear(&self, arg1: *mut PyThreadState) -> () {
        (self
            .PyThreadState_Clear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_Delete(&self, arg1: *mut PyThreadState) -> () {
        (self
            .PyThreadState_Delete
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_Get(&self) -> *mut PyThreadState {
        (self
            .PyThreadState_Get
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThreadState_Swap(&self, arg1: *mut PyThreadState) -> *mut PyThreadState {
        (self
            .PyThreadState_Swap
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_GetDict(&self) -> *mut PyObject {
        (self
            .PyThreadState_GetDict
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThreadState_SetAsyncExc(
        &self,
        arg1: ::std::os::raw::c_ulong,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyThreadState_SetAsyncExc
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyThreadState_GetInterpreter(
        &self,
        tstate: *mut PyThreadState,
    ) -> *mut PyInterpreterState {
        (self
            .PyThreadState_GetInterpreter
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyThreadState_GetFrame(&self, tstate: *mut PyThreadState) -> *mut PyFrameObject {
        (self
            .PyThreadState_GetFrame
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyThreadState_GetID(&self, tstate: *mut PyThreadState) -> u64 {
        (self
            .PyThreadState_GetID
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyGILState_Ensure(&self) -> PyGILState_STATE {
        (self
            .PyGILState_Ensure
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyGILState_Release(&self, arg1: PyGILState_STATE) -> () {
        (self
            .PyGILState_Release
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyGILState_GetThisThreadState(&self) -> *mut PyThreadState {
        (self
            .PyGILState_GetThisThreadState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyStatus_Ok(&self) -> PyStatus {
        (self
            .PyStatus_Ok
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyStatus_Error(&self, err_msg: *const ::std::os::raw::c_char) -> PyStatus {
        (self
            .PyStatus_Error
            .as_ref()
            .expect("Expected function, got error."))(err_msg)
    }
    pub unsafe fn PyStatus_NoMemory(&self) -> PyStatus {
        (self
            .PyStatus_NoMemory
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyStatus_Exit(&self, exitcode: ::std::os::raw::c_int) -> PyStatus {
        (self
            .PyStatus_Exit
            .as_ref()
            .expect("Expected function, got error."))(exitcode)
    }
    pub unsafe fn PyStatus_IsError(&self, err: PyStatus) -> ::std::os::raw::c_int {
        (self
            .PyStatus_IsError
            .as_ref()
            .expect("Expected function, got error."))(err)
    }
    pub unsafe fn PyStatus_IsExit(&self, err: PyStatus) -> ::std::os::raw::c_int {
        (self
            .PyStatus_IsExit
            .as_ref()
            .expect("Expected function, got error."))(err)
    }
    pub unsafe fn PyStatus_Exception(&self, err: PyStatus) -> ::std::os::raw::c_int {
        (self
            .PyStatus_Exception
            .as_ref()
            .expect("Expected function, got error."))(err)
    }
    pub unsafe fn PyWideStringList_Append(
        &self,
        list: *mut PyWideStringList,
        item: *const wchar_t,
    ) -> PyStatus {
        (self
            .PyWideStringList_Append
            .as_ref()
            .expect("Expected function, got error."))(list, item)
    }
    pub unsafe fn PyWideStringList_Insert(
        &self,
        list: *mut PyWideStringList,
        index: Py_ssize_t,
        item: *const wchar_t,
    ) -> PyStatus {
        (self
            .PyWideStringList_Insert
            .as_ref()
            .expect("Expected function, got error."))(list, index, item)
    }
    pub unsafe fn PyPreConfig_InitPythonConfig(&self, config: *mut PyPreConfig) -> () {
        (self
            .PyPreConfig_InitPythonConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn PyPreConfig_InitIsolatedConfig(&self, config: *mut PyPreConfig) -> () {
        (self
            .PyPreConfig_InitIsolatedConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn PyConfig_InitPythonConfig(&self, config: *mut PyConfig) -> () {
        (self
            .PyConfig_InitPythonConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn PyConfig_InitIsolatedConfig(&self, config: *mut PyConfig) -> () {
        (self
            .PyConfig_InitIsolatedConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn PyConfig_Clear(&self, arg1: *mut PyConfig) -> () {
        (self
            .PyConfig_Clear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyConfig_SetString(
        &self,
        config: *mut PyConfig,
        config_str: *mut *mut wchar_t,
        str_: *const wchar_t,
    ) -> PyStatus {
        (self
            .PyConfig_SetString
            .as_ref()
            .expect("Expected function, got error."))(config, config_str, str_)
    }
    pub unsafe fn PyConfig_SetBytesString(
        &self,
        config: *mut PyConfig,
        config_str: *mut *mut wchar_t,
        str_: *const ::std::os::raw::c_char,
    ) -> PyStatus {
        (self
            .PyConfig_SetBytesString
            .as_ref()
            .expect("Expected function, got error."))(config, config_str, str_)
    }
    pub unsafe fn PyConfig_Read(&self, config: *mut PyConfig) -> PyStatus {
        (self
            .PyConfig_Read
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn PyConfig_SetBytesArgv(
        &self,
        config: *mut PyConfig,
        argc: Py_ssize_t,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> PyStatus {
        (self
            .PyConfig_SetBytesArgv
            .as_ref()
            .expect("Expected function, got error."))(config, argc, argv)
    }
    pub unsafe fn PyConfig_SetArgv(
        &self,
        config: *mut PyConfig,
        argc: Py_ssize_t,
        argv: *const *mut wchar_t,
    ) -> PyStatus {
        (self
            .PyConfig_SetArgv
            .as_ref()
            .expect("Expected function, got error."))(config, argc, argv)
    }
    pub unsafe fn PyConfig_SetWideStringList(
        &self,
        config: *mut PyConfig,
        list: *mut PyWideStringList,
        length: Py_ssize_t,
        items: *mut *mut wchar_t,
    ) -> PyStatus {
        (self
            .PyConfig_SetWideStringList
            .as_ref()
            .expect("Expected function, got error."))(config, list, length, items)
    }
    pub unsafe fn Py_GetArgcArgv(
        &self,
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut wchar_t,
    ) -> () {
        (self
            .Py_GetArgcArgv
            .as_ref()
            .expect("Expected function, got error."))(argc, argv)
    }
    pub unsafe fn _PyInterpreterState_RequiresIDRef(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyInterpreterState_RequiresIDRef
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyInterpreterState_RequireIDRef(
        &self,
        arg1: *mut PyInterpreterState,
        arg2: ::std::os::raw::c_int,
    ) -> () {
        (self
            ._PyInterpreterState_RequireIDRef
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyInterpreterState_GetMainModule(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> *mut PyObject {
        (self
            ._PyInterpreterState_GetMainModule
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyThreadState_Prealloc(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> *mut PyThreadState {
        (self
            ._PyThreadState_Prealloc
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyThreadState_UncheckedGet(&self) -> *mut PyThreadState {
        (self
            ._PyThreadState_UncheckedGet
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyThreadState_GetDict(&self, tstate: *mut PyThreadState) -> *mut PyObject {
        (self
            ._PyThreadState_GetDict
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyGILState_Check(&self) -> ::std::os::raw::c_int {
        (self
            .PyGILState_Check
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyGILState_GetInterpreterStateUnsafe(&self) -> *mut PyInterpreterState {
        (self
            ._PyGILState_GetInterpreterStateUnsafe
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyThread_CurrentFrames(&self) -> *mut PyObject {
        (self
            ._PyThread_CurrentFrames
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyInterpreterState_Main(&self) -> *mut PyInterpreterState {
        (self
            .PyInterpreterState_Main
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyInterpreterState_Head(&self) -> *mut PyInterpreterState {
        (self
            .PyInterpreterState_Head
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyInterpreterState_Next(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> *mut PyInterpreterState {
        (self
            .PyInterpreterState_Next
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyInterpreterState_ThreadHead(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> *mut PyThreadState {
        (self
            .PyInterpreterState_ThreadHead
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_Next(&self, arg1: *mut PyThreadState) -> *mut PyThreadState {
        (self
            .PyThreadState_Next
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThreadState_DeleteCurrent(&self) -> () {
        (self
            .PyThreadState_DeleteCurrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyInterpreterState_GetEvalFrameFunc(
        &self,
        interp: *mut PyInterpreterState,
    ) -> _PyFrameEvalFunction {
        (self
            ._PyInterpreterState_GetEvalFrameFunc
            .as_ref()
            .expect("Expected function, got error."))(interp)
    }
    pub unsafe fn _PyInterpreterState_SetEvalFrameFunc(
        &self,
        interp: *mut PyInterpreterState,
        eval_frame: _PyFrameEvalFunction,
    ) -> () {
        (self
            ._PyInterpreterState_SetEvalFrameFunc
            .as_ref()
            .expect("Expected function, got error."))(interp, eval_frame)
    }
    pub unsafe fn _PyInterpreterState_GetConfig(
        &self,
        interp: *mut PyInterpreterState,
    ) -> *const PyConfig {
        (self
            ._PyInterpreterState_GetConfig
            .as_ref()
            .expect("Expected function, got error."))(interp)
    }
    pub unsafe fn _Py_GetConfig(&self) -> *const PyConfig {
        (self
            ._Py_GetConfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyObject_GetCrossInterpreterData(
        &self,
        arg1: *mut PyObject,
        arg2: *mut _PyCrossInterpreterData,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_GetCrossInterpreterData
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyCrossInterpreterData_NewObject(
        &self,
        arg1: *mut _PyCrossInterpreterData,
    ) -> *mut PyObject {
        (self
            ._PyCrossInterpreterData_NewObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyCrossInterpreterData_Release(&self, arg1: *mut _PyCrossInterpreterData) -> () {
        (self
            ._PyCrossInterpreterData_Release
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyObject_CheckCrossInterpreterData(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_CheckCrossInterpreterData
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyCrossInterpreterData_RegisterClass(
        &self,
        arg1: *mut PyTypeObject,
        arg2: crossinterpdatafunc,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyCrossInterpreterData_RegisterClass
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyCrossInterpreterData_Lookup(
        &self,
        arg1: *mut PyObject,
    ) -> crossinterpdatafunc {
        (self
            ._PyCrossInterpreterData_Lookup
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyGen_New(&self, arg1: *mut PyFrameObject) -> *mut PyObject {
        (self
            .PyGen_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyGen_NewWithQualName(
        &self,
        arg1: *mut PyFrameObject,
        name: *mut PyObject,
        qualname: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyGen_NewWithQualName
            .as_ref()
            .expect("Expected function, got error."))(arg1, name, qualname)
    }
    pub unsafe fn _PyGen_SetStopIterationValue(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyGen_SetStopIterationValue
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyGen_FetchStopIterationValue(
        &self,
        arg1: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyGen_FetchStopIterationValue
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyGen_Send(&self, arg1: *mut PyGenObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            ._PyGen_Send
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyGen_yf(&self, arg1: *mut PyGenObject) -> *mut PyObject {
        (self
            ._PyGen_yf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyGen_Finalize(&self, self_: *mut PyObject) -> () {
        (self
            ._PyGen_Finalize
            .as_ref()
            .expect("Expected function, got error."))(self_)
    }
    pub unsafe fn _PyCoro_GetAwaitableIter(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            ._PyCoro_GetAwaitableIter
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyCoro_New(
        &self,
        arg1: *mut PyFrameObject,
        name: *mut PyObject,
        qualname: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyCoro_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, name, qualname)
    }
    pub unsafe fn PyAsyncGen_New(
        &self,
        arg1: *mut PyFrameObject,
        name: *mut PyObject,
        qualname: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyAsyncGen_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, name, qualname)
    }
    pub unsafe fn _PyAsyncGenValueWrapperNew(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            ._PyAsyncGenValueWrapperNew
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyDescr_NewMethod(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyMethodDef,
    ) -> *mut PyObject {
        (self
            .PyDescr_NewMethod
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyDescr_NewClassMethod(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyMethodDef,
    ) -> *mut PyObject {
        (self
            .PyDescr_NewClassMethod
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyDescr_NewMember(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyMemberDef,
    ) -> *mut PyObject {
        (self
            .PyDescr_NewMember
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyDescr_NewGetSet(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut PyGetSetDef,
    ) -> *mut PyObject {
        (self
            .PyDescr_NewGetSet
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyDescr_NewWrapper(
        &self,
        arg1: *mut PyTypeObject,
        arg2: *mut wrapperbase,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut PyObject {
        (self
            .PyDescr_NewWrapper
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyDictProxy_New(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyDictProxy_New
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyWrapper_New(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject {
        (self
            .PyWrapper_New
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn Py_GenericAlias(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .Py_GenericAlias
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyWarnings_Init(&self) -> *mut PyObject {
        (self
            ._PyWarnings_Init
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_WarnEx(
        &self,
        category: *mut PyObject,
        message: *const ::std::os::raw::c_char,
        stack_level: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyErr_WarnEx
            .as_ref()
            .expect("Expected function, got error."))(category, message, stack_level)
    }
    pub unsafe fn PyErr_WarnExplicitObject(
        &self,
        category: *mut PyObject,
        message: *mut PyObject,
        filename: *mut PyObject,
        lineno: ::std::os::raw::c_int,
        module: *mut PyObject,
        registry: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyErr_WarnExplicitObject
            .as_ref()
            .expect("Expected function, got error."))(
            category, message, filename, lineno, module, registry,
        )
    }
    pub unsafe fn PyErr_WarnExplicit(
        &self,
        category: *mut PyObject,
        message: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        module: *const ::std::os::raw::c_char,
        registry: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyErr_WarnExplicit
            .as_ref()
            .expect("Expected function, got error."))(
            category, message, filename, lineno, module, registry,
        )
    }
    pub unsafe fn _PyErr_WarnUnawaitedCoroutine(&self, coro: *mut PyObject) -> () {
        (self
            ._PyErr_WarnUnawaitedCoroutine
            .as_ref()
            .expect("Expected function, got error."))(coro)
    }
    pub unsafe fn PyWeakref_NewRef(
        &self,
        ob: *mut PyObject,
        callback: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyWeakref_NewRef
            .as_ref()
            .expect("Expected function, got error."))(ob, callback)
    }
    pub unsafe fn PyWeakref_NewProxy(
        &self,
        ob: *mut PyObject,
        callback: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyWeakref_NewProxy
            .as_ref()
            .expect("Expected function, got error."))(ob, callback)
    }
    pub unsafe fn PyWeakref_GetObject(&self, ref_: *mut PyObject) -> *mut PyObject {
        (self
            .PyWeakref_GetObject
            .as_ref()
            .expect("Expected function, got error."))(ref_)
    }
    pub unsafe fn _PyWeakref_GetWeakrefCount(&self, head: *mut PyWeakReference) -> Py_ssize_t {
        (self
            ._PyWeakref_GetWeakrefCount
            .as_ref()
            .expect("Expected function, got error."))(head)
    }
    pub unsafe fn _PyWeakref_ClearRef(&self, self_: *mut PyWeakReference) -> () {
        (self
            ._PyWeakref_ClearRef
            .as_ref()
            .expect("Expected function, got error."))(self_)
    }
    pub unsafe fn PyStructSequence_InitType(
        &self,
        type_: *mut PyTypeObject,
        desc: *mut PyStructSequence_Desc,
    ) -> () {
        (self
            .PyStructSequence_InitType
            .as_ref()
            .expect("Expected function, got error."))(type_, desc)
    }
    pub unsafe fn PyStructSequence_InitType2(
        &self,
        type_: *mut PyTypeObject,
        desc: *mut PyStructSequence_Desc,
    ) -> ::std::os::raw::c_int {
        (self
            .PyStructSequence_InitType2
            .as_ref()
            .expect("Expected function, got error."))(type_, desc)
    }
    pub unsafe fn PyStructSequence_NewType(
        &self,
        desc: *mut PyStructSequence_Desc,
    ) -> *mut PyTypeObject {
        (self
            .PyStructSequence_NewType
            .as_ref()
            .expect("Expected function, got error."))(desc)
    }
    pub unsafe fn PyStructSequence_New(&self, type_: *mut PyTypeObject) -> *mut PyObject {
        (self
            .PyStructSequence_New
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn PyStructSequence_SetItem(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> () {
        (self
            .PyStructSequence_SetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyStructSequence_GetItem(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PyStructSequence_GetItem
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyNamespace_New(&self, kwds: *mut PyObject) -> *mut PyObject {
        (self
            ._PyNamespace_New
            .as_ref()
            .expect("Expected function, got error."))(kwds)
    }
    pub unsafe fn PyPickleBuffer_FromObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyPickleBuffer_FromObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyPickleBuffer_GetBuffer(&self, arg1: *mut PyObject) -> *const Py_buffer {
        (self
            .PyPickleBuffer_GetBuffer
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyPickleBuffer_Release(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyPickleBuffer_Release
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyCodec_Register(&self, search_function: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyCodec_Register
            .as_ref()
            .expect("Expected function, got error."))(search_function)
    }
    pub unsafe fn _PyCodec_Lookup(&self, encoding: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            ._PyCodec_Lookup
            .as_ref()
            .expect("Expected function, got error."))(encoding)
    }
    pub unsafe fn _PyCodec_Forget(
        &self,
        encoding: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyCodec_Forget
            .as_ref()
            .expect("Expected function, got error."))(encoding)
    }
    pub unsafe fn PyCodec_KnownEncoding(
        &self,
        encoding: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCodec_KnownEncoding
            .as_ref()
            .expect("Expected function, got error."))(encoding)
    }
    pub unsafe fn PyCodec_Encode(
        &self,
        object: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_Encode
            .as_ref()
            .expect("Expected function, got error."))(object, encoding, errors)
    }
    pub unsafe fn PyCodec_Decode(
        &self,
        object: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_Decode
            .as_ref()
            .expect("Expected function, got error."))(object, encoding, errors)
    }
    pub unsafe fn _PyCodec_LookupTextEncoding(
        &self,
        encoding: *const ::std::os::raw::c_char,
        alternate_command: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyCodec_LookupTextEncoding
            .as_ref()
            .expect("Expected function, got error."))(encoding, alternate_command)
    }
    pub unsafe fn _PyCodec_EncodeText(
        &self,
        object: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyCodec_EncodeText
            .as_ref()
            .expect("Expected function, got error."))(object, encoding, errors)
    }
    pub unsafe fn _PyCodec_DecodeText(
        &self,
        object: *mut PyObject,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyCodec_DecodeText
            .as_ref()
            .expect("Expected function, got error."))(object, encoding, errors)
    }
    pub unsafe fn _PyCodecInfo_GetIncrementalDecoder(
        &self,
        codec_info: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyCodecInfo_GetIncrementalDecoder
            .as_ref()
            .expect("Expected function, got error."))(codec_info, errors)
    }
    pub unsafe fn _PyCodecInfo_GetIncrementalEncoder(
        &self,
        codec_info: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyCodecInfo_GetIncrementalEncoder
            .as_ref()
            .expect("Expected function, got error."))(codec_info, errors)
    }
    pub unsafe fn PyCodec_Encoder(&self, encoding: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyCodec_Encoder
            .as_ref()
            .expect("Expected function, got error."))(encoding)
    }
    pub unsafe fn PyCodec_Decoder(&self, encoding: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyCodec_Decoder
            .as_ref()
            .expect("Expected function, got error."))(encoding)
    }
    pub unsafe fn PyCodec_IncrementalEncoder(
        &self,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_IncrementalEncoder
            .as_ref()
            .expect("Expected function, got error."))(encoding, errors)
    }
    pub unsafe fn PyCodec_IncrementalDecoder(
        &self,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_IncrementalDecoder
            .as_ref()
            .expect("Expected function, got error."))(encoding, errors)
    }
    pub unsafe fn PyCodec_StreamReader(
        &self,
        encoding: *const ::std::os::raw::c_char,
        stream: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_StreamReader
            .as_ref()
            .expect("Expected function, got error."))(encoding, stream, errors)
    }
    pub unsafe fn PyCodec_StreamWriter(
        &self,
        encoding: *const ::std::os::raw::c_char,
        stream: *mut PyObject,
        errors: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyCodec_StreamWriter
            .as_ref()
            .expect("Expected function, got error."))(encoding, stream, errors)
    }
    pub unsafe fn PyCodec_RegisterError(
        &self,
        name: *const ::std::os::raw::c_char,
        error: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCodec_RegisterError
            .as_ref()
            .expect("Expected function, got error."))(name, error)
    }
    pub unsafe fn PyCodec_LookupError(&self, name: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyCodec_LookupError
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyCodec_StrictErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_StrictErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyCodec_IgnoreErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_IgnoreErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyCodec_ReplaceErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_ReplaceErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyCodec_XMLCharRefReplaceErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_XMLCharRefReplaceErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyCodec_BackslashReplaceErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_BackslashReplaceErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyCodec_NameReplaceErrors(&self, exc: *mut PyObject) -> *mut PyObject {
        (self
            .PyCodec_NameReplaceErrors
            .as_ref()
            .expect("Expected function, got error."))(exc)
    }
    pub unsafe fn PyErr_SetNone(&self, arg1: *mut PyObject) -> () {
        (self
            .PyErr_SetNone
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_SetObject(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> () {
        (self
            .PyErr_SetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyErr_SetString(
        &self,
        exception: *mut PyObject,
        string: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            .PyErr_SetString
            .as_ref()
            .expect("Expected function, got error."))(exception, string)
    }
    pub unsafe fn PyErr_Occurred(&self) -> *mut PyObject {
        (self
            .PyErr_Occurred
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_Clear(&self) -> () {
        (self
            .PyErr_Clear
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_Fetch(
        &self,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
        arg3: *mut *mut PyObject,
    ) -> () {
        (self
            .PyErr_Fetch
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyErr_Restore(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> () {
        (self
            .PyErr_Restore
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyErr_GetExcInfo(
        &self,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
        arg3: *mut *mut PyObject,
    ) -> () {
        (self
            .PyErr_GetExcInfo
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyErr_SetExcInfo(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> () {
        (self
            .PyErr_SetExcInfo
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn Py_FatalError(&self, message: *const ::std::os::raw::c_char) -> () {
        (self
            .Py_FatalError
            .as_ref()
            .expect("Expected function, got error."))(message)
    }
    pub unsafe fn PyErr_GivenExceptionMatches(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyErr_GivenExceptionMatches
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyErr_ExceptionMatches(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyErr_ExceptionMatches
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_NormalizeException(
        &self,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
        arg3: *mut *mut PyObject,
    ) -> () {
        (self
            .PyErr_NormalizeException
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyException_SetTraceback(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyException_SetTraceback
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyException_GetTraceback(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyException_GetTraceback
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyException_GetCause(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyException_GetCause
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyException_SetCause(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> () {
        (self
            .PyException_SetCause
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyException_GetContext(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyException_GetContext
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyException_SetContext(&self, arg1: *mut PyObject, arg2: *mut PyObject) -> () {
        (self
            .PyException_SetContext
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyExceptionClass_Name(
        &self,
        arg1: *mut PyObject,
    ) -> *const ::std::os::raw::c_char {
        (self
            .PyExceptionClass_Name
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_BadArgument(&self) -> ::std::os::raw::c_int {
        (self
            .PyErr_BadArgument
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_NoMemory(&self) -> *mut PyObject {
        (self
            .PyErr_NoMemory
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_SetFromErrno(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyErr_SetFromErrno
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_SetFromErrnoWithFilenameObject(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_SetFromErrnoWithFilenameObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyErr_SetFromErrnoWithFilenameObjects(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_SetFromErrnoWithFilenameObjects
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyErr_SetFromErrnoWithFilename(
        &self,
        exc: *mut PyObject,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyErr_SetFromErrnoWithFilename
            .as_ref()
            .expect("Expected function, got error."))(exc, filename)
    }
    pub unsafe fn PyErr_FormatV(
        &self,
        exception: *mut PyObject,
        format: *const ::std::os::raw::c_char,
        vargs: *mut __va_list_tag,
    ) -> *mut PyObject {
        (self
            .PyErr_FormatV
            .as_ref()
            .expect("Expected function, got error."))(exception, format, vargs)
    }
    pub unsafe fn PyErr_SetImportErrorSubclass(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_SetImportErrorSubclass
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyErr_SetImportError(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_SetImportError
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyErr_BadInternalCall(&self) -> () {
        (self
            .PyErr_BadInternalCall
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyErr_BadInternalCall(
        &self,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
    ) -> () {
        (self
            ._PyErr_BadInternalCall
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno)
    }
    pub unsafe fn PyErr_NewException(
        &self,
        name: *const ::std::os::raw::c_char,
        base: *mut PyObject,
        dict: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_NewException
            .as_ref()
            .expect("Expected function, got error."))(name, base, dict)
    }
    pub unsafe fn PyErr_NewExceptionWithDoc(
        &self,
        name: *const ::std::os::raw::c_char,
        doc: *const ::std::os::raw::c_char,
        base: *mut PyObject,
        dict: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyErr_NewExceptionWithDoc
            .as_ref()
            .expect("Expected function, got error."))(name, doc, base, dict)
    }
    pub unsafe fn PyErr_WriteUnraisable(&self, arg1: *mut PyObject) -> () {
        (self
            .PyErr_WriteUnraisable
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_CheckSignals(&self) -> ::std::os::raw::c_int {
        (self
            .PyErr_CheckSignals
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_SetInterrupt(&self) -> () {
        (self
            .PyErr_SetInterrupt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_SyntaxLocation(
        &self,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
    ) -> () {
        (self
            .PyErr_SyntaxLocation
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno)
    }
    pub unsafe fn PyErr_SyntaxLocationEx(
        &self,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        col_offset: ::std::os::raw::c_int,
    ) -> () {
        (self
            .PyErr_SyntaxLocationEx
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno, col_offset)
    }
    pub unsafe fn PyErr_ProgramText(
        &self,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyErr_ProgramText
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno)
    }
    pub unsafe fn PyUnicodeDecodeError_Create(
        &self,
        encoding: *const ::std::os::raw::c_char,
        object: *const ::std::os::raw::c_char,
        length: Py_ssize_t,
        start: Py_ssize_t,
        end: Py_ssize_t,
        reason: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicodeDecodeError_Create
            .as_ref()
            .expect("Expected function, got error."))(
            encoding, object, length, start, end, reason
        )
    }
    pub unsafe fn PyUnicodeEncodeError_GetEncoding(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeEncodeError_GetEncoding
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeDecodeError_GetEncoding(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeDecodeError_GetEncoding
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeEncodeError_GetObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeEncodeError_GetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeDecodeError_GetObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeDecodeError_GetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeTranslateError_GetObject(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeTranslateError_GetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeEncodeError_GetStart(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeEncodeError_GetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeDecodeError_GetStart(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeDecodeError_GetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeTranslateError_GetStart(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeTranslateError_GetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeEncodeError_SetStart(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeEncodeError_SetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeDecodeError_SetStart(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeDecodeError_SetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeTranslateError_SetStart(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeTranslateError_SetStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeEncodeError_GetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeEncodeError_GetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeDecodeError_GetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeDecodeError_GetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeTranslateError_GetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeTranslateError_GetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeEncodeError_SetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeEncodeError_SetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeDecodeError_SetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeDecodeError_SetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeTranslateError_SetEnd(
        &self,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeTranslateError_SetEnd
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyUnicodeEncodeError_GetReason(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeEncodeError_GetReason
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeDecodeError_GetReason(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeDecodeError_GetReason
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeTranslateError_GetReason(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyUnicodeTranslateError_GetReason
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyUnicodeEncodeError_SetReason(
        &self,
        exc: *mut PyObject,
        reason: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeEncodeError_SetReason
            .as_ref()
            .expect("Expected function, got error."))(exc, reason)
    }
    pub unsafe fn PyUnicodeDecodeError_SetReason(
        &self,
        exc: *mut PyObject,
        reason: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeDecodeError_SetReason
            .as_ref()
            .expect("Expected function, got error."))(exc, reason)
    }
    pub unsafe fn PyUnicodeTranslateError_SetReason(
        &self,
        exc: *mut PyObject,
        reason: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyUnicodeTranslateError_SetReason
            .as_ref()
            .expect("Expected function, got error."))(exc, reason)
    }
    pub unsafe fn PyOS_vsnprintf(
        &self,
        str_: *mut ::std::os::raw::c_char,
        size: size_t,
        format: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .PyOS_vsnprintf
            .as_ref()
            .expect("Expected function, got error."))(str_, size, format, va)
    }
    pub unsafe fn _PyErr_SetKeyError(&self, arg1: *mut PyObject) -> () {
        (self
            ._PyErr_SetKeyError
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyErr_GetTopmostException(
        &self,
        tstate: *mut PyThreadState,
    ) -> *mut _PyErr_StackItem {
        (self
            ._PyErr_GetTopmostException
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn _PyErr_GetExcInfo(
        &self,
        arg1: *mut PyThreadState,
        arg2: *mut *mut PyObject,
        arg3: *mut *mut PyObject,
        arg4: *mut *mut PyObject,
    ) -> () {
        (self
            ._PyErr_GetExcInfo
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyErr_ChainExceptions(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> () {
        (self
            ._PyErr_ChainExceptions
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PySignal_SetWakeupFd(&self, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .PySignal_SetWakeupFd
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
    pub unsafe fn _PyErr_CheckSignals(&self) -> ::std::os::raw::c_int {
        (self
            ._PyErr_CheckSignals
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_SyntaxLocationObject(
        &self,
        filename: *mut PyObject,
        lineno: ::std::os::raw::c_int,
        col_offset: ::std::os::raw::c_int,
    ) -> () {
        (self
            .PyErr_SyntaxLocationObject
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno, col_offset)
    }
    pub unsafe fn PyErr_ProgramTextObject(
        &self,
        filename: *mut PyObject,
        lineno: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyErr_ProgramTextObject
            .as_ref()
            .expect("Expected function, got error."))(filename, lineno)
    }
    pub unsafe fn PyUnicodeEncodeError_Create(
        &self,
        encoding: *const ::std::os::raw::c_char,
        object: *const Py_UNICODE,
        length: Py_ssize_t,
        start: Py_ssize_t,
        end: Py_ssize_t,
        reason: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicodeEncodeError_Create
            .as_ref()
            .expect("Expected function, got error."))(
            encoding, object, length, start, end, reason
        )
    }
    pub unsafe fn PyUnicodeTranslateError_Create(
        &self,
        object: *const Py_UNICODE,
        length: Py_ssize_t,
        start: Py_ssize_t,
        end: Py_ssize_t,
        reason: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyUnicodeTranslateError_Create
            .as_ref()
            .expect("Expected function, got error."))(object, length, start, end, reason)
    }
    pub unsafe fn _PyUnicodeTranslateError_Create(
        &self,
        object: *mut PyObject,
        start: Py_ssize_t,
        end: Py_ssize_t,
        reason: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._PyUnicodeTranslateError_Create
            .as_ref()
            .expect("Expected function, got error."))(object, start, end, reason)
    }
    pub unsafe fn _PyErr_WriteUnraisableMsg(
        &self,
        err_msg: *const ::std::os::raw::c_char,
        obj: *mut PyObject,
    ) -> () {
        (self
            ._PyErr_WriteUnraisableMsg
            .as_ref()
            .expect("Expected function, got error."))(err_msg, obj)
    }
    pub unsafe fn _Py_FatalErrorFunc(
        &self,
        func: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            ._Py_FatalErrorFunc
            .as_ref()
            .expect("Expected function, got error."))(func, message)
    }
    pub unsafe fn PyThread_init_thread(&self) -> () {
        (self
            .PyThread_init_thread
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_start_new_thread(
        &self,
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_ulong {
        (self
            .PyThread_start_new_thread
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyThread_exit_thread(&self) -> () {
        (self
            .PyThread_exit_thread
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_get_thread_ident(&self) -> ::std::os::raw::c_ulong {
        (self
            .PyThread_get_thread_ident
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_get_thread_native_id(&self) -> ::std::os::raw::c_ulong {
        (self
            .PyThread_get_thread_native_id
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_allocate_lock(&self) -> PyThread_type_lock {
        (self
            .PyThread_allocate_lock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_free_lock(&self, arg1: PyThread_type_lock) -> () {
        (self
            .PyThread_free_lock
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThread_acquire_lock(
        &self,
        arg1: PyThread_type_lock,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyThread_acquire_lock
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyThread_at_fork_reinit(
        &self,
        lock: *mut PyThread_type_lock,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyThread_at_fork_reinit
            .as_ref()
            .expect("Expected function, got error."))(lock)
    }
    pub unsafe fn PyThread_acquire_lock_timed(
        &self,
        arg1: PyThread_type_lock,
        microseconds: ::std::os::raw::c_longlong,
        intr_flag: ::std::os::raw::c_int,
    ) -> PyLockStatus {
        (self
            .PyThread_acquire_lock_timed
            .as_ref()
            .expect("Expected function, got error."))(arg1, microseconds, intr_flag)
    }
    pub unsafe fn PyThread_release_lock(&self, arg1: PyThread_type_lock) -> () {
        (self
            .PyThread_release_lock
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThread_get_stacksize(&self) -> size_t {
        (self
            .PyThread_get_stacksize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_set_stacksize(&self, arg1: size_t) -> ::std::os::raw::c_int {
        (self
            .PyThread_set_stacksize
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyThread_GetInfo(&self) -> *mut PyObject {
        (self
            .PyThread_GetInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_create_key(&self) -> ::std::os::raw::c_int {
        (self
            .PyThread_create_key
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_delete_key(&self, key: ::std::os::raw::c_int) -> () {
        (self
            .PyThread_delete_key
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_set_key_value(
        &self,
        key: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyThread_set_key_value
            .as_ref()
            .expect("Expected function, got error."))(key, value)
    }
    pub unsafe fn PyThread_get_key_value(
        &self,
        key: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyThread_get_key_value
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_delete_key_value(&self, key: ::std::os::raw::c_int) -> () {
        (self
            .PyThread_delete_key_value
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_ReInitTLS(&self) -> () {
        (self
            .PyThread_ReInitTLS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_tss_alloc(&self) -> *mut Py_tss_t {
        (self
            .PyThread_tss_alloc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyThread_tss_free(&self, key: *mut Py_tss_t) -> () {
        (self
            .PyThread_tss_free
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_tss_is_created(&self, key: *mut Py_tss_t) -> ::std::os::raw::c_int {
        (self
            .PyThread_tss_is_created
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_tss_create(&self, key: *mut Py_tss_t) -> ::std::os::raw::c_int {
        (self
            .PyThread_tss_create
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_tss_delete(&self, key: *mut Py_tss_t) -> () {
        (self
            .PyThread_tss_delete
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyThread_tss_set(
        &self,
        key: *mut Py_tss_t,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PyThread_tss_set
            .as_ref()
            .expect("Expected function, got error."))(key, value)
    }
    pub unsafe fn PyThread_tss_get(&self, key: *mut Py_tss_t) -> *mut ::std::os::raw::c_void {
        (self
            .PyThread_tss_get
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn PyContext_New(&self) -> *mut PyObject {
        (self
            .PyContext_New
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyContext_Copy(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyContext_Copy
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyContext_CopyCurrent(&self) -> *mut PyObject {
        (self
            .PyContext_CopyCurrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyContext_Enter(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyContext_Enter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyContext_Exit(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyContext_Exit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyContextVar_New(
        &self,
        name: *const ::std::os::raw::c_char,
        default_value: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyContextVar_New
            .as_ref()
            .expect("Expected function, got error."))(name, default_value)
    }
    pub unsafe fn PyContextVar_Get(
        &self,
        var: *mut PyObject,
        default_value: *mut PyObject,
        value: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyContextVar_Get
            .as_ref()
            .expect("Expected function, got error."))(var, default_value, value)
    }
    pub unsafe fn PyContextVar_Set(
        &self,
        var: *mut PyObject,
        value: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyContextVar_Set
            .as_ref()
            .expect("Expected function, got error."))(var, value)
    }
    pub unsafe fn PyContextVar_Reset(
        &self,
        var: *mut PyObject,
        token: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyContextVar_Reset
            .as_ref()
            .expect("Expected function, got error."))(var, token)
    }
    pub unsafe fn _PyContext_NewHamtForTests(&self) -> *mut PyObject {
        (self
            ._PyContext_NewHamtForTests
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyArena_New(&self) -> *mut PyArena {
        (self
            .PyArena_New
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyArena_Free(&self, arg1: *mut PyArena) -> () {
        (self
            .PyArena_Free
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyArena_Malloc(
        &self,
        arg1: *mut PyArena,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyArena_Malloc
            .as_ref()
            .expect("Expected function, got error."))(arg1, size)
    }
    pub unsafe fn PyArena_AddPyObject(
        &self,
        arg1: *mut PyArena,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyArena_AddPyObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_VaBuildValue_SizeT(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject {
        (self
            ._Py_VaBuildValue_SizeT
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_VaBuildStack_SizeT(
        &self,
        small_stack: *mut *mut PyObject,
        small_stack_len: Py_ssize_t,
        format: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
        p_nargs: *mut Py_ssize_t,
    ) -> *mut *mut PyObject {
        (self
            ._Py_VaBuildStack_SizeT
            .as_ref()
            .expect("Expected function, got error."))(
            small_stack,
            small_stack_len,
            format,
            va,
            p_nargs,
        )
    }
    pub unsafe fn PyArg_VaParse(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .PyArg_VaParse
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyArg_VaParseTupleAndKeywords(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .PyArg_VaParseTupleAndKeywords
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4, arg5)
    }
    pub unsafe fn PyArg_ValidateKeywordArguments(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyArg_ValidateKeywordArguments
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyArg_NoKeywords(
        &self,
        funcname: *const ::std::os::raw::c_char,
        kwargs: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyArg_NoKeywords
            .as_ref()
            .expect("Expected function, got error."))(funcname, kwargs)
    }
    pub unsafe fn _PyArg_NoKwnames(
        &self,
        funcname: *const ::std::os::raw::c_char,
        kwnames: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyArg_NoKwnames
            .as_ref()
            .expect("Expected function, got error."))(funcname, kwnames)
    }
    pub unsafe fn _PyArg_NoPositional(
        &self,
        funcname: *const ::std::os::raw::c_char,
        args: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyArg_NoPositional
            .as_ref()
            .expect("Expected function, got error."))(funcname, args)
    }
    pub unsafe fn _PyArg_BadArgument(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut PyObject,
    ) -> () {
        (self
            ._PyArg_BadArgument
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyArg_CheckPositional(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
        arg4: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyArg_CheckPositional
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn Py_VaBuildValue(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject {
        (self
            .Py_VaBuildValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_VaBuildStack(
        &self,
        small_stack: *mut *mut PyObject,
        small_stack_len: Py_ssize_t,
        format: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
        p_nargs: *mut Py_ssize_t,
    ) -> *mut *mut PyObject {
        (self
            ._Py_VaBuildStack
            .as_ref()
            .expect("Expected function, got error."))(
            small_stack,
            small_stack_len,
            format,
            va,
            p_nargs,
        )
    }
    pub unsafe fn _PyArg_VaParseTupleAndKeywordsFast(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut _PyArg_Parser,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyArg_VaParseTupleAndKeywordsFast
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _PyArg_UnpackKeywords(
        &self,
        args: *const *mut PyObject,
        nargs: Py_ssize_t,
        kwargs: *mut PyObject,
        kwnames: *mut PyObject,
        parser: *mut _PyArg_Parser,
        minpos: ::std::os::raw::c_int,
        maxpos: ::std::os::raw::c_int,
        minkw: ::std::os::raw::c_int,
        buf: *mut *mut PyObject,
    ) -> *const *mut PyObject {
        (self
            ._PyArg_UnpackKeywords
            .as_ref()
            .expect("Expected function, got error."))(
            args, nargs, kwargs, kwnames, parser, minpos, maxpos, minkw, buf,
        )
    }
    pub unsafe fn _PyArg_Fini(&self) -> () {
        (self
            ._PyArg_Fini
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyModule_AddObject(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_AddObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyModule_AddIntConstant(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_AddIntConstant
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyModule_AddStringConstant(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_AddStringConstant
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyModule_AddType(
        &self,
        module: *mut PyObject,
        type_: *mut PyTypeObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_AddType
            .as_ref()
            .expect("Expected function, got error."))(module, type_)
    }
    pub unsafe fn PyModule_SetDocString(
        &self,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_SetDocString
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyModule_AddFunctions(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyMethodDef,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_AddFunctions
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyModule_ExecDef(
        &self,
        module: *mut PyObject,
        def: *mut PyModuleDef,
    ) -> ::std::os::raw::c_int {
        (self
            .PyModule_ExecDef
            .as_ref()
            .expect("Expected function, got error."))(module, def)
    }
    pub unsafe fn PyModule_Create2(
        &self,
        arg1: *mut PyModuleDef,
        apiver: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyModule_Create2
            .as_ref()
            .expect("Expected function, got error."))(arg1, apiver)
    }
    pub unsafe fn _PyModule_CreateInitialized(
        &self,
        arg1: *mut PyModuleDef,
        apiver: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyModule_CreateInitialized
            .as_ref()
            .expect("Expected function, got error."))(arg1, apiver)
    }
    pub unsafe fn PyModule_FromDefAndSpec2(
        &self,
        def: *mut PyModuleDef,
        spec: *mut PyObject,
        module_api_version: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyModule_FromDefAndSpec2
            .as_ref()
            .expect("Expected function, got error."))(def, spec, module_api_version)
    }
    pub unsafe fn PyNode_Compile(
        &self,
        arg1: *mut _node,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyCodeObject {
        (self
            .PyNode_Compile
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyAST_CompileEx(
        &self,
        mod_: *mut _mod,
        filename: *const ::std::os::raw::c_char,
        flags: *mut PyCompilerFlags,
        optimize: ::std::os::raw::c_int,
        arena: *mut PyArena,
    ) -> *mut PyCodeObject {
        (self
            .PyAST_CompileEx
            .as_ref()
            .expect("Expected function, got error."))(mod_, filename, flags, optimize, arena)
    }
    pub unsafe fn PyAST_CompileObject(
        &self,
        mod_: *mut _mod,
        filename: *mut PyObject,
        flags: *mut PyCompilerFlags,
        optimize: ::std::os::raw::c_int,
        arena: *mut PyArena,
    ) -> *mut PyCodeObject {
        (self
            .PyAST_CompileObject
            .as_ref()
            .expect("Expected function, got error."))(mod_, filename, flags, optimize, arena)
    }
    pub unsafe fn PyFuture_FromAST(
        &self,
        mod_: *mut _mod,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut PyFutureFeatures {
        (self
            .PyFuture_FromAST
            .as_ref()
            .expect("Expected function, got error."))(mod_, filename)
    }
    pub unsafe fn PyFuture_FromASTObject(
        &self,
        mod_: *mut _mod,
        filename: *mut PyObject,
    ) -> *mut PyFutureFeatures {
        (self
            .PyFuture_FromASTObject
            .as_ref()
            .expect("Expected function, got error."))(mod_, filename)
    }
    pub unsafe fn _Py_Mangle(&self, p: *mut PyObject, name: *mut PyObject) -> *mut PyObject {
        (self
            ._Py_Mangle
            .as_ref()
            .expect("Expected function, got error."))(p, name)
    }
    pub unsafe fn PyCompile_OpcodeStackEffect(
        &self,
        opcode: ::std::os::raw::c_int,
        oparg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCompile_OpcodeStackEffect
            .as_ref()
            .expect("Expected function, got error."))(opcode, oparg)
    }
    pub unsafe fn PyCompile_OpcodeStackEffectWithJump(
        &self,
        opcode: ::std::os::raw::c_int,
        oparg: ::std::os::raw::c_int,
        jump: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyCompile_OpcodeStackEffectWithJump
            .as_ref()
            .expect("Expected function, got error."))(opcode, oparg, jump)
    }
    pub unsafe fn _PyAST_Optimize(
        &self,
        arg1: *mut _mod,
        arena: *mut PyArena,
        state: *mut _PyASTOptimizeState,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyAST_Optimize
            .as_ref()
            .expect("Expected function, got error."))(arg1, arena, state)
    }
    pub unsafe fn PyRun_SimpleStringFlags(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_SimpleStringFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyRun_AnyFileExFlags(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        closeit: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_AnyFileExFlags
            .as_ref()
            .expect("Expected function, got error."))(fp, filename, closeit, flags)
    }
    pub unsafe fn PyRun_SimpleFileExFlags(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        closeit: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_SimpleFileExFlags
            .as_ref()
            .expect("Expected function, got error."))(fp, filename, closeit, flags)
    }
    pub unsafe fn PyRun_InteractiveOneFlags(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        flags: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_InteractiveOneFlags
            .as_ref()
            .expect("Expected function, got error."))(fp, filename, flags)
    }
    pub unsafe fn PyRun_InteractiveOneObject(
        &self,
        fp: *mut FILE,
        filename: *mut PyObject,
        flags: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_InteractiveOneObject
            .as_ref()
            .expect("Expected function, got error."))(fp, filename, flags)
    }
    pub unsafe fn PyRun_InteractiveLoopFlags(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        flags: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_InteractiveLoopFlags
            .as_ref()
            .expect("Expected function, got error."))(fp, filename, flags)
    }
    pub unsafe fn PyParser_ASTFromString(
        &self,
        s: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
        arena: *mut PyArena,
    ) -> *mut _mod {
        (self
            .PyParser_ASTFromString
            .as_ref()
            .expect("Expected function, got error."))(s, filename, start, flags, arena)
    }
    pub unsafe fn PyParser_ASTFromStringObject(
        &self,
        s: *const ::std::os::raw::c_char,
        filename: *mut PyObject,
        start: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
        arena: *mut PyArena,
    ) -> *mut _mod {
        (self
            .PyParser_ASTFromStringObject
            .as_ref()
            .expect("Expected function, got error."))(s, filename, start, flags, arena)
    }
    pub unsafe fn PyParser_ASTFromFile(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        enc: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        ps1: *const ::std::os::raw::c_char,
        ps2: *const ::std::os::raw::c_char,
        flags: *mut PyCompilerFlags,
        errcode: *mut ::std::os::raw::c_int,
        arena: *mut PyArena,
    ) -> *mut _mod {
        (self
            .PyParser_ASTFromFile
            .as_ref()
            .expect("Expected function, got error."))(
            fp, filename, enc, start, ps1, ps2, flags, errcode, arena,
        )
    }
    pub unsafe fn PyParser_ASTFromFileObject(
        &self,
        fp: *mut FILE,
        filename: *mut PyObject,
        enc: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        ps1: *const ::std::os::raw::c_char,
        ps2: *const ::std::os::raw::c_char,
        flags: *mut PyCompilerFlags,
        errcode: *mut ::std::os::raw::c_int,
        arena: *mut PyArena,
    ) -> *mut _mod {
        (self
            .PyParser_ASTFromFileObject
            .as_ref()
            .expect("Expected function, got error."))(
            fp, filename, enc, start, ps1, ps2, flags, errcode, arena,
        )
    }
    pub unsafe fn PyParser_SimpleParseStringFlags(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut _node {
        (self
            .PyParser_SimpleParseStringFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyParser_SimpleParseStringFlagsFilename(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut _node {
        (self
            .PyParser_SimpleParseStringFlagsFilename
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyParser_SimpleParseFileFlags(
        &self,
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut _node {
        (self
            .PyParser_SimpleParseFileFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyRun_StringFlags(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut PyObject,
        arg4: *mut PyObject,
        arg5: *mut PyCompilerFlags,
    ) -> *mut PyObject {
        (self
            .PyRun_StringFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4, arg5)
    }
    pub unsafe fn PyRun_FileExFlags(
        &self,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        globals: *mut PyObject,
        locals: *mut PyObject,
        closeit: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
    ) -> *mut PyObject {
        (self
            .PyRun_FileExFlags
            .as_ref()
            .expect("Expected function, got error."))(
            fp, filename, start, globals, locals, closeit, flags,
        )
    }
    pub unsafe fn Py_CompileStringExFlags(
        &self,
        str_: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
        optimize: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .Py_CompileStringExFlags
            .as_ref()
            .expect("Expected function, got error."))(str_, filename, start, flags, optimize)
    }
    pub unsafe fn Py_CompileStringObject(
        &self,
        str_: *const ::std::os::raw::c_char,
        filename: *mut PyObject,
        start: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
        optimize: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .Py_CompileStringObject
            .as_ref()
            .expect("Expected function, got error."))(str_, filename, start, flags, optimize)
    }
    pub unsafe fn Py_SymtableString(
        &self,
        str_: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
    ) -> *mut symtable {
        (self
            .Py_SymtableString
            .as_ref()
            .expect("Expected function, got error."))(str_, filename, start)
    }
    pub unsafe fn _Py_SourceAsString(
        &self,
        cmd: *mut PyObject,
        funcname: *const ::std::os::raw::c_char,
        what: *const ::std::os::raw::c_char,
        cf: *mut PyCompilerFlags,
        cmd_copy: *mut *mut PyObject,
    ) -> *const ::std::os::raw::c_char {
        (self
            ._Py_SourceAsString
            .as_ref()
            .expect("Expected function, got error."))(cmd, funcname, what, cf, cmd_copy)
    }
    pub unsafe fn Py_SymtableStringObject(
        &self,
        str_: *const ::std::os::raw::c_char,
        filename: *mut PyObject,
        start: ::std::os::raw::c_int,
    ) -> *mut symtable {
        (self
            .Py_SymtableStringObject
            .as_ref()
            .expect("Expected function, got error."))(str_, filename, start)
    }
    pub unsafe fn _Py_SymtableStringObjectFlags(
        &self,
        str_: *const ::std::os::raw::c_char,
        filename: *mut PyObject,
        start: ::std::os::raw::c_int,
        flags: *mut PyCompilerFlags,
    ) -> *mut symtable {
        (self
            ._Py_SymtableStringObjectFlags
            .as_ref()
            .expect("Expected function, got error."))(str_, filename, start, flags)
    }
    pub unsafe fn PyErr_Print(&self) -> () {
        (self
            .PyErr_Print
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyErr_PrintEx(&self, arg1: ::std::os::raw::c_int) -> () {
        (self
            .PyErr_PrintEx
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyErr_Display(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> () {
        (self
            .PyErr_Display
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyRun_String(
        &self,
        str_: *const ::std::os::raw::c_char,
        s: ::std::os::raw::c_int,
        g: *mut PyObject,
        l: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyRun_String
            .as_ref()
            .expect("Expected function, got error."))(str_, s, g, l)
    }
    pub unsafe fn PyRun_AnyFile(
        &self,
        fp: *mut FILE,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_AnyFile
            .as_ref()
            .expect("Expected function, got error."))(fp, name)
    }
    pub unsafe fn PyRun_AnyFileEx(
        &self,
        fp: *mut FILE,
        name: *const ::std::os::raw::c_char,
        closeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_AnyFileEx
            .as_ref()
            .expect("Expected function, got error."))(fp, name, closeit)
    }
    pub unsafe fn PyRun_AnyFileFlags(
        &self,
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_AnyFileFlags
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyRun_SimpleString(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_SimpleString
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn PyRun_SimpleFile(
        &self,
        f: *mut FILE,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_SimpleFile
            .as_ref()
            .expect("Expected function, got error."))(f, p)
    }
    pub unsafe fn PyRun_SimpleFileEx(
        &self,
        f: *mut FILE,
        p: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_SimpleFileEx
            .as_ref()
            .expect("Expected function, got error."))(f, p, c)
    }
    pub unsafe fn PyRun_InteractiveOne(
        &self,
        f: *mut FILE,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_InteractiveOne
            .as_ref()
            .expect("Expected function, got error."))(f, p)
    }
    pub unsafe fn PyRun_InteractiveLoop(
        &self,
        f: *mut FILE,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyRun_InteractiveLoop
            .as_ref()
            .expect("Expected function, got error."))(f, p)
    }
    pub unsafe fn PyRun_File(
        &self,
        fp: *mut FILE,
        p: *const ::std::os::raw::c_char,
        s: ::std::os::raw::c_int,
        g: *mut PyObject,
        l: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyRun_File
            .as_ref()
            .expect("Expected function, got error."))(fp, p, s, g, l)
    }
    pub unsafe fn PyRun_FileEx(
        &self,
        fp: *mut FILE,
        p: *const ::std::os::raw::c_char,
        s: ::std::os::raw::c_int,
        g: *mut PyObject,
        l: *mut PyObject,
        c: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyRun_FileEx
            .as_ref()
            .expect("Expected function, got error."))(fp, p, s, g, l, c)
    }
    pub unsafe fn PyRun_FileFlags(
        &self,
        fp: *mut FILE,
        p: *const ::std::os::raw::c_char,
        s: ::std::os::raw::c_int,
        g: *mut PyObject,
        l: *mut PyObject,
        flags: *mut PyCompilerFlags,
    ) -> *mut PyObject {
        (self
            .PyRun_FileFlags
            .as_ref()
            .expect("Expected function, got error."))(fp, p, s, g, l, flags)
    }
    pub unsafe fn PyOS_Readline(
        &self,
        arg1: *mut FILE,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .PyOS_Readline
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn Py_Initialize(&self) -> () {
        (self
            .Py_Initialize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_InitializeEx(&self, arg1: ::std::os::raw::c_int) -> () {
        (self
            .Py_InitializeEx
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_Finalize(&self) -> () {
        (self
            .Py_Finalize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_FinalizeEx(&self) -> ::std::os::raw::c_int {
        (self
            .Py_FinalizeEx
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_IsInitialized(&self) -> ::std::os::raw::c_int {
        (self
            .Py_IsInitialized
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_NewInterpreter(&self) -> *mut PyThreadState {
        (self
            .Py_NewInterpreter
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_EndInterpreter(&self, arg1: *mut PyThreadState) -> () {
        (self
            .Py_EndInterpreter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_AtExit(
        &self,
        func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_AtExit
            .as_ref()
            .expect("Expected function, got error."))(func)
    }
    pub unsafe fn Py_Exit(&self, arg1: ::std::os::raw::c_int) -> () {
        (self
            .Py_Exit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_Main(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_Main
            .as_ref()
            .expect("Expected function, got error."))(argc, argv)
    }
    pub unsafe fn Py_FrozenMain(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_FrozenMain
            .as_ref()
            .expect("Expected function, got error."))(argc, argv)
    }
    pub unsafe fn Py_BytesMain(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_BytesMain
            .as_ref()
            .expect("Expected function, got error."))(argc, argv)
    }
    pub unsafe fn Py_SetProgramName(&self, arg1: *const wchar_t) -> () {
        (self
            .Py_SetProgramName
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_GetProgramName(&self) -> *mut wchar_t {
        (self
            .Py_GetProgramName
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_SetPythonHome(&self, arg1: *const wchar_t) -> () {
        (self
            .Py_SetPythonHome
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_GetPythonHome(&self) -> *mut wchar_t {
        (self
            .Py_GetPythonHome
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetProgramFullPath(&self) -> *mut wchar_t {
        (self
            .Py_GetProgramFullPath
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetPrefix(&self) -> *mut wchar_t {
        (self
            .Py_GetPrefix
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetExecPrefix(&self) -> *mut wchar_t {
        (self
            .Py_GetExecPrefix
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetPath(&self) -> *mut wchar_t {
        (self
            .Py_GetPath
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_SetPath(&self, arg1: *const wchar_t) -> () {
        (self
            .Py_SetPath
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_GetVersion(&self) -> *const ::std::os::raw::c_char {
        (self
            .Py_GetVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetPlatform(&self) -> *const ::std::os::raw::c_char {
        (self
            .Py_GetPlatform
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetCopyright(&self) -> *const ::std::os::raw::c_char {
        (self
            .Py_GetCopyright
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetCompiler(&self) -> *const ::std::os::raw::c_char {
        (self
            .Py_GetCompiler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_GetBuildInfo(&self) -> *const ::std::os::raw::c_char {
        (self
            .Py_GetBuildInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_getsig(&self, arg1: ::std::os::raw::c_int) -> PyOS_sighandler_t {
        (self
            .PyOS_getsig
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyOS_setsig(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: PyOS_sighandler_t,
    ) -> PyOS_sighandler_t {
        (self
            .PyOS_setsig
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn Py_SetStandardStreamEncoding(
        &self,
        encoding: *const ::std::os::raw::c_char,
        errors: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_SetStandardStreamEncoding
            .as_ref()
            .expect("Expected function, got error."))(encoding, errors)
    }
    pub unsafe fn Py_PreInitialize(&self, src_config: *const PyPreConfig) -> PyStatus {
        (self
            .Py_PreInitialize
            .as_ref()
            .expect("Expected function, got error."))(src_config)
    }
    pub unsafe fn Py_PreInitializeFromBytesArgs(
        &self,
        src_config: *const PyPreConfig,
        argc: Py_ssize_t,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> PyStatus {
        (self
            .Py_PreInitializeFromBytesArgs
            .as_ref()
            .expect("Expected function, got error."))(src_config, argc, argv)
    }
    pub unsafe fn Py_PreInitializeFromArgs(
        &self,
        src_config: *const PyPreConfig,
        argc: Py_ssize_t,
        argv: *mut *mut wchar_t,
    ) -> PyStatus {
        (self
            .Py_PreInitializeFromArgs
            .as_ref()
            .expect("Expected function, got error."))(src_config, argc, argv)
    }
    pub unsafe fn _Py_IsCoreInitialized(&self) -> ::std::os::raw::c_int {
        (self
            ._Py_IsCoreInitialized
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_InitializeFromConfig(&self, config: *const PyConfig) -> PyStatus {
        (self
            .Py_InitializeFromConfig
            .as_ref()
            .expect("Expected function, got error."))(config)
    }
    pub unsafe fn _Py_InitializeMain(&self) -> PyStatus {
        (self
            ._Py_InitializeMain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_RunMain(&self) -> ::std::os::raw::c_int {
        (self
            .Py_RunMain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_ExitStatusException(&self, err: PyStatus) -> () {
        (self
            .Py_ExitStatusException
            .as_ref()
            .expect("Expected function, got error."))(err)
    }
    pub unsafe fn _Py_PyAtExit(
        &self,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>,
        arg1: *mut PyObject,
    ) -> () {
        (self
            ._Py_PyAtExit
            .as_ref()
            .expect("Expected function, got error."))(func, arg1)
    }
    pub unsafe fn _Py_RestoreSignals(&self) -> () {
        (self
            ._Py_RestoreSignals
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_FdIsInteractive(
        &self,
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_FdIsInteractive
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _Py_SetProgramFullPath(&self, arg1: *const wchar_t) -> () {
        (self
            ._Py_SetProgramFullPath
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_gitidentifier(&self) -> *const ::std::os::raw::c_char {
        (self
            ._Py_gitidentifier
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _Py_gitversion(&self) -> *const ::std::os::raw::c_char {
        (self
            ._Py_gitversion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _Py_IsFinalizing(&self) -> ::std::os::raw::c_int {
        (self
            ._Py_IsFinalizing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyOS_URandom(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyOS_URandom
            .as_ref()
            .expect("Expected function, got error."))(buffer, size)
    }
    pub unsafe fn _PyOS_URandomNonblock(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        size: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyOS_URandomNonblock
            .as_ref()
            .expect("Expected function, got error."))(buffer, size)
    }
    pub unsafe fn _Py_CoerceLegacyLocale(
        &self,
        warn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_CoerceLegacyLocale
            .as_ref()
            .expect("Expected function, got error."))(warn)
    }
    pub unsafe fn _Py_LegacyLocaleDetected(
        &self,
        warn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_LegacyLocaleDetected
            .as_ref()
            .expect("Expected function, got error."))(warn)
    }
    pub unsafe fn _Py_SetLocaleFromEnv(
        &self,
        category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._Py_SetLocaleFromEnv
            .as_ref()
            .expect("Expected function, got error."))(category)
    }
    pub unsafe fn _Py_NewInterpreter(
        &self,
        isolated_subinterpreter: ::std::os::raw::c_int,
    ) -> *mut PyThreadState {
        (self
            ._Py_NewInterpreter
            .as_ref()
            .expect("Expected function, got error."))(isolated_subinterpreter)
    }
    pub unsafe fn PyEval_CallObjectWithKeywords(
        &self,
        callable: *mut PyObject,
        args: *mut PyObject,
        kwargs: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyEval_CallObjectWithKeywords
            .as_ref()
            .expect("Expected function, got error."))(callable, args, kwargs)
    }
    pub unsafe fn PyEval_GetBuiltins(&self) -> *mut PyObject {
        (self
            .PyEval_GetBuiltins
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_GetGlobals(&self) -> *mut PyObject {
        (self
            .PyEval_GetGlobals
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_GetLocals(&self) -> *mut PyObject {
        (self
            .PyEval_GetLocals
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_GetFrame(&self) -> *mut PyFrameObject {
        (self
            .PyEval_GetFrame
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_AddPendingCall(
        &self,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_AddPendingCall
            .as_ref()
            .expect("Expected function, got error."))(func, arg)
    }
    pub unsafe fn Py_MakePendingCalls(&self) -> ::std::os::raw::c_int {
        (self
            .Py_MakePendingCalls
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_SetRecursionLimit(&self, arg1: ::std::os::raw::c_int) -> () {
        (self
            .Py_SetRecursionLimit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn Py_GetRecursionLimit(&self) -> ::std::os::raw::c_int {
        (self
            .Py_GetRecursionLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Py_EnterRecursiveCall(
        &self,
        where_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .Py_EnterRecursiveCall
            .as_ref()
            .expect("Expected function, got error."))(where_)
    }
    pub unsafe fn Py_LeaveRecursiveCall(&self) -> () {
        (self
            .Py_LeaveRecursiveCall
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_GetFuncName(&self, arg1: *mut PyObject) -> *const ::std::os::raw::c_char {
        (self
            .PyEval_GetFuncName
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyEval_GetFuncDesc(&self, arg1: *mut PyObject) -> *const ::std::os::raw::c_char {
        (self
            .PyEval_GetFuncDesc
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyEval_EvalFrame(&self, arg1: *mut PyFrameObject) -> *mut PyObject {
        (self
            .PyEval_EvalFrame
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyEval_EvalFrameEx(
        &self,
        f: *mut PyFrameObject,
        exc: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyEval_EvalFrameEx
            .as_ref()
            .expect("Expected function, got error."))(f, exc)
    }
    pub unsafe fn PyEval_SaveThread(&self) -> *mut PyThreadState {
        (self
            .PyEval_SaveThread
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_RestoreThread(&self, arg1: *mut PyThreadState) -> () {
        (self
            .PyEval_RestoreThread
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyEval_ThreadsInitialized(&self) -> ::std::os::raw::c_int {
        (self
            .PyEval_ThreadsInitialized
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_InitThreads(&self) -> () {
        (self
            .PyEval_InitThreads
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_AcquireLock(&self) -> () {
        (self
            .PyEval_AcquireLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_ReleaseLock(&self) -> () {
        (self
            .PyEval_ReleaseLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyEval_AcquireThread(&self, tstate: *mut PyThreadState) -> () {
        (self
            .PyEval_AcquireThread
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyEval_ReleaseThread(&self, tstate: *mut PyThreadState) -> () {
        (self
            .PyEval_ReleaseThread
            .as_ref()
            .expect("Expected function, got error."))(tstate)
    }
    pub unsafe fn PyEval_SetProfile(&self, arg1: Py_tracefunc, arg2: *mut PyObject) -> () {
        (self
            .PyEval_SetProfile
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyEval_SetProfile(
        &self,
        tstate: *mut PyThreadState,
        func: Py_tracefunc,
        arg: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SetProfile
            .as_ref()
            .expect("Expected function, got error."))(tstate, func, arg)
    }
    pub unsafe fn PyEval_SetTrace(&self, arg1: Py_tracefunc, arg2: *mut PyObject) -> () {
        (self
            .PyEval_SetTrace
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyEval_SetTrace(
        &self,
        tstate: *mut PyThreadState,
        func: Py_tracefunc,
        arg: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SetTrace
            .as_ref()
            .expect("Expected function, got error."))(tstate, func, arg)
    }
    pub unsafe fn _PyEval_GetCoroutineOriginTrackingDepth(&self) -> ::std::os::raw::c_int {
        (self
            ._PyEval_GetCoroutineOriginTrackingDepth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyEval_SetAsyncGenFirstiter(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SetAsyncGenFirstiter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyEval_GetAsyncGenFirstiter(&self) -> *mut PyObject {
        (self
            ._PyEval_GetAsyncGenFirstiter
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyEval_SetAsyncGenFinalizer(
        &self,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SetAsyncGenFinalizer
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyEval_GetAsyncGenFinalizer(&self) -> *mut PyObject {
        (self
            ._PyEval_GetAsyncGenFinalizer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyEval_GetBuiltinId(&self, arg1: *mut _Py_Identifier) -> *mut PyObject {
        (self
            ._PyEval_GetBuiltinId
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyEval_MergeCompilerFlags(
        &self,
        cf: *mut PyCompilerFlags,
    ) -> ::std::os::raw::c_int {
        (self
            .PyEval_MergeCompilerFlags
            .as_ref()
            .expect("Expected function, got error."))(cf)
    }
    pub unsafe fn _PyEval_EvalFrameDefault(
        &self,
        tstate: *mut PyThreadState,
        f: *mut PyFrameObject,
        exc: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            ._PyEval_EvalFrameDefault
            .as_ref()
            .expect("Expected function, got error."))(tstate, f, exc)
    }
    pub unsafe fn _PyEval_SetSwitchInterval(&self, microseconds: ::std::os::raw::c_ulong) -> () {
        (self
            ._PyEval_SetSwitchInterval
            .as_ref()
            .expect("Expected function, got error."))(microseconds)
    }
    pub unsafe fn _PyEval_GetSwitchInterval(&self) -> ::std::os::raw::c_ulong {
        (self
            ._PyEval_GetSwitchInterval
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyEval_RequestCodeExtraIndex(&self, arg1: freefunc) -> Py_ssize_t {
        (self
            ._PyEval_RequestCodeExtraIndex
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyEval_SliceIndex(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SliceIndex
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyEval_SliceIndexNotNone(
        &self,
        arg1: *mut PyObject,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyEval_SliceIndexNotNone
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PySys_GetObject(&self, arg1: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PySys_GetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_SetObject(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySys_SetObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PySys_SetArgv(&self, arg1: ::std::os::raw::c_int, arg2: *mut *mut wchar_t) -> () {
        (self
            .PySys_SetArgv
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PySys_SetArgvEx(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> () {
        (self
            .PySys_SetArgvEx
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PySys_SetPath(&self, arg1: *const wchar_t) -> () {
        (self
            .PySys_SetPath
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_ResetWarnOptions(&self) -> () {
        (self
            .PySys_ResetWarnOptions
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PySys_AddWarnOption(&self, arg1: *const wchar_t) -> () {
        (self
            .PySys_AddWarnOption
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_AddWarnOptionUnicode(&self, arg1: *mut PyObject) -> () {
        (self
            .PySys_AddWarnOptionUnicode
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_HasWarnOptions(&self) -> ::std::os::raw::c_int {
        (self
            .PySys_HasWarnOptions
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PySys_AddXOption(&self, arg1: *const wchar_t) -> () {
        (self
            .PySys_AddXOption
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_GetXOptions(&self) -> *mut PyObject {
        (self
            .PySys_GetXOptions
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PySys_GetObjectId(&self, key: *mut _Py_Identifier) -> *mut PyObject {
        (self
            ._PySys_GetObjectId
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn _PySys_SetObjectId(
        &self,
        key: *mut _Py_Identifier,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PySys_SetObjectId
            .as_ref()
            .expect("Expected function, got error."))(key, arg1)
    }
    pub unsafe fn _PySys_GetSizeOf(&self, arg1: *mut PyObject) -> size_t {
        (self
            ._PySys_GetSizeOf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PySys_AddAuditHook(
        &self,
        arg1: Py_AuditHookFunction,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .PySys_AddAuditHook
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyOS_FSPath(&self, path: *mut PyObject) -> *mut PyObject {
        (self
            .PyOS_FSPath
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn PyOS_InterruptOccurred(&self) -> ::std::os::raw::c_int {
        (self
            .PyOS_InterruptOccurred
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_InitInterrupts(&self) -> () {
        (self
            .PyOS_InitInterrupts
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_BeforeFork(&self) -> () {
        (self
            .PyOS_BeforeFork
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_AfterFork_Parent(&self) -> () {
        (self
            .PyOS_AfterFork_Parent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_AfterFork_Child(&self) -> () {
        (self
            .PyOS_AfterFork_Child
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyOS_AfterFork(&self) -> () {
        (self
            .PyOS_AfterFork
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyOS_IsMainThread(&self) -> ::std::os::raw::c_int {
        (self
            ._PyOS_IsMainThread
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PySignal_AfterFork(&self) -> () {
        (self
            ._PySignal_AfterFork
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyImport_GetMagicNumber(&self) -> ::std::os::raw::c_long {
        (self
            .PyImport_GetMagicNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyImport_GetMagicTag(&self) -> *const ::std::os::raw::c_char {
        (self
            .PyImport_GetMagicTag
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyImport_ExecCodeModule(
        &self,
        name: *const ::std::os::raw::c_char,
        co: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyImport_ExecCodeModule
            .as_ref()
            .expect("Expected function, got error."))(name, co)
    }
    pub unsafe fn PyImport_ExecCodeModuleEx(
        &self,
        name: *const ::std::os::raw::c_char,
        co: *mut PyObject,
        pathname: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyImport_ExecCodeModuleEx
            .as_ref()
            .expect("Expected function, got error."))(name, co, pathname)
    }
    pub unsafe fn PyImport_ExecCodeModuleWithPathnames(
        &self,
        name: *const ::std::os::raw::c_char,
        co: *mut PyObject,
        pathname: *const ::std::os::raw::c_char,
        cpathname: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyImport_ExecCodeModuleWithPathnames
            .as_ref()
            .expect("Expected function, got error."))(name, co, pathname, cpathname)
    }
    pub unsafe fn PyImport_ExecCodeModuleObject(
        &self,
        name: *mut PyObject,
        co: *mut PyObject,
        pathname: *mut PyObject,
        cpathname: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyImport_ExecCodeModuleObject
            .as_ref()
            .expect("Expected function, got error."))(name, co, pathname, cpathname)
    }
    pub unsafe fn PyImport_GetModuleDict(&self) -> *mut PyObject {
        (self
            .PyImport_GetModuleDict
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PyImport_GetModule(&self, name: *mut PyObject) -> *mut PyObject {
        (self
            .PyImport_GetModule
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_AddModuleObject(&self, name: *mut PyObject) -> *mut PyObject {
        (self
            .PyImport_AddModuleObject
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_AddModule(&self, name: *const ::std::os::raw::c_char) -> *mut PyObject {
        (self
            .PyImport_AddModule
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_ImportModule(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyImport_ImportModule
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_ImportModuleNoBlock(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyImport_ImportModuleNoBlock
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_ImportModuleLevel(
        &self,
        name: *const ::std::os::raw::c_char,
        globals: *mut PyObject,
        locals: *mut PyObject,
        fromlist: *mut PyObject,
        level: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyImport_ImportModuleLevel
            .as_ref()
            .expect("Expected function, got error."))(name, globals, locals, fromlist, level)
    }
    pub unsafe fn PyImport_ImportModuleLevelObject(
        &self,
        name: *mut PyObject,
        globals: *mut PyObject,
        locals: *mut PyObject,
        fromlist: *mut PyObject,
        level: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyImport_ImportModuleLevelObject
            .as_ref()
            .expect("Expected function, got error."))(name, globals, locals, fromlist, level)
    }
    pub unsafe fn PyImport_GetImporter(&self, path: *mut PyObject) -> *mut PyObject {
        (self
            .PyImport_GetImporter
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn PyImport_Import(&self, name: *mut PyObject) -> *mut PyObject {
        (self
            .PyImport_Import
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_ReloadModule(&self, m: *mut PyObject) -> *mut PyObject {
        (self
            .PyImport_ReloadModule
            .as_ref()
            .expect("Expected function, got error."))(m)
    }
    pub unsafe fn PyImport_ImportFrozenModuleObject(
        &self,
        name: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyImport_ImportFrozenModuleObject
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_ImportFrozenModule(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyImport_ImportFrozenModule
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn PyImport_AppendInittab(
        &self,
        name: *const ::std::os::raw::c_char,
        initfunc: ::std::option::Option<unsafe extern "C" fn() -> *mut PyObject>,
    ) -> ::std::os::raw::c_int {
        (self
            .PyImport_AppendInittab
            .as_ref()
            .expect("Expected function, got error."))(name, initfunc)
    }
    pub unsafe fn PyInit__imp(&self) -> *mut PyObject {
        (self
            .PyInit__imp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyImport_IsInitialized(
        &self,
        arg1: *mut PyInterpreterState,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyImport_IsInitialized
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _PyImport_GetModuleId(&self, name: *mut _Py_Identifier) -> *mut PyObject {
        (self
            ._PyImport_GetModuleId
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn _PyImport_SetModule(
        &self,
        name: *mut PyObject,
        module: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyImport_SetModule
            .as_ref()
            .expect("Expected function, got error."))(name, module)
    }
    pub unsafe fn _PyImport_SetModuleString(
        &self,
        name: *const ::std::os::raw::c_char,
        module: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyImport_SetModuleString
            .as_ref()
            .expect("Expected function, got error."))(name, module)
    }
    pub unsafe fn _PyImport_AcquireLock(&self) -> () {
        (self
            ._PyImport_AcquireLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyImport_ReleaseLock(&self) -> ::std::os::raw::c_int {
        (self
            ._PyImport_ReleaseLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _PyImport_FindExtensionObject(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyImport_FindExtensionObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _PyImport_FixupBuiltin(
        &self,
        mod_: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        modules: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyImport_FixupBuiltin
            .as_ref()
            .expect("Expected function, got error."))(mod_, name, modules)
    }
    pub unsafe fn _PyImport_FixupExtensionObject(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyImport_FixupExtensionObject
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn PyImport_ExtendInittab(&self, newtab: *mut _inittab) -> ::std::os::raw::c_int {
        (self
            .PyImport_ExtendInittab
            .as_ref()
            .expect("Expected function, got error."))(newtab)
    }
    pub unsafe fn PyObject_CallNoArgs(&self, func: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_CallNoArgs
            .as_ref()
            .expect("Expected function, got error."))(func)
    }
    pub unsafe fn PyObject_Call(
        &self,
        callable: *mut PyObject,
        args: *mut PyObject,
        kwargs: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_Call
            .as_ref()
            .expect("Expected function, got error."))(callable, args, kwargs)
    }
    pub unsafe fn PyObject_CallObject(
        &self,
        callable: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_CallObject
            .as_ref()
            .expect("Expected function, got error."))(callable, args)
    }
    pub unsafe fn PyObject_Type(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_Type
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyObject_Size(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PyObject_Size
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyObject_Length(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PyObject_Length
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyObject_GetItem(&self, o: *mut PyObject, key: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_GetItem
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyObject_SetItem(
        &self,
        o: *mut PyObject,
        key: *mut PyObject,
        v: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_SetItem
            .as_ref()
            .expect("Expected function, got error."))(o, key, v)
    }
    pub unsafe fn PyObject_DelItemString(
        &self,
        o: *mut PyObject,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_DelItemString
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyObject_DelItem(
        &self,
        o: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_DelItem
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyObject_AsCharBuffer(
        &self,
        obj: *mut PyObject,
        buffer: *mut *const ::std::os::raw::c_char,
        buffer_len: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_AsCharBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj, buffer, buffer_len)
    }
    pub unsafe fn PyObject_CheckReadBuffer(&self, obj: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_CheckReadBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn PyObject_AsReadBuffer(
        &self,
        obj: *mut PyObject,
        buffer: *mut *const ::std::os::raw::c_void,
        buffer_len: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_AsReadBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj, buffer, buffer_len)
    }
    pub unsafe fn PyObject_AsWriteBuffer(
        &self,
        obj: *mut PyObject,
        buffer: *mut *mut ::std::os::raw::c_void,
        buffer_len: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_AsWriteBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj, buffer, buffer_len)
    }
    pub unsafe fn PyObject_Format(
        &self,
        obj: *mut PyObject,
        format_spec: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_Format
            .as_ref()
            .expect("Expected function, got error."))(obj, format_spec)
    }
    pub unsafe fn PyObject_GetIter(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyObject_GetIter
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyIter_Check(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyIter_Check
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyIter_Next(&self, arg1: *mut PyObject) -> *mut PyObject {
        (self
            .PyIter_Next
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyNumber_Check(&self, o: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyNumber_Check
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Add(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Add
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Subtract(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Subtract
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Multiply(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Multiply
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_MatrixMultiply(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_MatrixMultiply
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_FloorDivide(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_FloorDivide
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_TrueDivide(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_TrueDivide
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Remainder(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Remainder
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Divmod(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Divmod
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Power(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
        o3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_Power
            .as_ref()
            .expect("Expected function, got error."))(o1, o2, o3)
    }
    pub unsafe fn PyNumber_Negative(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Negative
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Positive(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Positive
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Absolute(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Absolute
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Invert(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Invert
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Lshift(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Lshift
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Rshift(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Rshift
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_And(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_And
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Xor(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Xor
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_Or(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Or
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyIndex_Check(&self, arg1: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyIndex_Check
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn PyNumber_Index(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Index
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_AsSsize_t(&self, o: *mut PyObject, exc: *mut PyObject) -> Py_ssize_t {
        (self
            .PyNumber_AsSsize_t
            .as_ref()
            .expect("Expected function, got error."))(o, exc)
    }
    pub unsafe fn PyNumber_Long(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Long
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_Float(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_Float
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyNumber_InPlaceAdd(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceAdd
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceSubtract(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceSubtract
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceMultiply(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceMultiply
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceMatrixMultiply(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceMatrixMultiply
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceFloorDivide(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceFloorDivide
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceTrueDivide(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceTrueDivide
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceRemainder(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceRemainder
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlacePower(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
        o3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlacePower
            .as_ref()
            .expect("Expected function, got error."))(o1, o2, o3)
    }
    pub unsafe fn PyNumber_InPlaceLshift(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceLshift
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceRshift(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceRshift
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceAnd(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceAnd
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceXor(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyNumber_InPlaceXor
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_InPlaceOr(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PyNumber_InPlaceOr
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PyNumber_ToBase(
        &self,
        n: *mut PyObject,
        base: ::std::os::raw::c_int,
    ) -> *mut PyObject {
        (self
            .PyNumber_ToBase
            .as_ref()
            .expect("Expected function, got error."))(n, base)
    }
    pub unsafe fn PySequence_Check(&self, o: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PySequence_Check
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PySequence_Size(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PySequence_Size
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PySequence_Length(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PySequence_Length
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PySequence_Concat(&self, o1: *mut PyObject, o2: *mut PyObject) -> *mut PyObject {
        (self
            .PySequence_Concat
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PySequence_Repeat(&self, o: *mut PyObject, count: Py_ssize_t) -> *mut PyObject {
        (self
            .PySequence_Repeat
            .as_ref()
            .expect("Expected function, got error."))(o, count)
    }
    pub unsafe fn PySequence_GetItem(&self, o: *mut PyObject, i: Py_ssize_t) -> *mut PyObject {
        (self
            .PySequence_GetItem
            .as_ref()
            .expect("Expected function, got error."))(o, i)
    }
    pub unsafe fn PySequence_GetSlice(
        &self,
        o: *mut PyObject,
        i1: Py_ssize_t,
        i2: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PySequence_GetSlice
            .as_ref()
            .expect("Expected function, got error."))(o, i1, i2)
    }
    pub unsafe fn PySequence_SetItem(
        &self,
        o: *mut PyObject,
        i: Py_ssize_t,
        v: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_SetItem
            .as_ref()
            .expect("Expected function, got error."))(o, i, v)
    }
    pub unsafe fn PySequence_DelItem(
        &self,
        o: *mut PyObject,
        i: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_DelItem
            .as_ref()
            .expect("Expected function, got error."))(o, i)
    }
    pub unsafe fn PySequence_SetSlice(
        &self,
        o: *mut PyObject,
        i1: Py_ssize_t,
        i2: Py_ssize_t,
        v: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_SetSlice
            .as_ref()
            .expect("Expected function, got error."))(o, i1, i2, v)
    }
    pub unsafe fn PySequence_DelSlice(
        &self,
        o: *mut PyObject,
        i1: Py_ssize_t,
        i2: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_DelSlice
            .as_ref()
            .expect("Expected function, got error."))(o, i1, i2)
    }
    pub unsafe fn PySequence_Tuple(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PySequence_Tuple
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PySequence_List(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PySequence_List
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PySequence_Fast(
        &self,
        o: *mut PyObject,
        m: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PySequence_Fast
            .as_ref()
            .expect("Expected function, got error."))(o, m)
    }
    pub unsafe fn PySequence_Count(&self, o: *mut PyObject, value: *mut PyObject) -> Py_ssize_t {
        (self
            .PySequence_Count
            .as_ref()
            .expect("Expected function, got error."))(o, value)
    }
    pub unsafe fn PySequence_Contains(
        &self,
        seq: *mut PyObject,
        ob: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_Contains
            .as_ref()
            .expect("Expected function, got error."))(seq, ob)
    }
    pub unsafe fn PySequence_In(
        &self,
        o: *mut PyObject,
        value: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PySequence_In
            .as_ref()
            .expect("Expected function, got error."))(o, value)
    }
    pub unsafe fn PySequence_Index(&self, o: *mut PyObject, value: *mut PyObject) -> Py_ssize_t {
        (self
            .PySequence_Index
            .as_ref()
            .expect("Expected function, got error."))(o, value)
    }
    pub unsafe fn PySequence_InPlaceConcat(
        &self,
        o1: *mut PyObject,
        o2: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PySequence_InPlaceConcat
            .as_ref()
            .expect("Expected function, got error."))(o1, o2)
    }
    pub unsafe fn PySequence_InPlaceRepeat(
        &self,
        o: *mut PyObject,
        count: Py_ssize_t,
    ) -> *mut PyObject {
        (self
            .PySequence_InPlaceRepeat
            .as_ref()
            .expect("Expected function, got error."))(o, count)
    }
    pub unsafe fn PyMapping_Check(&self, o: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyMapping_Check
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_Size(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PyMapping_Size
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_Length(&self, o: *mut PyObject) -> Py_ssize_t {
        (self
            .PyMapping_Length
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_HasKeyString(
        &self,
        o: *mut PyObject,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyMapping_HasKeyString
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyMapping_HasKey(
        &self,
        o: *mut PyObject,
        key: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyMapping_HasKey
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyMapping_Keys(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyMapping_Keys
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_Values(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyMapping_Values
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_Items(&self, o: *mut PyObject) -> *mut PyObject {
        (self
            .PyMapping_Items
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyMapping_GetItemString(
        &self,
        o: *mut PyObject,
        key: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            .PyMapping_GetItemString
            .as_ref()
            .expect("Expected function, got error."))(o, key)
    }
    pub unsafe fn PyMapping_SetItemString(
        &self,
        o: *mut PyObject,
        key: *const ::std::os::raw::c_char,
        value: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyMapping_SetItemString
            .as_ref()
            .expect("Expected function, got error."))(o, key, value)
    }
    pub unsafe fn PyObject_IsInstance(
        &self,
        object: *mut PyObject,
        typeorclass: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_IsInstance
            .as_ref()
            .expect("Expected function, got error."))(object, typeorclass)
    }
    pub unsafe fn PyObject_IsSubclass(
        &self,
        object: *mut PyObject,
        typeorclass: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_IsSubclass
            .as_ref()
            .expect("Expected function, got error."))(object, typeorclass)
    }
    pub unsafe fn _PyStack_AsDict(
        &self,
        values: *const *mut PyObject,
        kwnames: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyStack_AsDict
            .as_ref()
            .expect("Expected function, got error."))(values, kwnames)
    }
    pub unsafe fn _Py_CheckFunctionResult(
        &self,
        tstate: *mut PyThreadState,
        callable: *mut PyObject,
        result: *mut PyObject,
        where_: *const ::std::os::raw::c_char,
    ) -> *mut PyObject {
        (self
            ._Py_CheckFunctionResult
            .as_ref()
            .expect("Expected function, got error."))(tstate, callable, result, where_)
    }
    pub unsafe fn _PyObject_MakeTpCall(
        &self,
        tstate: *mut PyThreadState,
        callable: *mut PyObject,
        args: *const *mut PyObject,
        nargs: Py_ssize_t,
        keywords: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyObject_MakeTpCall
            .as_ref()
            .expect("Expected function, got error."))(
            tstate, callable, args, nargs, keywords
        )
    }
    pub unsafe fn PyObject_VectorcallDict(
        &self,
        callable: *mut PyObject,
        args: *const *mut PyObject,
        nargsf: size_t,
        kwargs: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_VectorcallDict
            .as_ref()
            .expect("Expected function, got error."))(callable, args, nargsf, kwargs)
    }
    pub unsafe fn PyVectorcall_Call(
        &self,
        callable: *mut PyObject,
        tuple: *mut PyObject,
        dict: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyVectorcall_Call
            .as_ref()
            .expect("Expected function, got error."))(callable, tuple, dict)
    }
    pub unsafe fn PyObject_VectorcallMethod(
        &self,
        name: *mut PyObject,
        args: *const *mut PyObject,
        nargsf: size_t,
        kwnames: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyObject_VectorcallMethod
            .as_ref()
            .expect("Expected function, got error."))(name, args, nargsf, kwnames)
    }
    pub unsafe fn _PyObject_HasLen(&self, o: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            ._PyObject_HasLen
            .as_ref()
            .expect("Expected function, got error."))(o)
    }
    pub unsafe fn PyObject_LengthHint(&self, o: *mut PyObject, arg1: Py_ssize_t) -> Py_ssize_t {
        (self
            .PyObject_LengthHint
            .as_ref()
            .expect("Expected function, got error."))(o, arg1)
    }
    pub unsafe fn PyObject_CheckBuffer(&self, obj: *mut PyObject) -> ::std::os::raw::c_int {
        (self
            .PyObject_CheckBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn PyObject_GetBuffer(
        &self,
        obj: *mut PyObject,
        view: *mut Py_buffer,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_GetBuffer
            .as_ref()
            .expect("Expected function, got error."))(obj, view, flags)
    }
    pub unsafe fn PyBuffer_GetPointer(
        &self,
        view: *mut Py_buffer,
        indices: *mut Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .PyBuffer_GetPointer
            .as_ref()
            .expect("Expected function, got error."))(view, indices)
    }
    pub unsafe fn PyBuffer_SizeFromFormat(
        &self,
        format: *const ::std::os::raw::c_char,
    ) -> Py_ssize_t {
        (self
            .PyBuffer_SizeFromFormat
            .as_ref()
            .expect("Expected function, got error."))(format)
    }
    pub unsafe fn PyBuffer_ToContiguous(
        &self,
        buf: *mut ::std::os::raw::c_void,
        view: *mut Py_buffer,
        len: Py_ssize_t,
        order: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyBuffer_ToContiguous
            .as_ref()
            .expect("Expected function, got error."))(buf, view, len, order)
    }
    pub unsafe fn PyBuffer_FromContiguous(
        &self,
        view: *mut Py_buffer,
        buf: *mut ::std::os::raw::c_void,
        len: Py_ssize_t,
        order: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyBuffer_FromContiguous
            .as_ref()
            .expect("Expected function, got error."))(view, buf, len, order)
    }
    pub unsafe fn PyObject_CopyData(
        &self,
        dest: *mut PyObject,
        src: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            .PyObject_CopyData
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn PyBuffer_IsContiguous(
        &self,
        view: *const Py_buffer,
        fort: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyBuffer_IsContiguous
            .as_ref()
            .expect("Expected function, got error."))(view, fort)
    }
    pub unsafe fn PyBuffer_FillContiguousStrides(
        &self,
        ndims: ::std::os::raw::c_int,
        shape: *mut Py_ssize_t,
        strides: *mut Py_ssize_t,
        itemsize: ::std::os::raw::c_int,
        fort: ::std::os::raw::c_char,
    ) -> () {
        (self
            .PyBuffer_FillContiguousStrides
            .as_ref()
            .expect("Expected function, got error."))(ndims, shape, strides, itemsize, fort)
    }
    pub unsafe fn PyBuffer_FillInfo(
        &self,
        view: *mut Py_buffer,
        o: *mut PyObject,
        buf: *mut ::std::os::raw::c_void,
        len: Py_ssize_t,
        readonly: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PyBuffer_FillInfo
            .as_ref()
            .expect("Expected function, got error."))(view, o, buf, len, readonly, flags)
    }
    pub unsafe fn PyBuffer_Release(&self, view: *mut Py_buffer) -> () {
        (self
            .PyBuffer_Release
            .as_ref()
            .expect("Expected function, got error."))(view)
    }
    pub unsafe fn _PySequence_IterSearch(
        &self,
        seq: *mut PyObject,
        obj: *mut PyObject,
        operation: ::std::os::raw::c_int,
    ) -> Py_ssize_t {
        (self
            ._PySequence_IterSearch
            .as_ref()
            .expect("Expected function, got error."))(seq, obj, operation)
    }
    pub unsafe fn _PyObject_RealIsInstance(
        &self,
        inst: *mut PyObject,
        cls: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_RealIsInstance
            .as_ref()
            .expect("Expected function, got error."))(inst, cls)
    }
    pub unsafe fn _PyObject_RealIsSubclass(
        &self,
        derived: *mut PyObject,
        cls: *mut PyObject,
    ) -> ::std::os::raw::c_int {
        (self
            ._PyObject_RealIsSubclass
            .as_ref()
            .expect("Expected function, got error."))(derived, cls)
    }
    pub unsafe fn _PySequence_BytesToCharpArray(
        &self,
        self_: *mut PyObject,
    ) -> *const *mut ::std::os::raw::c_char {
        (self
            ._PySequence_BytesToCharpArray
            .as_ref()
            .expect("Expected function, got error."))(self_)
    }
    pub unsafe fn _Py_FreeCharPArray(&self, array: *const *mut ::std::os::raw::c_char) -> () {
        (self
            ._Py_FreeCharPArray
            .as_ref()
            .expect("Expected function, got error."))(array)
    }
    pub unsafe fn _Py_add_one_to_index_F(
        &self,
        nd: ::std::os::raw::c_int,
        index: *mut Py_ssize_t,
        shape: *const Py_ssize_t,
    ) -> () {
        (self
            ._Py_add_one_to_index_F
            .as_ref()
            .expect("Expected function, got error."))(nd, index, shape)
    }
    pub unsafe fn _Py_add_one_to_index_C(
        &self,
        nd: ::std::os::raw::c_int,
        index: *mut Py_ssize_t,
        shape: *const Py_ssize_t,
    ) -> () {
        (self
            ._Py_add_one_to_index_C
            .as_ref()
            .expect("Expected function, got error."))(nd, index, shape)
    }
    pub unsafe fn _Py_convert_optional_to_ssize_t(
        &self,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_convert_optional_to_ssize_t
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn PyEval_EvalCode(
        &self,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyEval_EvalCode
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyEval_EvalCodeEx(
        &self,
        co: *mut PyObject,
        globals: *mut PyObject,
        locals: *mut PyObject,
        args: *const *mut PyObject,
        argc: ::std::os::raw::c_int,
        kwds: *const *mut PyObject,
        kwdc: ::std::os::raw::c_int,
        defs: *const *mut PyObject,
        defc: ::std::os::raw::c_int,
        kwdefs: *mut PyObject,
        closure: *mut PyObject,
    ) -> *mut PyObject {
        (self
            .PyEval_EvalCodeEx
            .as_ref()
            .expect("Expected function, got error."))(
            co, globals, locals, args, argc, kwds, kwdc, defs, defc, kwdefs, closure,
        )
    }
    pub unsafe fn _PyEval_EvalCodeWithName(
        &self,
        co: *mut PyObject,
        globals: *mut PyObject,
        locals: *mut PyObject,
        args: *const *mut PyObject,
        argcount: Py_ssize_t,
        kwnames: *const *mut PyObject,
        kwargs: *const *mut PyObject,
        kwcount: Py_ssize_t,
        kwstep: ::std::os::raw::c_int,
        defs: *const *mut PyObject,
        defcount: Py_ssize_t,
        kwdefs: *mut PyObject,
        closure: *mut PyObject,
        name: *mut PyObject,
        qualname: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyEval_EvalCodeWithName
            .as_ref()
            .expect("Expected function, got error."))(
            co, globals, locals, args, argcount, kwnames, kwargs, kwcount, kwstep, defs, defcount,
            kwdefs, closure, name, qualname,
        )
    }
    pub unsafe fn _PyEval_CallTracing(
        &self,
        func: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject {
        (self
            ._PyEval_CallTracing
            .as_ref()
            .expect("Expected function, got error."))(func, args)
    }
    pub unsafe fn PyOS_string_to_double(
        &self,
        str_: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        overflow_exception: *mut PyObject,
    ) -> f64 {
        (self
            .PyOS_string_to_double
            .as_ref()
            .expect("Expected function, got error."))(str_, endptr, overflow_exception)
    }
    pub unsafe fn PyOS_double_to_string(
        &self,
        val: f64,
        format_code: ::std::os::raw::c_char,
        precision: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        type_: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .PyOS_double_to_string
            .as_ref()
            .expect("Expected function, got error."))(
            val, format_code, precision, flags, type_
        )
    }
    pub unsafe fn _Py_string_to_number_with_underscores(
        &self,
        str_: *const ::std::os::raw::c_char,
        len: Py_ssize_t,
        what: *const ::std::os::raw::c_char,
        obj: *mut PyObject,
        arg: *mut ::std::os::raw::c_void,
        innerfunc: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: Py_ssize_t,
                arg3: *mut ::std::os::raw::c_void,
            ) -> *mut PyObject,
        >,
    ) -> *mut PyObject {
        (self
            ._Py_string_to_number_with_underscores
            .as_ref()
            .expect("Expected function, got error."))(str_, len, what, obj, arg, innerfunc)
    }
    pub unsafe fn _Py_parse_inf_or_nan(
        &self,
        p: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self
            ._Py_parse_inf_or_nan
            .as_ref()
            .expect("Expected function, got error."))(p, endptr)
    }
    pub unsafe fn PyOS_mystrnicmp(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: Py_ssize_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyOS_mystrnicmp
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn PyOS_mystricmp(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .PyOS_mystricmp
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn Py_DecodeLocale(
        &self,
        arg: *const ::std::os::raw::c_char,
        size: *mut size_t,
    ) -> *mut wchar_t {
        (self
            .Py_DecodeLocale
            .as_ref()
            .expect("Expected function, got error."))(arg, size)
    }
    pub unsafe fn Py_EncodeLocale(
        &self,
        text: *const wchar_t,
        error_pos: *mut size_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .Py_EncodeLocale
            .as_ref()
            .expect("Expected function, got error."))(text, error_pos)
    }
    pub unsafe fn _Py_EncodeLocaleRaw(
        &self,
        text: *const wchar_t,
        error_pos: *mut size_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._Py_EncodeLocaleRaw
            .as_ref()
            .expect("Expected function, got error."))(text, error_pos)
    }
    pub unsafe fn _Py_GetErrorHandler(
        &self,
        errors: *const ::std::os::raw::c_char,
    ) -> _Py_error_handler {
        (self
            ._Py_GetErrorHandler
            .as_ref()
            .expect("Expected function, got error."))(errors)
    }
    pub unsafe fn _Py_DecodeLocaleEx(
        &self,
        arg: *const ::std::os::raw::c_char,
        wstr: *mut *mut wchar_t,
        wlen: *mut size_t,
        reason: *mut *const ::std::os::raw::c_char,
        current_locale: ::std::os::raw::c_int,
        errors: _Py_error_handler,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_DecodeLocaleEx
            .as_ref()
            .expect("Expected function, got error."))(
            arg,
            wstr,
            wlen,
            reason,
            current_locale,
            errors,
        )
    }
    pub unsafe fn _Py_EncodeLocaleEx(
        &self,
        text: *const wchar_t,
        str_: *mut *mut ::std::os::raw::c_char,
        error_pos: *mut size_t,
        reason: *mut *const ::std::os::raw::c_char,
        current_locale: ::std::os::raw::c_int,
        errors: _Py_error_handler,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_EncodeLocaleEx
            .as_ref()
            .expect("Expected function, got error."))(
            text,
            str_,
            error_pos,
            reason,
            current_locale,
            errors,
        )
    }
    pub unsafe fn _Py_device_encoding(&self, arg1: ::std::os::raw::c_int) -> *mut PyObject {
        (self
            ._Py_device_encoding
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _Py_fstat(
        &self,
        fd: ::std::os::raw::c_int,
        status: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_fstat
            .as_ref()
            .expect("Expected function, got error."))(fd, status)
    }
    pub unsafe fn _Py_fstat_noraise(
        &self,
        fd: ::std::os::raw::c_int,
        status: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_fstat_noraise
            .as_ref()
            .expect("Expected function, got error."))(fd, status)
    }
    pub unsafe fn _Py_stat(&self, path: *mut PyObject, status: *mut stat) -> ::std::os::raw::c_int {
        (self
            ._Py_stat
            .as_ref()
            .expect("Expected function, got error."))(path, status)
    }
    pub unsafe fn _Py_open(
        &self,
        pathname: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_open
            .as_ref()
            .expect("Expected function, got error."))(pathname, flags)
    }
    pub unsafe fn _Py_open_noraise(
        &self,
        pathname: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_open_noraise
            .as_ref()
            .expect("Expected function, got error."))(pathname, flags)
    }
    pub unsafe fn _Py_wfopen(&self, path: *const wchar_t, mode: *const wchar_t) -> *mut FILE {
        (self
            ._Py_wfopen
            .as_ref()
            .expect("Expected function, got error."))(path, mode)
    }
    pub unsafe fn _Py_fopen(
        &self,
        pathname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            ._Py_fopen
            .as_ref()
            .expect("Expected function, got error."))(pathname, mode)
    }
    pub unsafe fn _Py_fopen_obj(
        &self,
        path: *mut PyObject,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            ._Py_fopen_obj
            .as_ref()
            .expect("Expected function, got error."))(path, mode)
    }
    pub unsafe fn _Py_read(
        &self,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> Py_ssize_t {
        (self
            ._Py_read
            .as_ref()
            .expect("Expected function, got error."))(fd, buf, count)
    }
    pub unsafe fn _Py_write(
        &self,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        count: size_t,
    ) -> Py_ssize_t {
        (self
            ._Py_write
            .as_ref()
            .expect("Expected function, got error."))(fd, buf, count)
    }
    pub unsafe fn _Py_write_noraise(
        &self,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        count: size_t,
    ) -> Py_ssize_t {
        (self
            ._Py_write_noraise
            .as_ref()
            .expect("Expected function, got error."))(fd, buf, count)
    }
    pub unsafe fn _Py_wreadlink(
        &self,
        path: *const wchar_t,
        buf: *mut wchar_t,
        buflen: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_wreadlink
            .as_ref()
            .expect("Expected function, got error."))(path, buf, buflen)
    }
    pub unsafe fn _Py_wrealpath(
        &self,
        path: *const wchar_t,
        resolved_path: *mut wchar_t,
        resolved_path_len: size_t,
    ) -> *mut wchar_t {
        (self
            ._Py_wrealpath
            .as_ref()
            .expect("Expected function, got error."))(path, resolved_path, resolved_path_len)
    }
    pub unsafe fn _Py_isabs(&self, path: *const wchar_t) -> ::std::os::raw::c_int {
        (self
            ._Py_isabs
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn _Py_abspath(
        &self,
        path: *const wchar_t,
        abspath_p: *mut *mut wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_abspath
            .as_ref()
            .expect("Expected function, got error."))(path, abspath_p)
    }
    pub unsafe fn _Py_wgetcwd(&self, buf: *mut wchar_t, buflen: size_t) -> *mut wchar_t {
        (self
            ._Py_wgetcwd
            .as_ref()
            .expect("Expected function, got error."))(buf, buflen)
    }
    pub unsafe fn _Py_get_inheritable(&self, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._Py_get_inheritable
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
    pub unsafe fn _Py_set_inheritable(
        &self,
        fd: ::std::os::raw::c_int,
        inheritable: ::std::os::raw::c_int,
        atomic_flag_works: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_set_inheritable
            .as_ref()
            .expect("Expected function, got error."))(fd, inheritable, atomic_flag_works)
    }
    pub unsafe fn _Py_set_inheritable_async_safe(
        &self,
        fd: ::std::os::raw::c_int,
        inheritable: ::std::os::raw::c_int,
        atomic_flag_works: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_set_inheritable_async_safe
            .as_ref()
            .expect("Expected function, got error."))(fd, inheritable, atomic_flag_works)
    }
    pub unsafe fn _Py_dup(&self, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._Py_dup
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
    pub unsafe fn _Py_get_blocking(&self, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._Py_get_blocking
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
    pub unsafe fn _Py_set_blocking(
        &self,
        fd: ::std::os::raw::c_int,
        blocking: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._Py_set_blocking
            .as_ref()
            .expect("Expected function, got error."))(fd, blocking)
    }
    pub unsafe fn PyTraceMalloc_Track(
        &self,
        domain: ::std::os::raw::c_uint,
        ptr: usize,
        size: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .PyTraceMalloc_Track
            .as_ref()
            .expect("Expected function, got error."))(domain, ptr, size)
    }
    pub unsafe fn PyTraceMalloc_Untrack(
        &self,
        domain: ::std::os::raw::c_uint,
        ptr: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .PyTraceMalloc_Untrack
            .as_ref()
            .expect("Expected function, got error."))(domain, ptr)
    }
    pub unsafe fn _PyTraceMalloc_GetTraceback(
        &self,
        domain: ::std::os::raw::c_uint,
        ptr: usize,
    ) -> *mut PyObject {
        (self
            ._PyTraceMalloc_GetTraceback
            .as_ref()
            .expect("Expected function, got error."))(domain, ptr)
    }
}
